
Batteriest_EmbSysCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800aba0  0800aba0  0001aba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b030  0800b030  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b030  0800b030  0001b030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b038  0800b038  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b038  0800b038  0001b038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b03c  0800b03c  0001b03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  200001e8  0800b224  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007f8  0800b224  000207f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000edfe  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000218a  00000000  00000000  0002f055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  000311e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b49  00000000  00000000  00032050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001895f  00000000  00000000  00032b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010778  00000000  00000000  0004b4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bb7e  00000000  00000000  0005bc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005360  00000000  00000000  000f77f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000fcb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab84 	.word	0x0800ab84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800ab84 	.word	0x0800ab84

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_frsub>:
 8000cb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	e002      	b.n	8000cc4 <__addsf3>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fsub>:
 8000cc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cc4 <__addsf3>:
 8000cc4:	0042      	lsls	r2, r0, #1
 8000cc6:	bf1f      	itttt	ne
 8000cc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ccc:	ea92 0f03 	teqne	r2, r3
 8000cd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd8:	d06a      	beq.n	8000db0 <__addsf3+0xec>
 8000cda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ce2:	bfc1      	itttt	gt
 8000ce4:	18d2      	addgt	r2, r2, r3
 8000ce6:	4041      	eorgt	r1, r0
 8000ce8:	4048      	eorgt	r0, r1
 8000cea:	4041      	eorgt	r1, r0
 8000cec:	bfb8      	it	lt
 8000cee:	425b      	neglt	r3, r3
 8000cf0:	2b19      	cmp	r3, #25
 8000cf2:	bf88      	it	hi
 8000cf4:	4770      	bxhi	lr
 8000cf6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4240      	negne	r0, r0
 8000d06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4249      	negne	r1, r1
 8000d16:	ea92 0f03 	teq	r2, r3
 8000d1a:	d03f      	beq.n	8000d9c <__addsf3+0xd8>
 8000d1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d20:	fa41 fc03 	asr.w	ip, r1, r3
 8000d24:	eb10 000c 	adds.w	r0, r0, ip
 8000d28:	f1c3 0320 	rsb	r3, r3, #32
 8000d2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__addsf3+0x78>
 8000d36:	4249      	negs	r1, r1
 8000d38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d40:	d313      	bcc.n	8000d6a <__addsf3+0xa6>
 8000d42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d46:	d306      	bcc.n	8000d56 <__addsf3+0x92>
 8000d48:	0840      	lsrs	r0, r0, #1
 8000d4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d4e:	f102 0201 	add.w	r2, r2, #1
 8000d52:	2afe      	cmp	r2, #254	; 0xfe
 8000d54:	d251      	bcs.n	8000dfa <__addsf3+0x136>
 8000d56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5e:	bf08      	it	eq
 8000d60:	f020 0001 	biceq.w	r0, r0, #1
 8000d64:	ea40 0003 	orr.w	r0, r0, r3
 8000d68:	4770      	bx	lr
 8000d6a:	0049      	lsls	r1, r1, #1
 8000d6c:	eb40 0000 	adc.w	r0, r0, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	bf28      	it	cs
 8000d74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d78:	d2ed      	bcs.n	8000d56 <__addsf3+0x92>
 8000d7a:	fab0 fc80 	clz	ip, r0
 8000d7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d82:	ebb2 020c 	subs.w	r2, r2, ip
 8000d86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d8a:	bfaa      	itet	ge
 8000d8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d90:	4252      	neglt	r2, r2
 8000d92:	4318      	orrge	r0, r3
 8000d94:	bfbc      	itt	lt
 8000d96:	40d0      	lsrlt	r0, r2
 8000d98:	4318      	orrlt	r0, r3
 8000d9a:	4770      	bx	lr
 8000d9c:	f092 0f00 	teq	r2, #0
 8000da0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000da4:	bf06      	itte	eq
 8000da6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000daa:	3201      	addeq	r2, #1
 8000dac:	3b01      	subne	r3, #1
 8000dae:	e7b5      	b.n	8000d1c <__addsf3+0x58>
 8000db0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db8:	bf18      	it	ne
 8000dba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dbe:	d021      	beq.n	8000e04 <__addsf3+0x140>
 8000dc0:	ea92 0f03 	teq	r2, r3
 8000dc4:	d004      	beq.n	8000dd0 <__addsf3+0x10c>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	bf08      	it	eq
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	4770      	bx	lr
 8000dd0:	ea90 0f01 	teq	r0, r1
 8000dd4:	bf1c      	itt	ne
 8000dd6:	2000      	movne	r0, #0
 8000dd8:	4770      	bxne	lr
 8000dda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dde:	d104      	bne.n	8000dea <__addsf3+0x126>
 8000de0:	0040      	lsls	r0, r0, #1
 8000de2:	bf28      	it	cs
 8000de4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	4770      	bx	lr
 8000dea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dee:	bf3c      	itt	cc
 8000df0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000df4:	4770      	bxcc	lr
 8000df6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	4770      	bx	lr
 8000e04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e08:	bf16      	itet	ne
 8000e0a:	4608      	movne	r0, r1
 8000e0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e10:	4601      	movne	r1, r0
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	bf06      	itte	eq
 8000e16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e1a:	ea90 0f01 	teqeq	r0, r1
 8000e1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_ui2f>:
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e004      	b.n	8000e34 <__aeabi_i2f+0x8>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_i2f>:
 8000e2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e30:	bf48      	it	mi
 8000e32:	4240      	negmi	r0, r0
 8000e34:	ea5f 0c00 	movs.w	ip, r0
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e40:	4601      	mov	r1, r0
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	e01c      	b.n	8000e82 <__aeabi_l2f+0x2a>

08000e48 <__aeabi_ul2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e00a      	b.n	8000e6c <__aeabi_l2f+0x14>
 8000e56:	bf00      	nop

08000e58 <__aeabi_l2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e64:	d502      	bpl.n	8000e6c <__aeabi_l2f+0x14>
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	ea5f 0c01 	movs.w	ip, r1
 8000e70:	bf02      	ittt	eq
 8000e72:	4684      	moveq	ip, r0
 8000e74:	4601      	moveq	r1, r0
 8000e76:	2000      	moveq	r0, #0
 8000e78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e7c:	bf08      	it	eq
 8000e7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e86:	fabc f28c 	clz	r2, ip
 8000e8a:	3a08      	subs	r2, #8
 8000e8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e90:	db10      	blt.n	8000eb4 <__aeabi_l2f+0x5c>
 8000e92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e96:	4463      	add	r3, ip
 8000e98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ea4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	f020 0001 	biceq.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	f102 0220 	add.w	r2, r2, #32
 8000eb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ec4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_uldivmod>:
 8000ed4:	b953      	cbnz	r3, 8000eec <__aeabi_uldivmod+0x18>
 8000ed6:	b94a      	cbnz	r2, 8000eec <__aeabi_uldivmod+0x18>
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	bf08      	it	eq
 8000edc:	2800      	cmpeq	r0, #0
 8000ede:	bf1c      	itt	ne
 8000ee0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ee4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ee8:	f000 b9a6 	b.w	8001238 <__aeabi_idiv0>
 8000eec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ef0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ef4:	f000 f83c 	bl	8000f70 <__udivmoddi4>
 8000ef8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f00:	b004      	add	sp, #16
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_d2lz>:
 8000f04:	b538      	push	{r3, r4, r5, lr}
 8000f06:	2200      	movs	r2, #0
 8000f08:	2300      	movs	r3, #0
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	460d      	mov	r5, r1
 8000f0e:	f7ff fdfd 	bl	8000b0c <__aeabi_dcmplt>
 8000f12:	b928      	cbnz	r0, 8000f20 <__aeabi_d2lz+0x1c>
 8000f14:	4620      	mov	r0, r4
 8000f16:	4629      	mov	r1, r5
 8000f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f1c:	f000 b80a 	b.w	8000f34 <__aeabi_d2ulz>
 8000f20:	4620      	mov	r0, r4
 8000f22:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f26:	f000 f805 	bl	8000f34 <__aeabi_d2ulz>
 8000f2a:	4240      	negs	r0, r0
 8000f2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f30:	bd38      	pop	{r3, r4, r5, pc}
 8000f32:	bf00      	nop

08000f34 <__aeabi_d2ulz>:
 8000f34:	b5d0      	push	{r4, r6, r7, lr}
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <__aeabi_d2ulz+0x34>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4606      	mov	r6, r0
 8000f3c:	460f      	mov	r7, r1
 8000f3e:	f7ff fb73 	bl	8000628 <__aeabi_dmul>
 8000f42:	f7ff fe49 	bl	8000bd8 <__aeabi_d2uiz>
 8000f46:	4604      	mov	r4, r0
 8000f48:	f7ff faf4 	bl	8000534 <__aeabi_ui2d>
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <__aeabi_d2ulz+0x38>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f7ff fb6a 	bl	8000628 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4630      	mov	r0, r6
 8000f5a:	4639      	mov	r1, r7
 8000f5c:	f7ff f9ac 	bl	80002b8 <__aeabi_dsub>
 8000f60:	f7ff fe3a 	bl	8000bd8 <__aeabi_d2uiz>
 8000f64:	4621      	mov	r1, r4
 8000f66:	bdd0      	pop	{r4, r6, r7, pc}
 8000f68:	3df00000 	.word	0x3df00000
 8000f6c:	41f00000 	.word	0x41f00000

08000f70 <__udivmoddi4>:
 8000f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f74:	9e08      	ldr	r6, [sp, #32]
 8000f76:	460d      	mov	r5, r1
 8000f78:	4604      	mov	r4, r0
 8000f7a:	460f      	mov	r7, r1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d14a      	bne.n	8001016 <__udivmoddi4+0xa6>
 8000f80:	428a      	cmp	r2, r1
 8000f82:	4694      	mov	ip, r2
 8000f84:	d965      	bls.n	8001052 <__udivmoddi4+0xe2>
 8000f86:	fab2 f382 	clz	r3, r2
 8000f8a:	b143      	cbz	r3, 8000f9e <__udivmoddi4+0x2e>
 8000f8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f90:	f1c3 0220 	rsb	r2, r3, #32
 8000f94:	409f      	lsls	r7, r3
 8000f96:	fa20 f202 	lsr.w	r2, r0, r2
 8000f9a:	4317      	orrs	r7, r2
 8000f9c:	409c      	lsls	r4, r3
 8000f9e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000fa2:	fa1f f58c 	uxth.w	r5, ip
 8000fa6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000faa:	0c22      	lsrs	r2, r4, #16
 8000fac:	fb0e 7711 	mls	r7, lr, r1, r7
 8000fb0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000fb4:	fb01 f005 	mul.w	r0, r1, r5
 8000fb8:	4290      	cmp	r0, r2
 8000fba:	d90a      	bls.n	8000fd2 <__udivmoddi4+0x62>
 8000fbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000fc4:	f080 811c 	bcs.w	8001200 <__udivmoddi4+0x290>
 8000fc8:	4290      	cmp	r0, r2
 8000fca:	f240 8119 	bls.w	8001200 <__udivmoddi4+0x290>
 8000fce:	3902      	subs	r1, #2
 8000fd0:	4462      	add	r2, ip
 8000fd2:	1a12      	subs	r2, r2, r0
 8000fd4:	b2a4      	uxth	r4, r4
 8000fd6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000fda:	fb0e 2210 	mls	r2, lr, r0, r2
 8000fde:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fe2:	fb00 f505 	mul.w	r5, r0, r5
 8000fe6:	42a5      	cmp	r5, r4
 8000fe8:	d90a      	bls.n	8001000 <__udivmoddi4+0x90>
 8000fea:	eb1c 0404 	adds.w	r4, ip, r4
 8000fee:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ff2:	f080 8107 	bcs.w	8001204 <__udivmoddi4+0x294>
 8000ff6:	42a5      	cmp	r5, r4
 8000ff8:	f240 8104 	bls.w	8001204 <__udivmoddi4+0x294>
 8000ffc:	4464      	add	r4, ip
 8000ffe:	3802      	subs	r0, #2
 8001000:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001004:	1b64      	subs	r4, r4, r5
 8001006:	2100      	movs	r1, #0
 8001008:	b11e      	cbz	r6, 8001012 <__udivmoddi4+0xa2>
 800100a:	40dc      	lsrs	r4, r3
 800100c:	2300      	movs	r3, #0
 800100e:	e9c6 4300 	strd	r4, r3, [r6]
 8001012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001016:	428b      	cmp	r3, r1
 8001018:	d908      	bls.n	800102c <__udivmoddi4+0xbc>
 800101a:	2e00      	cmp	r6, #0
 800101c:	f000 80ed 	beq.w	80011fa <__udivmoddi4+0x28a>
 8001020:	2100      	movs	r1, #0
 8001022:	e9c6 0500 	strd	r0, r5, [r6]
 8001026:	4608      	mov	r0, r1
 8001028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102c:	fab3 f183 	clz	r1, r3
 8001030:	2900      	cmp	r1, #0
 8001032:	d149      	bne.n	80010c8 <__udivmoddi4+0x158>
 8001034:	42ab      	cmp	r3, r5
 8001036:	d302      	bcc.n	800103e <__udivmoddi4+0xce>
 8001038:	4282      	cmp	r2, r0
 800103a:	f200 80f8 	bhi.w	800122e <__udivmoddi4+0x2be>
 800103e:	1a84      	subs	r4, r0, r2
 8001040:	eb65 0203 	sbc.w	r2, r5, r3
 8001044:	2001      	movs	r0, #1
 8001046:	4617      	mov	r7, r2
 8001048:	2e00      	cmp	r6, #0
 800104a:	d0e2      	beq.n	8001012 <__udivmoddi4+0xa2>
 800104c:	e9c6 4700 	strd	r4, r7, [r6]
 8001050:	e7df      	b.n	8001012 <__udivmoddi4+0xa2>
 8001052:	b902      	cbnz	r2, 8001056 <__udivmoddi4+0xe6>
 8001054:	deff      	udf	#255	; 0xff
 8001056:	fab2 f382 	clz	r3, r2
 800105a:	2b00      	cmp	r3, #0
 800105c:	f040 8090 	bne.w	8001180 <__udivmoddi4+0x210>
 8001060:	1a8a      	subs	r2, r1, r2
 8001062:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001066:	fa1f fe8c 	uxth.w	lr, ip
 800106a:	2101      	movs	r1, #1
 800106c:	fbb2 f5f7 	udiv	r5, r2, r7
 8001070:	fb07 2015 	mls	r0, r7, r5, r2
 8001074:	0c22      	lsrs	r2, r4, #16
 8001076:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800107a:	fb0e f005 	mul.w	r0, lr, r5
 800107e:	4290      	cmp	r0, r2
 8001080:	d908      	bls.n	8001094 <__udivmoddi4+0x124>
 8001082:	eb1c 0202 	adds.w	r2, ip, r2
 8001086:	f105 38ff 	add.w	r8, r5, #4294967295
 800108a:	d202      	bcs.n	8001092 <__udivmoddi4+0x122>
 800108c:	4290      	cmp	r0, r2
 800108e:	f200 80cb 	bhi.w	8001228 <__udivmoddi4+0x2b8>
 8001092:	4645      	mov	r5, r8
 8001094:	1a12      	subs	r2, r2, r0
 8001096:	b2a4      	uxth	r4, r4
 8001098:	fbb2 f0f7 	udiv	r0, r2, r7
 800109c:	fb07 2210 	mls	r2, r7, r0, r2
 80010a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010a4:	fb0e fe00 	mul.w	lr, lr, r0
 80010a8:	45a6      	cmp	lr, r4
 80010aa:	d908      	bls.n	80010be <__udivmoddi4+0x14e>
 80010ac:	eb1c 0404 	adds.w	r4, ip, r4
 80010b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80010b4:	d202      	bcs.n	80010bc <__udivmoddi4+0x14c>
 80010b6:	45a6      	cmp	lr, r4
 80010b8:	f200 80bb 	bhi.w	8001232 <__udivmoddi4+0x2c2>
 80010bc:	4610      	mov	r0, r2
 80010be:	eba4 040e 	sub.w	r4, r4, lr
 80010c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80010c6:	e79f      	b.n	8001008 <__udivmoddi4+0x98>
 80010c8:	f1c1 0720 	rsb	r7, r1, #32
 80010cc:	408b      	lsls	r3, r1
 80010ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80010d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80010d6:	fa05 f401 	lsl.w	r4, r5, r1
 80010da:	fa20 f307 	lsr.w	r3, r0, r7
 80010de:	40fd      	lsrs	r5, r7
 80010e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010e4:	4323      	orrs	r3, r4
 80010e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80010ea:	fa1f fe8c 	uxth.w	lr, ip
 80010ee:	fb09 5518 	mls	r5, r9, r8, r5
 80010f2:	0c1c      	lsrs	r4, r3, #16
 80010f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010f8:	fb08 f50e 	mul.w	r5, r8, lr
 80010fc:	42a5      	cmp	r5, r4
 80010fe:	fa02 f201 	lsl.w	r2, r2, r1
 8001102:	fa00 f001 	lsl.w	r0, r0, r1
 8001106:	d90b      	bls.n	8001120 <__udivmoddi4+0x1b0>
 8001108:	eb1c 0404 	adds.w	r4, ip, r4
 800110c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001110:	f080 8088 	bcs.w	8001224 <__udivmoddi4+0x2b4>
 8001114:	42a5      	cmp	r5, r4
 8001116:	f240 8085 	bls.w	8001224 <__udivmoddi4+0x2b4>
 800111a:	f1a8 0802 	sub.w	r8, r8, #2
 800111e:	4464      	add	r4, ip
 8001120:	1b64      	subs	r4, r4, r5
 8001122:	b29d      	uxth	r5, r3
 8001124:	fbb4 f3f9 	udiv	r3, r4, r9
 8001128:	fb09 4413 	mls	r4, r9, r3, r4
 800112c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001130:	fb03 fe0e 	mul.w	lr, r3, lr
 8001134:	45a6      	cmp	lr, r4
 8001136:	d908      	bls.n	800114a <__udivmoddi4+0x1da>
 8001138:	eb1c 0404 	adds.w	r4, ip, r4
 800113c:	f103 35ff 	add.w	r5, r3, #4294967295
 8001140:	d26c      	bcs.n	800121c <__udivmoddi4+0x2ac>
 8001142:	45a6      	cmp	lr, r4
 8001144:	d96a      	bls.n	800121c <__udivmoddi4+0x2ac>
 8001146:	3b02      	subs	r3, #2
 8001148:	4464      	add	r4, ip
 800114a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800114e:	fba3 9502 	umull	r9, r5, r3, r2
 8001152:	eba4 040e 	sub.w	r4, r4, lr
 8001156:	42ac      	cmp	r4, r5
 8001158:	46c8      	mov	r8, r9
 800115a:	46ae      	mov	lr, r5
 800115c:	d356      	bcc.n	800120c <__udivmoddi4+0x29c>
 800115e:	d053      	beq.n	8001208 <__udivmoddi4+0x298>
 8001160:	b156      	cbz	r6, 8001178 <__udivmoddi4+0x208>
 8001162:	ebb0 0208 	subs.w	r2, r0, r8
 8001166:	eb64 040e 	sbc.w	r4, r4, lr
 800116a:	fa04 f707 	lsl.w	r7, r4, r7
 800116e:	40ca      	lsrs	r2, r1
 8001170:	40cc      	lsrs	r4, r1
 8001172:	4317      	orrs	r7, r2
 8001174:	e9c6 7400 	strd	r7, r4, [r6]
 8001178:	4618      	mov	r0, r3
 800117a:	2100      	movs	r1, #0
 800117c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001180:	f1c3 0120 	rsb	r1, r3, #32
 8001184:	fa02 fc03 	lsl.w	ip, r2, r3
 8001188:	fa20 f201 	lsr.w	r2, r0, r1
 800118c:	fa25 f101 	lsr.w	r1, r5, r1
 8001190:	409d      	lsls	r5, r3
 8001192:	432a      	orrs	r2, r5
 8001194:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001198:	fa1f fe8c 	uxth.w	lr, ip
 800119c:	fbb1 f0f7 	udiv	r0, r1, r7
 80011a0:	fb07 1510 	mls	r5, r7, r0, r1
 80011a4:	0c11      	lsrs	r1, r2, #16
 80011a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80011aa:	fb00 f50e 	mul.w	r5, r0, lr
 80011ae:	428d      	cmp	r5, r1
 80011b0:	fa04 f403 	lsl.w	r4, r4, r3
 80011b4:	d908      	bls.n	80011c8 <__udivmoddi4+0x258>
 80011b6:	eb1c 0101 	adds.w	r1, ip, r1
 80011ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80011be:	d22f      	bcs.n	8001220 <__udivmoddi4+0x2b0>
 80011c0:	428d      	cmp	r5, r1
 80011c2:	d92d      	bls.n	8001220 <__udivmoddi4+0x2b0>
 80011c4:	3802      	subs	r0, #2
 80011c6:	4461      	add	r1, ip
 80011c8:	1b49      	subs	r1, r1, r5
 80011ca:	b292      	uxth	r2, r2
 80011cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80011d0:	fb07 1115 	mls	r1, r7, r5, r1
 80011d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011d8:	fb05 f10e 	mul.w	r1, r5, lr
 80011dc:	4291      	cmp	r1, r2
 80011de:	d908      	bls.n	80011f2 <__udivmoddi4+0x282>
 80011e0:	eb1c 0202 	adds.w	r2, ip, r2
 80011e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80011e8:	d216      	bcs.n	8001218 <__udivmoddi4+0x2a8>
 80011ea:	4291      	cmp	r1, r2
 80011ec:	d914      	bls.n	8001218 <__udivmoddi4+0x2a8>
 80011ee:	3d02      	subs	r5, #2
 80011f0:	4462      	add	r2, ip
 80011f2:	1a52      	subs	r2, r2, r1
 80011f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80011f8:	e738      	b.n	800106c <__udivmoddi4+0xfc>
 80011fa:	4631      	mov	r1, r6
 80011fc:	4630      	mov	r0, r6
 80011fe:	e708      	b.n	8001012 <__udivmoddi4+0xa2>
 8001200:	4639      	mov	r1, r7
 8001202:	e6e6      	b.n	8000fd2 <__udivmoddi4+0x62>
 8001204:	4610      	mov	r0, r2
 8001206:	e6fb      	b.n	8001000 <__udivmoddi4+0x90>
 8001208:	4548      	cmp	r0, r9
 800120a:	d2a9      	bcs.n	8001160 <__udivmoddi4+0x1f0>
 800120c:	ebb9 0802 	subs.w	r8, r9, r2
 8001210:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001214:	3b01      	subs	r3, #1
 8001216:	e7a3      	b.n	8001160 <__udivmoddi4+0x1f0>
 8001218:	4645      	mov	r5, r8
 800121a:	e7ea      	b.n	80011f2 <__udivmoddi4+0x282>
 800121c:	462b      	mov	r3, r5
 800121e:	e794      	b.n	800114a <__udivmoddi4+0x1da>
 8001220:	4640      	mov	r0, r8
 8001222:	e7d1      	b.n	80011c8 <__udivmoddi4+0x258>
 8001224:	46d0      	mov	r8, sl
 8001226:	e77b      	b.n	8001120 <__udivmoddi4+0x1b0>
 8001228:	3d02      	subs	r5, #2
 800122a:	4462      	add	r2, ip
 800122c:	e732      	b.n	8001094 <__udivmoddi4+0x124>
 800122e:	4608      	mov	r0, r1
 8001230:	e70a      	b.n	8001048 <__udivmoddi4+0xd8>
 8001232:	4464      	add	r4, ip
 8001234:	3802      	subs	r0, #2
 8001236:	e742      	b.n	80010be <__udivmoddi4+0x14e>

08001238 <__aeabi_idiv0>:
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop

0800123c <ADC_Select_Current>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// ADC CHANNEL CONFIGURATIONS (MULTI-CHANNEL WITHOUT DMA) //
void ADC_Select_Current() {
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001242:	463b      	mov	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_0;
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001252:	2301      	movs	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001256:	2301      	movs	r3, #1
 8001258:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800125a:	463b      	mov	r3, r7
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <ADC_Select_Current+0x3c>)
 8001260:	f001 fb3e 	bl	80028e0 <HAL_ADC_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <ADC_Select_Current+0x32>
		Error_Handler();
 800126a:	f000 fe79 	bl	8001f60 <Error_Handler>
	}
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000204 	.word	0x20000204

0800127c <ADC_Select_Temp>:
void ADC_Select_Temp() {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001282:	463b      	mov	r3, r7
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_1;
 800128e:	2301      	movs	r3, #1
 8001290:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001292:	2301      	movs	r3, #1
 8001294:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001296:	2301      	movs	r3, #1
 8001298:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800129a:	463b      	mov	r3, r7
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	; (80012b8 <ADC_Select_Temp+0x3c>)
 80012a0:	f001 fb1e 	bl	80028e0 <HAL_ADC_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <ADC_Select_Temp+0x32>
		Error_Handler();
 80012aa:	f000 fe59 	bl	8001f60 <Error_Handler>
	}
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000204 	.word	0x20000204

080012bc <ADC_Select_Voltage>:

void ADC_Select_Voltage() {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80012c2:	463b      	mov	r3, r7
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_2;
 80012ce:	2302      	movs	r3, #2
 80012d0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80012d6:	2301      	movs	r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012da:	463b      	mov	r3, r7
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <ADC_Select_Voltage+0x3c>)
 80012e0:	f001 fafe 	bl	80028e0 <HAL_ADC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <ADC_Select_Voltage+0x32>
		Error_Handler();
 80012ea:	f000 fe39 	bl	8001f60 <Error_Handler>
	}
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000204 	.word	0x20000204

080012fc <ADC_Select_Vrefint>:
void ADC_Select_Vrefint() {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001302:	463b      	mov	r3, r7
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800130e:	2311      	movs	r3, #17
 8001310:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001312:	2301      	movs	r3, #1
 8001314:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001316:	2301      	movs	r3, #1
 8001318:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800131a:	463b      	mov	r3, r7
 800131c:	4619      	mov	r1, r3
 800131e:	4806      	ldr	r0, [pc, #24]	; (8001338 <ADC_Select_Vrefint+0x3c>)
 8001320:	f001 fade 	bl	80028e0 <HAL_ADC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <ADC_Select_Vrefint+0x32>
		Error_Handler();
 800132a:	f000 fe19 	bl	8001f60 <Error_Handler>
	}
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000204 	.word	0x20000204

0800133c <Get_ADC_Value>:
//END CODE OF ADC CHANNEL CONFIGURATIONS (MULTI-CHANNEL WITHOUT DMA) //

// READING AND PROCESSING ADC VALUES WITH MOVING AVERAGE //
uint16_t Get_ADC_Value() {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
	uint16_t adc_value = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Start(&hadc1);
 8001346:	480b      	ldr	r0, [pc, #44]	; (8001374 <Get_ADC_Value+0x38>)
 8001348:	f001 f94a 	bl	80025e0 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK) {
 800134c:	2101      	movs	r1, #1
 800134e:	4809      	ldr	r0, [pc, #36]	; (8001374 <Get_ADC_Value+0x38>)
 8001350:	f001 fa2d 	bl	80027ae <HAL_ADC_PollForConversion>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d104      	bne.n	8001364 <Get_ADC_Value+0x28>
		adc_value = HAL_ADC_GetValue(&hadc1);
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <Get_ADC_Value+0x38>)
 800135c:	f001 fab2 	bl	80028c4 <HAL_ADC_GetValue>
 8001360:	4603      	mov	r3, r0
 8001362:	80fb      	strh	r3, [r7, #6]
	}
	HAL_ADC_Stop(&hadc1);
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <Get_ADC_Value+0x38>)
 8001366:	f001 f9ef 	bl	8002748 <HAL_ADC_Stop>
	return adc_value;
 800136a:	88fb      	ldrh	r3, [r7, #6]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000204 	.word	0x20000204

08001378 <Get_ADC_MA_Vref>:

float Get_ADC_MA_Vref(uint16_t *adc_vrefint_buffer) {
 8001378:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
	uint64_t sum_adc_value = 0;
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t i = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
	for (; i < NOS; i++) {
 8001392:	e013      	b.n	80013bc <Get_ADC_MA_Vref+0x44>
		sum_adc_value = sum_adc_value + adc_vrefint_buffer[i];
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	2200      	movs	r2, #0
 80013a2:	461c      	mov	r4, r3
 80013a4:	4615      	mov	r5, r2
 80013a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013aa:	eb12 0804 	adds.w	r8, r2, r4
 80013ae:	eb43 0905 	adc.w	r9, r3, r5
 80013b2:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (; i < NOS; i++) {
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	3301      	adds	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2b63      	cmp	r3, #99	; 0x63
 80013c0:	d9e8      	bls.n	8001394 <Get_ADC_MA_Vref+0x1c>
	}
	return sum_adc_value / NOS;
 80013c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013c6:	f04f 0264 	mov.w	r2, #100	; 0x64
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	f7ff fd81 	bl	8000ed4 <__aeabi_uldivmod>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fd35 	bl	8000e48 <__aeabi_ul2f>
 80013de:	4603      	mov	r3, r0
 80013e0:	ee07 3a90 	vmov	s15, r3
}
 80013e4:	eeb0 0a67 	vmov.f32	s0, s15
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080013f0 <Get_ADC_Voltage>:

float Get_ADC_Voltage(float raw_voltage) {
 80013f0:	b5b0      	push	{r4, r5, r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	ed87 0a01 	vstr	s0, [r7, #4]
	return (raw_voltage / 4095.0) * Vrefint * 2.0 *1.03;
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff f8bc 	bl	8000578 <__aeabi_f2d>
 8001400:	a31c      	add	r3, pc, #112	; (adr r3, 8001474 <Get_ADC_Voltage+0x84>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7ff fa39 	bl	800087c <__aeabi_ddiv>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4614      	mov	r4, r2
 8001410:	461d      	mov	r5, r3
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <Get_ADC_Voltage+0x80>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f8ae 	bl	8000578 <__aeabi_f2d>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4620      	mov	r0, r4
 8001422:	4629      	mov	r1, r5
 8001424:	f7ff f900 	bl	8000628 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	f7fe ff42 	bl	80002bc <__adddf3>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	a309      	add	r3, pc, #36	; (adr r3, 8001468 <Get_ADC_Voltage+0x78>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f8ef 	bl	8000628 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fbe1 	bl	8000c18 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	ee07 3a90 	vmov	s15, r3
}
 800145c:	eeb0 0a67 	vmov.f32	s0, s15
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bdb0      	pop	{r4, r5, r7, pc}
 8001466:	bf00      	nop
 8001468:	47ae147b 	.word	0x47ae147b
 800146c:	3ff07ae1 	.word	0x3ff07ae1
 8001470:	20000008 	.word	0x20000008
 8001474:	00000000 	.word	0x00000000
 8001478:	40affe00 	.word	0x40affe00

0800147c <Get_ADC_Vrefint>:

float Get_ADC_Vrefint(float raw_vrefint) {
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	ed87 0a01 	vstr	s0, [r7, #4]
	return (raw_vrefint / *VREFIN_CAL) * Vrefint;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <Get_ADC_Vrefint+0x38>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	edd7 6a01 	vldr	s13, [r7, #4]
 8001496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <Get_ADC_Vrefint+0x3c>)
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80014a4:	eeb0 0a67 	vmov.f32	s0, s15
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	1fff7a2a 	.word	0x1fff7a2a
 80014b8:	20000008 	.word	0x20000008
 80014bc:	00000000 	.word	0x00000000

080014c0 <Get_ADC_Current>:

float Get_ADC_Current(float raw_current) {
 80014c0:	b5b0      	push	{r4, r5, r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	ed87 0a01 	vstr	s0, [r7, #4]
	return (((raw_current / 4095.0) * Vrefint * 2.0) - Crefint) / (lts_Vsamp);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff f854 	bl	8000578 <__aeabi_f2d>
 80014d0:	a326      	add	r3, pc, #152	; (adr r3, 800156c <Get_ADC_Current+0xac>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7ff f9d1 	bl	800087c <__aeabi_ddiv>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4614      	mov	r4, r2
 80014e0:	461d      	mov	r5, r3
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <Get_ADC_Current+0xa0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f846 	bl	8000578 <__aeabi_f2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4620      	mov	r0, r4
 80014f2:	4629      	mov	r1, r5
 80014f4:	f7ff f898 	bl	8000628 <__aeabi_dmul>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	f7fe feda 	bl	80002bc <__adddf3>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4614      	mov	r4, r2
 800150e:	461d      	mov	r5, r3
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <Get_ADC_Current+0xa4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f82f 	bl	8000578 <__aeabi_f2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4620      	mov	r0, r4
 8001520:	4629      	mov	r1, r5
 8001522:	f7fe fec9 	bl	80002b8 <__aeabi_dsub>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4614      	mov	r4, r2
 800152c:	461d      	mov	r5, r3
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <Get_ADC_Current+0xa8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f820 	bl	8000578 <__aeabi_f2d>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4620      	mov	r0, r4
 800153e:	4629      	mov	r1, r5
 8001540:	f7ff f99c 	bl	800087c <__aeabi_ddiv>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff fb64 	bl	8000c18 <__aeabi_d2f>
 8001550:	4603      	mov	r3, r0
 8001552:	ee07 3a90 	vmov	s15, r3
}
 8001556:	eeb0 0a67 	vmov.f32	s0, s15
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bdb0      	pop	{r4, r5, r7, pc}
 8001560:	20000008 	.word	0x20000008
 8001564:	2000000c 	.word	0x2000000c
 8001568:	20000004 	.word	0x20000004
 800156c:	00000000 	.word	0x00000000
 8001570:	40affe00 	.word	0x40affe00
 8001574:	00000000 	.word	0x00000000

08001578 <Get_ADC_Temp>:

double Get_ADC_Temp(uint16_t adc_value) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
	double temp;
	temp = log(((40950000 / adc_value) - 10000));
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	4a36      	ldr	r2, [pc, #216]	; (8001660 <Get_ADC_Temp+0xe8>)
 8001586:	fb92 f3f3 	sdiv	r3, r2, r3
 800158a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800158e:	3b10      	subs	r3, #16
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ffdf 	bl	8000554 <__aeabi_i2d>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	ec43 2b10 	vmov	d0, r2, r3
 800159e:	f009 f8f7 	bl	800a790 <log>
 80015a2:	ed87 0b02 	vstr	d0, [r7, #8]
	temp = 1
			/ (0.001129148
					+ (0.000234125 + (0.0000000876741 * temp * temp)) * temp);
 80015a6:	a326      	add	r3, pc, #152	; (adr r3, 8001640 <Get_ADC_Temp+0xc8>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015b0:	f7ff f83a 	bl	8000628 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015c0:	f7ff f832 	bl	8000628 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	a31e      	add	r3, pc, #120	; (adr r3, 8001648 <Get_ADC_Temp+0xd0>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7fe fe73 	bl	80002bc <__adddf3>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015e2:	f7ff f821 	bl	8000628 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	a318      	add	r3, pc, #96	; (adr r3, 8001650 <Get_ADC_Temp+0xd8>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	f7fe fe62 	bl	80002bc <__adddf3>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
	temp = 1
 80015fc:	f04f 0000 	mov.w	r0, #0
 8001600:	4918      	ldr	r1, [pc, #96]	; (8001664 <Get_ADC_Temp+0xec>)
 8001602:	f7ff f93b 	bl	800087c <__aeabi_ddiv>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp = temp - 273.15;
 800160e:	a312      	add	r3, pc, #72	; (adr r3, 8001658 <Get_ADC_Temp+0xe0>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001618:	f7fe fe4e 	bl	80002b8 <__aeabi_dsub>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return temp;
 8001624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001628:	ec43 2b17 	vmov	d7, r2, r3
}
 800162c:	eeb0 0a47 	vmov.f32	s0, s14
 8001630:	eef0 0a67 	vmov.f32	s1, s15
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	f3af 8000 	nop.w
 8001640:	14170d19 	.word	0x14170d19
 8001644:	3e7788eb 	.word	0x3e7788eb
 8001648:	6fb4c3c2 	.word	0x6fb4c3c2
 800164c:	3f2eafee 	.word	0x3f2eafee
 8001650:	6edeb890 	.word	0x6edeb890
 8001654:	3f527ffd 	.word	0x3f527ffd
 8001658:	66666666 	.word	0x66666666
 800165c:	40711266 	.word	0x40711266
 8001660:	0270d8f0 	.word	0x0270d8f0
 8001664:	3ff00000 	.word	0x3ff00000

08001668 <Get_ADC_Moving_Average>:

float Get_ADC_Moving_Average(uint16_t *adc_value_buffer) {
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	float sum_adc_value = 0;
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	72fb      	strb	r3, [r7, #11]
	for (; i < NOS; i++) {
 800167a:	e011      	b.n	80016a0 <Get_ADC_Moving_Average+0x38>
		sum_adc_value = sum_adc_value + adc_value_buffer[i];
 800167c:	7afb      	ldrb	r3, [r7, #11]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4413      	add	r3, r2
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001696:	edc7 7a03 	vstr	s15, [r7, #12]
	for (; i < NOS; i++) {
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	3301      	adds	r3, #1
 800169e:	72fb      	strb	r3, [r7, #11]
 80016a0:	7afb      	ldrb	r3, [r7, #11]
 80016a2:	2b63      	cmp	r3, #99	; 0x63
 80016a4:	d9ea      	bls.n	800167c <Get_ADC_Moving_Average+0x14>

	}
	sum_adc_value = sum_adc_value / NOS;
 80016a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80016aa:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001718 <Get_ADC_Moving_Average+0xb0>
 80016ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b2:	edc7 7a03 	vstr	s15, [r7, #12]
	return (sum_adc_value / 4095.0) * Vrefint * 2.0;
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f7fe ff5e 	bl	8000578 <__aeabi_f2d>
 80016bc:	a314      	add	r3, pc, #80	; (adr r3, 8001710 <Get_ADC_Moving_Average+0xa8>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f7ff f8db 	bl	800087c <__aeabi_ddiv>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4614      	mov	r4, r2
 80016cc:	461d      	mov	r5, r3
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <Get_ADC_Moving_Average+0xb4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff50 	bl	8000578 <__aeabi_f2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7fe ffa2 	bl	8000628 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	f7fe fde4 	bl	80002bc <__adddf3>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff fa8c 	bl	8000c18 <__aeabi_d2f>
 8001700:	4603      	mov	r3, r0
 8001702:	ee07 3a90 	vmov	s15, r3
}
 8001706:	eeb0 0a67 	vmov.f32	s0, s15
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bdb0      	pop	{r4, r5, r7, pc}
 8001710:	00000000 	.word	0x00000000
 8001714:	40affe00 	.word	0x40affe00
 8001718:	42c80000 	.word	0x42c80000
 800171c:	20000008 	.word	0x20000008

08001720 <Calibration_ADC>:
// END CODE OF READING AND PROCESSING ADC VALUES WITH MOVING AVERAGE //

void Calibration_ADC() {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
	ADC_Select_Vrefint();
 8001726:	f7ff fde9 	bl	80012fc <ADC_Select_Vrefint>
	for (int var = 0; var < NOS; ++var) {
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	e018      	b.n	8001762 <Calibration_ADC+0x42>
		adc_vrefint_value[var] = Get_ADC_Vrefint(Get_ADC_Value());
 8001730:	f7ff fe04 	bl	800133c <Get_ADC_Value>
 8001734:	4603      	mov	r3, r0
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800173e:	eeb0 0a67 	vmov.f32	s0, s15
 8001742:	f7ff fe9b 	bl	800147c <Get_ADC_Vrefint>
 8001746:	eef0 7a40 	vmov.f32	s15, s0
 800174a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800174e:	ee17 3a90 	vmov	r3, s15
 8001752:	b299      	uxth	r1, r3
 8001754:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <Calibration_ADC+0x98>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int var = 0; var < NOS; ++var) {
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3301      	adds	r3, #1
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b63      	cmp	r3, #99	; 0x63
 8001766:	dde3      	ble.n	8001730 <Calibration_ADC+0x10>
	}
	Vrefint = Get_ADC_MA_Vref(adc_vrefint_value);
 8001768:	4813      	ldr	r0, [pc, #76]	; (80017b8 <Calibration_ADC+0x98>)
 800176a:	f7ff fe05 	bl	8001378 <Get_ADC_MA_Vref>
 800176e:	eef0 7a40 	vmov.f32	s15, s0
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <Calibration_ADC+0x9c>)
 8001774:	edc3 7a00 	vstr	s15, [r3]
	ADC_Select_Current();
 8001778:	f7ff fd60 	bl	800123c <ADC_Select_Current>
	for (int var = 0; var < NOS; ++var) {
 800177c:	2300      	movs	r3, #0
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	e00a      	b.n	8001798 <Calibration_ADC+0x78>
		adc_crefint_value[var] = Get_ADC_Value();
 8001782:	f7ff fddb 	bl	800133c <Get_ADC_Value>
 8001786:	4603      	mov	r3, r0
 8001788:	4619      	mov	r1, r3
 800178a:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <Calibration_ADC+0xa0>)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int var = 0; var < NOS; ++var) {
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b63      	cmp	r3, #99	; 0x63
 800179c:	ddf1      	ble.n	8001782 <Calibration_ADC+0x62>
	}
	Crefint = Get_ADC_Moving_Average(adc_crefint_value);
 800179e:	4808      	ldr	r0, [pc, #32]	; (80017c0 <Calibration_ADC+0xa0>)
 80017a0:	f7ff ff62 	bl	8001668 <Get_ADC_Moving_Average>
 80017a4:	eef0 7a40 	vmov.f32	s15, s0
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <Calibration_ADC+0xa4>)
 80017aa:	edc3 7a00 	vstr	s15, [r3]
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000514 	.word	0x20000514
 80017bc:	20000008 	.word	0x20000008
 80017c0:	200005dc 	.word	0x200005dc
 80017c4:	2000000c 	.word	0x2000000c

080017c8 <Bat_Relay_Cmd>:

// RELAY (GPIO CHANNEL) CONFIGURATIONS //
void Bat_Relay_Cmd() {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	switch (relayStatus) {
 80017cc:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <Bat_Relay_Cmd+0xb8>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d852      	bhi.n	800187a <Bat_Relay_Cmd+0xb2>
 80017d4:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <Bat_Relay_Cmd+0x14>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	08001815 	.word	0x08001815
 80017e4:	08001837 	.word	0x08001837
 80017e8:	08001859 	.word	0x08001859
	case relayStatus_Idle:
		HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, GPIO_PIN_SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	2110      	movs	r1, #16
 80017f0:	4824      	ldr	r0, [pc, #144]	; (8001884 <Bat_Relay_Cmd+0xbc>)
 80017f2:	f002 f92b 	bl	8003a4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, GPIO_PIN_SET);
 80017f6:	2201      	movs	r2, #1
 80017f8:	2120      	movs	r1, #32
 80017fa:	4822      	ldr	r0, [pc, #136]	; (8001884 <Bat_Relay_Cmd+0xbc>)
 80017fc:	f002 f926 	bl	8003a4c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001800:	2064      	movs	r0, #100	; 0x64
 8001802:	f000 fe85 	bl	8002510 <HAL_Delay>
		dch_m2 = false;
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <Bat_Relay_Cmd+0xc0>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
		falan = true;
 800180c:	4b1f      	ldr	r3, [pc, #124]	; (800188c <Bat_Relay_Cmd+0xc4>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
		break;
 8001812:	e032      	b.n	800187a <Bat_Relay_Cmd+0xb2>
	case relayStatus_Charge:
		HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	2110      	movs	r1, #16
 8001818:	481a      	ldr	r0, [pc, #104]	; (8001884 <Bat_Relay_Cmd+0xbc>)
 800181a:	f002 f917 	bl	8003a4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, GPIO_PIN_SET);
 800181e:	2201      	movs	r2, #1
 8001820:	2120      	movs	r1, #32
 8001822:	4818      	ldr	r0, [pc, #96]	; (8001884 <Bat_Relay_Cmd+0xbc>)
 8001824:	f002 f912 	bl	8003a4c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001828:	2064      	movs	r0, #100	; 0x64
 800182a:	f000 fe71 	bl	8002510 <HAL_Delay>
		dch_m2 = false;
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <Bat_Relay_Cmd+0xc0>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
		break;
 8001834:	e021      	b.n	800187a <Bat_Relay_Cmd+0xb2>
	case relayStatus_Discharge_M1:
		HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	2110      	movs	r1, #16
 800183a:	4812      	ldr	r0, [pc, #72]	; (8001884 <Bat_Relay_Cmd+0xbc>)
 800183c:	f002 f906 	bl	8003a4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2120      	movs	r1, #32
 8001844:	480f      	ldr	r0, [pc, #60]	; (8001884 <Bat_Relay_Cmd+0xbc>)
 8001846:	f002 f901 	bl	8003a4c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800184a:	2064      	movs	r0, #100	; 0x64
 800184c:	f000 fe60 	bl	8002510 <HAL_Delay>
		dch_m2 = false;
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <Bat_Relay_Cmd+0xc0>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
		break;
 8001856:	e010      	b.n	800187a <Bat_Relay_Cmd+0xb2>
	case relayStatus_Discharge_M2:
		HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2110      	movs	r1, #16
 800185c:	4809      	ldr	r0, [pc, #36]	; (8001884 <Bat_Relay_Cmd+0xbc>)
 800185e:	f002 f8f5 	bl	8003a4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	2120      	movs	r1, #32
 8001866:	4807      	ldr	r0, [pc, #28]	; (8001884 <Bat_Relay_Cmd+0xbc>)
 8001868:	f002 f8f0 	bl	8003a4c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800186c:	2064      	movs	r0, #100	; 0x64
 800186e:	f000 fe4f 	bl	8002510 <HAL_Delay>
		dch_m2 = true;
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <Bat_Relay_Cmd+0xc0>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
		break;
 8001878:	bf00      	nop
	}
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000380 	.word	0x20000380
 8001884:	40020000 	.word	0x40020000
 8001888:	20000000 	.word	0x20000000
 800188c:	20000382 	.word	0x20000382

08001890 <UART_Cmd>:
// END OF RELAY (GPIO CHANNEL) CONFIGURATIONS //

// UART RECEIVE DATA CONFIGURATIONS //
void UART_Cmd(char *cmd) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	if (!strcmp(cmd, IDLE)) {
 8001898:	4917      	ldr	r1, [pc, #92]	; (80018f8 <UART_Cmd+0x68>)
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7fe fca0 	bl	80001e0 <strcmp>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d103      	bne.n	80018ae <UART_Cmd+0x1e>
		relayStatusChange(relayStatus_Idle);
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <UART_Cmd+0x6c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
	} else if (!strcmp(cmd, DISCHARGE_M1)) {
		relayStatusChange(relayStatus_Discharge_M1);
	} else if (!strcmp(cmd, DISCHARGE_M2)) {
		relayStatusChange(relayStatus_Discharge_M2);
	}
}
 80018ac:	e01f      	b.n	80018ee <UART_Cmd+0x5e>
	} else if (!strcmp(cmd, CHARGE)) {
 80018ae:	4914      	ldr	r1, [pc, #80]	; (8001900 <UART_Cmd+0x70>)
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7fe fc95 	bl	80001e0 <strcmp>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d103      	bne.n	80018c4 <UART_Cmd+0x34>
		relayStatusChange(relayStatus_Charge);
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <UART_Cmd+0x6c>)
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
}
 80018c2:	e014      	b.n	80018ee <UART_Cmd+0x5e>
	} else if (!strcmp(cmd, DISCHARGE_M1)) {
 80018c4:	490f      	ldr	r1, [pc, #60]	; (8001904 <UART_Cmd+0x74>)
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7fe fc8a 	bl	80001e0 <strcmp>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d103      	bne.n	80018da <UART_Cmd+0x4a>
		relayStatusChange(relayStatus_Discharge_M1);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <UART_Cmd+0x6c>)
 80018d4:	2202      	movs	r2, #2
 80018d6:	701a      	strb	r2, [r3, #0]
}
 80018d8:	e009      	b.n	80018ee <UART_Cmd+0x5e>
	} else if (!strcmp(cmd, DISCHARGE_M2)) {
 80018da:	490b      	ldr	r1, [pc, #44]	; (8001908 <UART_Cmd+0x78>)
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7fe fc7f 	bl	80001e0 <strcmp>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <UART_Cmd+0x5e>
		relayStatusChange(relayStatus_Discharge_M2);
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <UART_Cmd+0x6c>)
 80018ea:	2203      	movs	r2, #3
 80018ec:	701a      	strb	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	0800aba0 	.word	0x0800aba0
 80018fc:	20000380 	.word	0x20000380
 8001900:	0800aba8 	.word	0x0800aba8
 8001904:	0800abb0 	.word	0x0800abb0
 8001908:	0800abc0 	.word	0x0800abc0

0800190c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a12      	ldr	r2, [pc, #72]	; (8001968 <HAL_UARTEx_RxEventCallback+0x5c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d11e      	bne.n	8001960 <HAL_UARTEx_RxEventCallback+0x54>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) usart.rx_data, 20);
 8001922:	2214      	movs	r2, #20
 8001924:	4911      	ldr	r1, [pc, #68]	; (800196c <HAL_UARTEx_RxEventCallback+0x60>)
 8001926:	4812      	ldr	r0, [pc, #72]	; (8001970 <HAL_UARTEx_RxEventCallback+0x64>)
 8001928:	f003 fa17 	bl	8004d5a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_UARTEx_RxEventCallback+0x68>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <HAL_UARTEx_RxEventCallback+0x68>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0208 	bic.w	r2, r2, #8
 800193a:	601a      	str	r2, [r3, #0]
		for (uint8_t i = Size; i < 20; i++) {
 800193c:	887b      	ldrh	r3, [r7, #2]
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e007      	b.n	8001952 <HAL_UARTEx_RxEventCallback+0x46>
			usart.rx_data[i] = 0;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001946:	4413      	add	r3, r2
 8001948:	2200      	movs	r2, #0
 800194a:	765a      	strb	r2, [r3, #25]
		for (uint8_t i = Size; i < 20; i++) {
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	3301      	adds	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	2b13      	cmp	r3, #19
 8001956:	d9f4      	bls.n	8001942 <HAL_UARTEx_RxEventCallback+0x36>
		}
		usart.received = true;
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <HAL_UARTEx_RxEventCallback+0x6c>)
 800195a:	2201      	movs	r2, #1
 800195c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
}
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40011000 	.word	0x40011000
 800196c:	20000355 	.word	0x20000355
 8001970:	20000294 	.word	0x20000294
 8001974:	200002dc 	.word	0x200002dc
 8001978:	2000033c 	.word	0x2000033c

0800197c <HAL_TIM_PeriodElapsedCallback>:
// END CODE OF UART RECEIVE DATA CONFIGURATIONS //

// UART TRANSMIT DATA CONFIGURATIONS //
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim1.Instance) {
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d132      	bne.n	80019f6 <HAL_TIM_PeriodElapsedCallback+0x7a>
		if (dch_m2 == false) {
 8001990:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	f083 0301 	eor.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d014      	beq.n	80019c8 <HAL_TIM_PeriodElapsedCallback+0x4c>
			usart.transtick++;
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80019a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80019a2:	3301      	adds	r3, #1
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80019a8:	85da      	strh	r2, [r3, #46]	; 0x2e
			if (usart.transtick >= 1000) {
 80019aa:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80019ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80019ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019b2:	d320      	bcc.n	80019f6 <HAL_TIM_PeriodElapsedCallback+0x7a>
				HAL_UART_Transmit(&huart1, usart.tx_data, sizeof(usart.tx_data),
 80019b4:	2301      	movs	r3, #1
 80019b6:	2219      	movs	r2, #25
 80019b8:	4913      	ldr	r1, [pc, #76]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80019ba:	4814      	ldr	r0, [pc, #80]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80019bc:	f003 f942 	bl	8004c44 <HAL_UART_Transmit>
						1);
				usart.transtick = 0;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	85da      	strh	r2, [r3, #46]	; 0x2e
						1);
				usart.transtick = 0;
			}
		}
	}
}
 80019c6:	e016      	b.n	80019f6 <HAL_TIM_PeriodElapsedCallback+0x7a>
		} else if (dch_m2 == true) {
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d012      	beq.n	80019f6 <HAL_TIM_PeriodElapsedCallback+0x7a>
			usart.transtick++;
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80019d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80019d4:	3301      	adds	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80019da:	85da      	strh	r2, [r3, #46]	; 0x2e
			if (usart.transtick >= 1) {
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80019de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d008      	beq.n	80019f6 <HAL_TIM_PeriodElapsedCallback+0x7a>
				HAL_UART_Transmit(&huart1, usart.tx_data, sizeof(usart.tx_data),
 80019e4:	2301      	movs	r3, #1
 80019e6:	2219      	movs	r2, #25
 80019e8:	4907      	ldr	r1, [pc, #28]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80019ea:	4808      	ldr	r0, [pc, #32]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80019ec:	f003 f92a 	bl	8004c44 <HAL_UART_Transmit>
				usart.transtick = 0;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000024c 	.word	0x2000024c
 8001a04:	20000000 	.word	0x20000000
 8001a08:	2000033c 	.word	0x2000033c
 8001a0c:	20000294 	.word	0x20000294

08001a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a16:	f000 fd09 	bl	800242c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1a:	f000 f921 	bl	8001c60 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a1e:	f000 fa5d 	bl	8001edc <MX_GPIO_Init>
  MX_DMA_Init();
 8001a22:	f000 fa3b 	bl	8001e9c <MX_DMA_Init>
  MX_TIM1_Init();
 8001a26:	f000 f9bf 	bl	8001da8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001a2a:	f000 f983 	bl	8001d34 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001a2e:	f000 fa0b 	bl	8001e48 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	Bat_Relay_Cmd(relayStatus);
 8001a32:	4b7d      	ldr	r3, [pc, #500]	; (8001c28 <main+0x218>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fec6 	bl	80017c8 <Bat_Relay_Cmd>
	HAL_TIM_Base_Start_IT(&htim1);
 8001a3c:	487b      	ldr	r0, [pc, #492]	; (8001c2c <main+0x21c>)
 8001a3e:	f002 fcc7 	bl	80043d0 <HAL_TIM_Base_Start_IT>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) usart.rx_data, 20);
 8001a42:	2214      	movs	r2, #20
 8001a44:	497a      	ldr	r1, [pc, #488]	; (8001c30 <main+0x220>)
 8001a46:	487b      	ldr	r0, [pc, #492]	; (8001c34 <main+0x224>)
 8001a48:	f003 f987 	bl	8004d5a <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001a4c:	4b7a      	ldr	r3, [pc, #488]	; (8001c38 <main+0x228>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b79      	ldr	r3, [pc, #484]	; (8001c38 <main+0x228>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0208 	bic.w	r2, r2, #8
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		switch (dch_m2) {
 8001a5c:	4b77      	ldr	r3, [pc, #476]	; (8001c3c <main+0x22c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d150      	bne.n	8001b06 <main+0xf6>
		case true:
			ADC_Select_Temp();
 8001a64:	f7ff fc0a 	bl	800127c <ADC_Select_Temp>
			batValue.temp = Get_ADC_Temp(Get_ADC_Value());
 8001a68:	f7ff fc68 	bl	800133c <Get_ADC_Value>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fd82 	bl	8001578 <Get_ADC_Temp>
 8001a74:	eeb0 7a40 	vmov.f32	s14, s0
 8001a78:	eef0 7a60 	vmov.f32	s15, s1
 8001a7c:	4b70      	ldr	r3, [pc, #448]	; (8001c40 <main+0x230>)
 8001a7e:	ed83 7b02 	vstr	d7, [r3, #8]
			ADC_Select_Voltage();
 8001a82:	f7ff fc1b 	bl	80012bc <ADC_Select_Voltage>
			batValue.voltage = Get_ADC_Voltage(Get_ADC_Value());
 8001a86:	f7ff fc59 	bl	800133c <Get_ADC_Value>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a94:	eeb0 0a67 	vmov.f32	s0, s15
 8001a98:	f7ff fcaa 	bl	80013f0 <Get_ADC_Voltage>
 8001a9c:	eef0 7a40 	vmov.f32	s15, s0
 8001aa0:	4b67      	ldr	r3, [pc, #412]	; (8001c40 <main+0x230>)
 8001aa2:	edc3 7a00 	vstr	s15, [r3]
			ADC_Select_Current();
 8001aa6:	f7ff fbc9 	bl	800123c <ADC_Select_Current>
			batValue.current = Get_ADC_Current(Get_ADC_Value());
 8001aaa:	f7ff fc47 	bl	800133c <Get_ADC_Value>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8001abc:	f7ff fd00 	bl	80014c0 <Get_ADC_Current>
 8001ac0:	eef0 7a40 	vmov.f32	s15, s0
 8001ac4:	4b5e      	ldr	r3, [pc, #376]	; (8001c40 <main+0x230>)
 8001ac6:	edc3 7a01 	vstr	s15, [r3, #4]
			sprintf((char*) usart.tx_data, "%d,%1.3f,%1.3f,%1.3f\n",
 8001aca:	4b57      	ldr	r3, [pc, #348]	; (8001c28 <main+0x218>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461e      	mov	r6, r3
					relayStatus, batValue.voltage, batValue.current,
 8001ad0:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <main+0x230>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
			sprintf((char*) usart.tx_data, "%d,%1.3f,%1.3f,%1.3f\n",
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd4f 	bl	8000578 <__aeabi_f2d>
 8001ada:	4604      	mov	r4, r0
 8001adc:	460d      	mov	r5, r1
					relayStatus, batValue.voltage, batValue.current,
 8001ade:	4b58      	ldr	r3, [pc, #352]	; (8001c40 <main+0x230>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
			sprintf((char*) usart.tx_data, "%d,%1.3f,%1.3f,%1.3f\n",
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd48 	bl	8000578 <__aeabi_f2d>
 8001ae8:	4b55      	ldr	r3, [pc, #340]	; (8001c40 <main+0x230>)
 8001aea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001af2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001af6:	e9cd 4500 	strd	r4, r5, [sp]
 8001afa:	4632      	mov	r2, r6
 8001afc:	4951      	ldr	r1, [pc, #324]	; (8001c44 <main+0x234>)
 8001afe:	4852      	ldr	r0, [pc, #328]	; (8001c48 <main+0x238>)
 8001b00:	f005 f9a6 	bl	8006e50 <siprintf>
					batValue.temp);
			break;
 8001b04:	e07d      	b.n	8001c02 <main+0x1f2>
		case false:
			ADC_Select_Temp();
 8001b06:	f7ff fbb9 	bl	800127c <ADC_Select_Temp>
			batValue.temp = Get_ADC_Temp(Get_ADC_Value());
 8001b0a:	f7ff fc17 	bl	800133c <Get_ADC_Value>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fd31 	bl	8001578 <Get_ADC_Temp>
 8001b16:	eeb0 7a40 	vmov.f32	s14, s0
 8001b1a:	eef0 7a60 	vmov.f32	s15, s1
 8001b1e:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <main+0x230>)
 8001b20:	ed83 7b02 	vstr	d7, [r3, #8]
			ADC_Select_Voltage();
 8001b24:	f7ff fbca 	bl	80012bc <ADC_Select_Voltage>
			adc_voltage_value[count] = Get_ADC_Value();
 8001b28:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <main+0x23c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461c      	mov	r4, r3
 8001b2e:	f7ff fc05 	bl	800133c <Get_ADC_Value>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <main+0x240>)
 8001b38:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			ADC_Select_Current();
 8001b3c:	f7ff fb7e 	bl	800123c <ADC_Select_Current>
			adc_current_value[count] = Get_ADC_Value();
 8001b40:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <main+0x23c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461c      	mov	r4, r3
 8001b46:	f7ff fbf9 	bl	800133c <Get_ADC_Value>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <main+0x244>)
 8001b50:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			count++;
 8001b54:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <main+0x23c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <main+0x23c>)
 8001b5e:	701a      	strb	r2, [r3, #0]
			if (count == NOS) {
 8001b60:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <main+0x23c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b64      	cmp	r3, #100	; 0x64
 8001b66:	d105      	bne.n	8001b74 <main+0x164>
				count = 0;
 8001b68:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <main+0x23c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
				adc_buf = true;
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <main+0x248>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	701a      	strb	r2, [r3, #0]
			}
			if (adc_buf == true) {
 8001b74:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <main+0x248>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d038      	beq.n	8001bee <main+0x1de>
				batValue.voltage = Get_ADC_Voltage(Get_ADC_MA_Vref(adc_voltage_value));
 8001b7c:	4834      	ldr	r0, [pc, #208]	; (8001c50 <main+0x240>)
 8001b7e:	f7ff fbfb 	bl	8001378 <Get_ADC_MA_Vref>
 8001b82:	eef0 7a40 	vmov.f32	s15, s0
 8001b86:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8a:	f7ff fc31 	bl	80013f0 <Get_ADC_Voltage>
 8001b8e:	eef0 7a40 	vmov.f32	s15, s0
 8001b92:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <main+0x230>)
 8001b94:	edc3 7a00 	vstr	s15, [r3]
				batValue.current = Get_ADC_Current(
 8001b98:	482e      	ldr	r0, [pc, #184]	; (8001c54 <main+0x244>)
 8001b9a:	f7ff fbed 	bl	8001378 <Get_ADC_MA_Vref>
 8001b9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba6:	f7ff fc8b 	bl	80014c0 <Get_ADC_Current>
 8001baa:	eef0 7a40 	vmov.f32	s15, s0
 8001bae:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <main+0x230>)
 8001bb0:	edc3 7a01 	vstr	s15, [r3, #4]
						Get_ADC_MA_Vref(adc_current_value));
				sprintf((char*) usart.tx_data, "%d,%1.3f,%1.3f,%1.3f\n",
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <main+0x218>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461e      	mov	r6, r3
						relayStatus, batValue.voltage, batValue.current,
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <main+0x230>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
				sprintf((char*) usart.tx_data, "%d,%1.3f,%1.3f,%1.3f\n",
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fcda 	bl	8000578 <__aeabi_f2d>
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	460d      	mov	r5, r1
						relayStatus, batValue.voltage, batValue.current,
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <main+0x230>)
 8001bca:	685b      	ldr	r3, [r3, #4]
				sprintf((char*) usart.tx_data, "%d,%1.3f,%1.3f,%1.3f\n",
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fcd3 	bl	8000578 <__aeabi_f2d>
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <main+0x230>)
 8001bd4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001bd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001bdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001be0:	e9cd 4500 	strd	r4, r5, [sp]
 8001be4:	4632      	mov	r2, r6
 8001be6:	4917      	ldr	r1, [pc, #92]	; (8001c44 <main+0x234>)
 8001be8:	4817      	ldr	r0, [pc, #92]	; (8001c48 <main+0x238>)
 8001bea:	f005 f931 	bl	8006e50 <siprintf>
						batValue.temp);
			}
			if (falan) {
 8001bee:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <main+0x24c>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d004      	beq.n	8001c00 <main+0x1f0>
				Calibration_ADC();
 8001bf6:	f7ff fd93 	bl	8001720 <Calibration_ADC>
				falan = false;
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <main+0x24c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001c00:	bf00      	nop

		}
		// END CODE OF READING ADC USING MOVING AVERAGE METHOD (WITHOUT DMA) //

		// UART RECEIVE DATA WHILE CODE //
		if (usart.received) {
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <main+0x238>)
 8001c04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f43f af27 	beq.w	8001a5c <main+0x4c>
			UART_Cmd(usart.rx_data);
 8001c0e:	4808      	ldr	r0, [pc, #32]	; (8001c30 <main+0x220>)
 8001c10:	f7ff fe3e 	bl	8001890 <UART_Cmd>
			Bat_Relay_Cmd(relayStatus);
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <main+0x218>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fdd5 	bl	80017c8 <Bat_Relay_Cmd>
			usart.received = false;
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <main+0x238>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		switch (dch_m2) {
 8001c26:	e719      	b.n	8001a5c <main+0x4c>
 8001c28:	20000380 	.word	0x20000380
 8001c2c:	2000024c 	.word	0x2000024c
 8001c30:	20000355 	.word	0x20000355
 8001c34:	20000294 	.word	0x20000294
 8001c38:	200002dc 	.word	0x200002dc
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000370 	.word	0x20000370
 8001c44:	0800abd0 	.word	0x0800abd0
 8001c48:	2000033c 	.word	0x2000033c
 8001c4c:	20000383 	.word	0x20000383
 8001c50:	20000384 	.word	0x20000384
 8001c54:	2000044c 	.word	0x2000044c
 8001c58:	20000381 	.word	0x20000381
 8001c5c:	20000382 	.word	0x20000382

08001c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b094      	sub	sp, #80	; 0x50
 8001c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	2230      	movs	r2, #48	; 0x30
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f005 f951 	bl	8006f16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <SystemClock_Config+0xcc>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	4a27      	ldr	r2, [pc, #156]	; (8001d2c <SystemClock_Config+0xcc>)
 8001c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c92:	6413      	str	r3, [r2, #64]	; 0x40
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <SystemClock_Config+0xcc>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <SystemClock_Config+0xd0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cac:	4a20      	ldr	r2, [pc, #128]	; (8001d30 <SystemClock_Config+0xd0>)
 8001cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <SystemClock_Config+0xd0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc8:	2310      	movs	r3, #16
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001cd8:	2354      	movs	r3, #84	; 0x54
 8001cda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f001 fec9 	bl	8003a80 <HAL_RCC_OscConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001cf4:	f000 f934 	bl	8001f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	2102      	movs	r1, #2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 f92b 	bl	8003f70 <HAL_RCC_ClockConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d20:	f000 f91e 	bl	8001f60 <Error_Handler>
  }
}
 8001d24:	bf00      	nop
 8001d26:	3750      	adds	r7, #80	; 0x50
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40007000 	.word	0x40007000

08001d34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d38:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <MX_ADC1_Init+0x68>)
 8001d3a:	4a19      	ldr	r2, [pc, #100]	; (8001da0 <MX_ADC1_Init+0x6c>)
 8001d3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <MX_ADC1_Init+0x68>)
 8001d40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <MX_ADC1_Init+0x68>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <MX_ADC1_Init+0x68>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <MX_ADC1_Init+0x68>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <MX_ADC1_Init+0x68>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_ADC1_Init+0x68>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <MX_ADC1_Init+0x68>)
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <MX_ADC1_Init+0x70>)
 8001d6a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <MX_ADC1_Init+0x68>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <MX_ADC1_Init+0x68>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <MX_ADC1_Init+0x68>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_ADC1_Init+0x68>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d86:	4805      	ldr	r0, [pc, #20]	; (8001d9c <MX_ADC1_Init+0x68>)
 8001d88:	f000 fbe6 	bl	8002558 <HAL_ADC_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8001d92:	f000 f8e5 	bl	8001f60 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000204 	.word	0x20000204
 8001da0:	40012000 	.word	0x40012000
 8001da4:	0f000001 	.word	0x0f000001

08001da8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dae:	f107 0308 	add.w	r3, r7, #8
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <MX_TIM1_Init+0x98>)
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <MX_TIM1_Init+0x9c>)
 8001dc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42000-1;
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <MX_TIM1_Init+0x98>)
 8001dcc:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001dd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <MX_TIM1_Init+0x98>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2-1;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <MX_TIM1_Init+0x98>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <MX_TIM1_Init+0x98>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <MX_TIM1_Init+0x98>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <MX_TIM1_Init+0x98>)
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001df0:	4813      	ldr	r0, [pc, #76]	; (8001e40 <MX_TIM1_Init+0x98>)
 8001df2:	f002 fa9d 	bl	8004330 <HAL_TIM_Base_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001dfc:	f000 f8b0 	bl	8001f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e06:	f107 0308 	add.w	r3, r7, #8
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <MX_TIM1_Init+0x98>)
 8001e0e:	f002 fc31 	bl	8004674 <HAL_TIM_ConfigClockSource>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e18:	f000 f8a2 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e24:	463b      	mov	r3, r7
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_TIM1_Init+0x98>)
 8001e2a:	f002 fe39 	bl	8004aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e34:	f000 f894 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	2000024c 	.word	0x2000024c
 8001e44:	40010000 	.word	0x40010000

08001e48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e4c:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <MX_USART1_UART_Init+0x48>)
 8001e4e:	4a11      	ldr	r2, [pc, #68]	; (8001e94 <MX_USART1_UART_Init+0x4c>)
 8001e50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MX_USART1_UART_Init+0x48>)
 8001e54:	4a10      	ldr	r2, [pc, #64]	; (8001e98 <MX_USART1_UART_Init+0x50>)
 8001e56:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <MX_USART1_UART_Init+0x48>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_USART1_UART_Init+0x48>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <MX_USART1_UART_Init+0x48>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_USART1_UART_Init+0x48>)
 8001e6c:	220c      	movs	r2, #12
 8001e6e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <MX_USART1_UART_Init+0x48>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_USART1_UART_Init+0x48>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <MX_USART1_UART_Init+0x48>)
 8001e7e:	f002 fe91 	bl	8004ba4 <HAL_UART_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001e88:	f000 f86a 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000294 	.word	0x20000294
 8001e94:	40011000 	.word	0x40011000
 8001e98:	001e8480 	.word	0x001e8480

08001e9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <MX_DMA_Init+0x3c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <MX_DMA_Init+0x3c>)
 8001eac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MX_DMA_Init+0x3c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	203a      	movs	r0, #58	; 0x3a
 8001ec4:	f001 f805 	bl	8002ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ec8:	203a      	movs	r0, #58	; 0x3a
 8001eca:	f001 f81e 	bl	8002f0a <HAL_NVIC_EnableIRQ>

}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800

08001edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <MX_GPIO_Init+0x7c>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a17      	ldr	r2, [pc, #92]	; (8001f58 <MX_GPIO_Init+0x7c>)
 8001efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <MX_GPIO_Init+0x7c>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_GPIO_Init+0x7c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a10      	ldr	r2, [pc, #64]	; (8001f58 <MX_GPIO_Init+0x7c>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_GPIO_Init+0x7c>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY_1_Pin|RELAY_2_Pin, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2130      	movs	r1, #48	; 0x30
 8001f2e:	480b      	ldr	r0, [pc, #44]	; (8001f5c <MX_GPIO_Init+0x80>)
 8001f30:	f001 fd8c 	bl	8003a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RELAY_1_Pin RELAY_2_Pin */
  GPIO_InitStruct.Pin = RELAY_1_Pin|RELAY_2_Pin;
 8001f34:	2330      	movs	r3, #48	; 0x30
 8001f36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4804      	ldr	r0, [pc, #16]	; (8001f5c <MX_GPIO_Init+0x80>)
 8001f4c:	f001 fbfa 	bl	8003744 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f50:	bf00      	nop
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020000 	.word	0x40020000

08001f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f64:	b672      	cpsid	i
}
 8001f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f68:	e7fe      	b.n	8001f68 <Error_Handler+0x8>
	...

08001f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f80:	6453      	str	r3, [r2, #68]	; 0x44
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800

08001fbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a17      	ldr	r2, [pc, #92]	; (8002038 <HAL_ADC_MspInit+0x7c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d127      	bne.n	800202e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_ADC_MspInit+0x80>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a15      	ldr	r2, [pc, #84]	; (800203c <HAL_ADC_MspInit+0x80>)
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b13      	ldr	r3, [pc, #76]	; (800203c <HAL_ADC_MspInit+0x80>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_ADC_MspInit+0x80>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a0e      	ldr	r2, [pc, #56]	; (800203c <HAL_ADC_MspInit+0x80>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_ADC_MspInit+0x80>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = BAT_C_Pin|BAT_TP_Pin|BAT_V_Pin;
 8002016:	2307      	movs	r3, #7
 8002018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800201a:	2303      	movs	r3, #3
 800201c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4805      	ldr	r0, [pc, #20]	; (8002040 <HAL_ADC_MspInit+0x84>)
 800202a:	f001 fb8b 	bl	8003744 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	; 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40012000 	.word	0x40012000
 800203c:	40023800 	.word	0x40023800
 8002040:	40020000 	.word	0x40020000

08002044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0e      	ldr	r2, [pc, #56]	; (800208c <HAL_TIM_Base_MspInit+0x48>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d115      	bne.n	8002082 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_TIM_Base_MspInit+0x4c>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <HAL_TIM_Base_MspInit+0x4c>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6453      	str	r3, [r2, #68]	; 0x44
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_TIM_Base_MspInit+0x4c>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	2019      	movs	r0, #25
 8002078:	f000 ff2b 	bl	8002ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800207c:	2019      	movs	r0, #25
 800207e:	f000 ff44 	bl	8002f0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40010000 	.word	0x40010000
 8002090:	40023800 	.word	0x40023800

08002094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a34      	ldr	r2, [pc, #208]	; (8002184 <HAL_UART_MspInit+0xf0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d162      	bne.n	800217c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	4b33      	ldr	r3, [pc, #204]	; (8002188 <HAL_UART_MspInit+0xf4>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a32      	ldr	r2, [pc, #200]	; (8002188 <HAL_UART_MspInit+0xf4>)
 80020c0:	f043 0310 	orr.w	r3, r3, #16
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b30      	ldr	r3, [pc, #192]	; (8002188 <HAL_UART_MspInit+0xf4>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <HAL_UART_MspInit+0xf4>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a2b      	ldr	r2, [pc, #172]	; (8002188 <HAL_UART_MspInit+0xf4>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b29      	ldr	r3, [pc, #164]	; (8002188 <HAL_UART_MspInit+0xf4>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002100:	2307      	movs	r3, #7
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	4619      	mov	r1, r3
 800210a:	4820      	ldr	r0, [pc, #128]	; (800218c <HAL_UART_MspInit+0xf8>)
 800210c:	f001 fb1a 	bl	8003744 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <HAL_UART_MspInit+0xfc>)
 8002112:	4a20      	ldr	r2, [pc, #128]	; (8002194 <HAL_UART_MspInit+0x100>)
 8002114:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <HAL_UART_MspInit+0xfc>)
 8002118:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800211c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800211e:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <HAL_UART_MspInit+0xfc>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002124:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <HAL_UART_MspInit+0xfc>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800212a:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_UART_MspInit+0xfc>)
 800212c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002130:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002132:	4b17      	ldr	r3, [pc, #92]	; (8002190 <HAL_UART_MspInit+0xfc>)
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002138:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_UART_MspInit+0xfc>)
 800213a:	2200      	movs	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800213e:	4b14      	ldr	r3, [pc, #80]	; (8002190 <HAL_UART_MspInit+0xfc>)
 8002140:	2200      	movs	r2, #0
 8002142:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_UART_MspInit+0xfc>)
 8002146:	2200      	movs	r2, #0
 8002148:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800214a:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_UART_MspInit+0xfc>)
 800214c:	2200      	movs	r2, #0
 800214e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002150:	480f      	ldr	r0, [pc, #60]	; (8002190 <HAL_UART_MspInit+0xfc>)
 8002152:	f000 fef5 	bl	8002f40 <HAL_DMA_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800215c:	f7ff ff00 	bl	8001f60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <HAL_UART_MspInit+0xfc>)
 8002164:	63da      	str	r2, [r3, #60]	; 0x3c
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_UART_MspInit+0xfc>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	2025      	movs	r0, #37	; 0x25
 8002172:	f000 feae 	bl	8002ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002176:	2025      	movs	r0, #37	; 0x25
 8002178:	f000 fec7 	bl	8002f0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	; 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40011000 	.word	0x40011000
 8002188:	40023800 	.word	0x40023800
 800218c:	40020000 	.word	0x40020000
 8002190:	200002dc 	.word	0x200002dc
 8002194:	40026440 	.word	0x40026440

08002198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800219c:	e7fe      	b.n	800219c <NMI_Handler+0x4>

0800219e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <HardFault_Handler+0x4>

080021a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <MemManage_Handler+0x4>

080021aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <BusFault_Handler+0x4>

080021b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <UsageFault_Handler+0x4>

080021b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e4:	f000 f974 	bl	80024d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}

080021ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80021f2:	f002 f94f 	bl	8004494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000024c 	.word	0x2000024c

08002200 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <USART1_IRQHandler+0x10>)
 8002206:	f002 fe05 	bl	8004e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000294 	.word	0x20000294

08002214 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <DMA2_Stream2_IRQHandler+0x10>)
 800221a:	f001 f829 	bl	8003270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200002dc 	.word	0x200002dc

08002228 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return 1;
 800222c:	2301      	movs	r3, #1
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <_kill>:

int _kill(int pid, int sig)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002242:	f004 febb 	bl	8006fbc <__errno>
 8002246:	4603      	mov	r3, r0
 8002248:	2216      	movs	r2, #22
 800224a:	601a      	str	r2, [r3, #0]
  return -1;
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <_exit>:

void _exit (int status)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ffe7 	bl	8002238 <_kill>
  while (1) {}    /* Make sure we hang here */
 800226a:	e7fe      	b.n	800226a <_exit+0x12>

0800226c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	e00a      	b.n	8002294 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800227e:	f3af 8000 	nop.w
 8002282:	4601      	mov	r1, r0
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	60ba      	str	r2, [r7, #8]
 800228a:	b2ca      	uxtb	r2, r1
 800228c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	3301      	adds	r3, #1
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	dbf0      	blt.n	800227e <_read+0x12>
  }

  return len;
 800229c:	687b      	ldr	r3, [r7, #4]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	e009      	b.n	80022cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	60ba      	str	r2, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3301      	adds	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dbf1      	blt.n	80022b8 <_write+0x12>
  }
  return len;
 80022d4:	687b      	ldr	r3, [r7, #4]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <_close>:

int _close(int file)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002306:	605a      	str	r2, [r3, #4]
  return 0;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <_isatty>:

int _isatty(int file)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002350:	4a14      	ldr	r2, [pc, #80]	; (80023a4 <_sbrk+0x5c>)
 8002352:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <_sbrk+0x60>)
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <_sbrk+0x64>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <_sbrk+0x64>)
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <_sbrk+0x68>)
 8002368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <_sbrk+0x64>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	429a      	cmp	r2, r3
 8002376:	d207      	bcs.n	8002388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002378:	f004 fe20 	bl	8006fbc <__errno>
 800237c:	4603      	mov	r3, r0
 800237e:	220c      	movs	r2, #12
 8002380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	e009      	b.n	800239c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <_sbrk+0x64>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	4a05      	ldr	r2, [pc, #20]	; (80023ac <_sbrk+0x64>)
 8002398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800239a:	68fb      	ldr	r3, [r7, #12]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20010000 	.word	0x20010000
 80023a8:	00000400 	.word	0x00000400
 80023ac:	200006a4 	.word	0x200006a4
 80023b0:	200007f8 	.word	0x200007f8

080023b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <SystemInit+0x20>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <SystemInit+0x20>)
 80023c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002410 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023dc:	f7ff ffea 	bl	80023b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e0:	480c      	ldr	r0, [pc, #48]	; (8002414 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023e2:	490d      	ldr	r1, [pc, #52]	; (8002418 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023e4:	4a0d      	ldr	r2, [pc, #52]	; (800241c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e8:	e002      	b.n	80023f0 <LoopCopyDataInit>

080023ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ee:	3304      	adds	r3, #4

080023f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f4:	d3f9      	bcc.n	80023ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023f8:	4c0a      	ldr	r4, [pc, #40]	; (8002424 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023fc:	e001      	b.n	8002402 <LoopFillZerobss>

080023fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002400:	3204      	adds	r2, #4

08002402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002404:	d3fb      	bcc.n	80023fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002406:	f004 fddf 	bl	8006fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800240a:	f7ff fb01 	bl	8001a10 <main>
  bx  lr    
 800240e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002410:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002418:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800241c:	0800b040 	.word	0x0800b040
  ldr r2, =_sbss
 8002420:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002424:	200007f8 	.word	0x200007f8

08002428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002428:	e7fe      	b.n	8002428 <ADC_IRQHandler>
	...

0800242c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002430:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_Init+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0d      	ldr	r2, [pc, #52]	; (800246c <HAL_Init+0x40>)
 8002436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0a      	ldr	r2, [pc, #40]	; (800246c <HAL_Init+0x40>)
 8002442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a07      	ldr	r2, [pc, #28]	; (800246c <HAL_Init+0x40>)
 800244e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002454:	2003      	movs	r0, #3
 8002456:	f000 fd31 	bl	8002ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800245a:	200f      	movs	r0, #15
 800245c:	f000 f808 	bl	8002470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002460:	f7ff fd84 	bl	8001f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023c00 	.word	0x40023c00

08002470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_InitTick+0x54>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_InitTick+0x58>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4619      	mov	r1, r3
 8002482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002486:	fbb3 f3f1 	udiv	r3, r3, r1
 800248a:	fbb2 f3f3 	udiv	r3, r2, r3
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fd49 	bl	8002f26 <HAL_SYSTICK_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e00e      	b.n	80024bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b0f      	cmp	r3, #15
 80024a2:	d80a      	bhi.n	80024ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a4:	2200      	movs	r2, #0
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f000 fd11 	bl	8002ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b0:	4a06      	ldr	r2, [pc, #24]	; (80024cc <HAL_InitTick+0x5c>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e000      	b.n	80024bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000010 	.word	0x20000010
 80024c8:	20000018 	.word	0x20000018
 80024cc:	20000014 	.word	0x20000014

080024d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_IncTick+0x20>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_IncTick+0x24>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <HAL_IncTick+0x24>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000018 	.word	0x20000018
 80024f4:	200006a8 	.word	0x200006a8

080024f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return uwTick;
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <HAL_GetTick+0x14>)
 80024fe:	681b      	ldr	r3, [r3, #0]
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	200006a8 	.word	0x200006a8

08002510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002518:	f7ff ffee 	bl	80024f8 <HAL_GetTick>
 800251c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d005      	beq.n	8002536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <HAL_Delay+0x44>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002536:	bf00      	nop
 8002538:	f7ff ffde 	bl	80024f8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	429a      	cmp	r2, r3
 8002546:	d8f7      	bhi.n	8002538 <HAL_Delay+0x28>
  {
  }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000018 	.word	0x20000018

08002558 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e033      	b.n	80025d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff fd20 	bl	8001fbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d118      	bne.n	80025c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800259e:	f023 0302 	bic.w	r3, r3, #2
 80025a2:	f043 0202 	orr.w	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 faba 	bl	8002b24 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f023 0303 	bic.w	r3, r3, #3
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
 80025c6:	e001      	b.n	80025cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_ADC_Start+0x1a>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e097      	b.n	800272a <HAL_ADC_Start+0x14a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b01      	cmp	r3, #1
 800260e:	d018      	beq.n	8002642 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002620:	4b45      	ldr	r3, [pc, #276]	; (8002738 <HAL_ADC_Start+0x158>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a45      	ldr	r2, [pc, #276]	; (800273c <HAL_ADC_Start+0x15c>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	0c9a      	lsrs	r2, r3, #18
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002634:	e002      	b.n	800263c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	3b01      	subs	r3, #1
 800263a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f9      	bne.n	8002636 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d15f      	bne.n	8002710 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800267a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800268a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268e:	d106      	bne.n	800269e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002694:	f023 0206 	bic.w	r2, r3, #6
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	645a      	str	r2, [r3, #68]	; 0x44
 800269c:	e002      	b.n	80026a4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ac:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_ADC_Start+0x160>)
 80026ae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026b8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10f      	bne.n	80026e6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d129      	bne.n	8002728 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	e020      	b.n	8002728 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a16      	ldr	r2, [pc, #88]	; (8002744 <HAL_ADC_Start+0x164>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d11b      	bne.n	8002728 <HAL_ADC_Start+0x148>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d114      	bne.n	8002728 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	e00b      	b.n	8002728 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f043 0210 	orr.w	r2, r3, #16
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	f043 0201 	orr.w	r2, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000010 	.word	0x20000010
 800273c:	431bde83 	.word	0x431bde83
 8002740:	40012300 	.word	0x40012300
 8002744:	40012000 	.word	0x40012000

08002748 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_ADC_Stop+0x16>
 800275a:	2302      	movs	r3, #2
 800275c:	e021      	b.n	80027a2 <HAL_ADC_Stop+0x5a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d109      	bne.n	8002798 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ca:	d113      	bne.n	80027f4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027da:	d10b      	bne.n	80027f4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f043 0220 	orr.w	r2, r3, #32
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e063      	b.n	80028bc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80027f4:	f7ff fe80 	bl	80024f8 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027fa:	e021      	b.n	8002840 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002802:	d01d      	beq.n	8002840 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <HAL_ADC_PollForConversion+0x6c>
 800280a:	f7ff fe75 	bl	80024f8 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d212      	bcs.n	8002840 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b02      	cmp	r3, #2
 8002826:	d00b      	beq.n	8002840 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f043 0204 	orr.w	r2, r3, #4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e03d      	b.n	80028bc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b02      	cmp	r3, #2
 800284c:	d1d6      	bne.n	80027fc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f06f 0212 	mvn.w	r2, #18
 8002856:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d123      	bne.n	80028ba <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11f      	bne.n	80028ba <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002884:	2b00      	cmp	r3, #0
 8002886:	d006      	beq.n	8002896 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002892:	2b00      	cmp	r3, #0
 8002894:	d111      	bne.n	80028ba <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d105      	bne.n	80028ba <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x1c>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e105      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x228>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b09      	cmp	r3, #9
 800290a:	d925      	bls.n	8002958 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68d9      	ldr	r1, [r3, #12]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	b29b      	uxth	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	3b1e      	subs	r3, #30
 8002922:	2207      	movs	r2, #7
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43da      	mvns	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	400a      	ands	r2, r1
 8002930:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68d9      	ldr	r1, [r3, #12]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b29b      	uxth	r3, r3
 8002942:	4618      	mov	r0, r3
 8002944:	4603      	mov	r3, r0
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4403      	add	r3, r0
 800294a:	3b1e      	subs	r3, #30
 800294c:	409a      	lsls	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	e022      	b.n	800299e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6919      	ldr	r1, [r3, #16]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	4613      	mov	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4413      	add	r3, r2
 800296c:	2207      	movs	r2, #7
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	400a      	ands	r2, r1
 800297a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6919      	ldr	r1, [r3, #16]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	4618      	mov	r0, r3
 800298e:	4603      	mov	r3, r0
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4403      	add	r3, r0
 8002994:	409a      	lsls	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b06      	cmp	r3, #6
 80029a4:	d824      	bhi.n	80029f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	3b05      	subs	r3, #5
 80029b8:	221f      	movs	r2, #31
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	400a      	ands	r2, r1
 80029c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	4618      	mov	r0, r3
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	3b05      	subs	r3, #5
 80029e2:	fa00 f203 	lsl.w	r2, r0, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34
 80029ee:	e04c      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b0c      	cmp	r3, #12
 80029f6:	d824      	bhi.n	8002a42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	3b23      	subs	r3, #35	; 0x23
 8002a0a:	221f      	movs	r2, #31
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43da      	mvns	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	400a      	ands	r2, r1
 8002a18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	3b23      	subs	r3, #35	; 0x23
 8002a34:	fa00 f203 	lsl.w	r2, r0, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a40:	e023      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	3b41      	subs	r3, #65	; 0x41
 8002a54:	221f      	movs	r2, #31
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	400a      	ands	r2, r1
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b41      	subs	r3, #65	; 0x41
 8002a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_ADC_ConfigChannel+0x234>)
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a21      	ldr	r2, [pc, #132]	; (8002b18 <HAL_ADC_ConfigChannel+0x238>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d109      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x1cc>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b12      	cmp	r3, #18
 8002a9e:	d105      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a19      	ldr	r2, [pc, #100]	; (8002b18 <HAL_ADC_ConfigChannel+0x238>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d123      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x21e>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b10      	cmp	r3, #16
 8002abc:	d003      	beq.n	8002ac6 <HAL_ADC_ConfigChannel+0x1e6>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b11      	cmp	r3, #17
 8002ac4:	d11b      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d111      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_ADC_ConfigChannel+0x23c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <HAL_ADC_ConfigChannel+0x240>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	0c9a      	lsrs	r2, r3, #18
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002af0:	e002      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f9      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	40012300 	.word	0x40012300
 8002b18:	40012000 	.word	0x40012000
 8002b1c:	20000010 	.word	0x20000010
 8002b20:	431bde83 	.word	0x431bde83

08002b24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b2c:	4b79      	ldr	r3, [pc, #484]	; (8002d14 <ADC_Init+0x1f0>)
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	021a      	lsls	r2, r3, #8
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6899      	ldr	r1, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	4a58      	ldr	r2, [pc, #352]	; (8002d18 <ADC_Init+0x1f4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d022      	beq.n	8002c02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6899      	ldr	r1, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	e00f      	b.n	8002c22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c20:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0202 	bic.w	r2, r2, #2
 8002c30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6899      	ldr	r1, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	7e1b      	ldrb	r3, [r3, #24]
 8002c3c:	005a      	lsls	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01b      	beq.n	8002c88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c5e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	035a      	lsls	r2, r3, #13
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	e007      	b.n	8002c98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c96:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	051a      	lsls	r2, r3, #20
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6899      	ldr	r1, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cda:	025a      	lsls	r2, r3, #9
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6899      	ldr	r1, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	029a      	lsls	r2, r3, #10
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	40012300 	.word	0x40012300
 8002d18:	0f000001 	.word	0x0f000001

08002d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <__NVIC_SetPriorityGrouping+0x44>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d4e:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <__NVIC_SetPriorityGrouping+0x44>)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	60d3      	str	r3, [r2, #12]
}
 8002d54:	bf00      	nop
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d68:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <__NVIC_GetPriorityGrouping+0x18>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	0a1b      	lsrs	r3, r3, #8
 8002d6e:	f003 0307 	and.w	r3, r3, #7
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	db0b      	blt.n	8002daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	f003 021f 	and.w	r2, r3, #31
 8002d98:	4907      	ldr	r1, [pc, #28]	; (8002db8 <__NVIC_EnableIRQ+0x38>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	2001      	movs	r0, #1
 8002da2:	fa00 f202 	lsl.w	r2, r0, r2
 8002da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000e100 	.word	0xe000e100

08002dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	6039      	str	r1, [r7, #0]
 8002dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	db0a      	blt.n	8002de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	490c      	ldr	r1, [pc, #48]	; (8002e08 <__NVIC_SetPriority+0x4c>)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	0112      	lsls	r2, r2, #4
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	440b      	add	r3, r1
 8002de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de4:	e00a      	b.n	8002dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4908      	ldr	r1, [pc, #32]	; (8002e0c <__NVIC_SetPriority+0x50>)
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	3b04      	subs	r3, #4
 8002df4:	0112      	lsls	r2, r2, #4
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	440b      	add	r3, r1
 8002dfa:	761a      	strb	r2, [r3, #24]
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	e000e100 	.word	0xe000e100
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	; 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f1c3 0307 	rsb	r3, r3, #7
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	bf28      	it	cs
 8002e2e:	2304      	movcs	r3, #4
 8002e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3304      	adds	r3, #4
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d902      	bls.n	8002e40 <NVIC_EncodePriority+0x30>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3b03      	subs	r3, #3
 8002e3e:	e000      	b.n	8002e42 <NVIC_EncodePriority+0x32>
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	f04f 32ff 	mov.w	r2, #4294967295
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	401a      	ands	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e58:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	43d9      	mvns	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e68:	4313      	orrs	r3, r2
         );
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3724      	adds	r7, #36	; 0x24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e88:	d301      	bcc.n	8002e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e00f      	b.n	8002eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <SysTick_Config+0x40>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e96:	210f      	movs	r1, #15
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9c:	f7ff ff8e 	bl	8002dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <SysTick_Config+0x40>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea6:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <SysTick_Config+0x40>)
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	e000e010 	.word	0xe000e010

08002ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ff29 	bl	8002d1c <__NVIC_SetPriorityGrouping>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
 8002ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee4:	f7ff ff3e 	bl	8002d64 <__NVIC_GetPriorityGrouping>
 8002ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	6978      	ldr	r0, [r7, #20]
 8002ef0:	f7ff ff8e 	bl	8002e10 <NVIC_EncodePriority>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff5d 	bl	8002dbc <__NVIC_SetPriority>
}
 8002f02:	bf00      	nop
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	4603      	mov	r3, r0
 8002f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff31 	bl	8002d80 <__NVIC_EnableIRQ>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ffa2 	bl	8002e78 <SysTick_Config>
 8002f34:	4603      	mov	r3, r0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f4c:	f7ff fad4 	bl	80024f8 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e099      	b.n	8003090 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f7c:	e00f      	b.n	8002f9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f7e:	f7ff fabb 	bl	80024f8 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b05      	cmp	r3, #5
 8002f8a:	d908      	bls.n	8002f9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2203      	movs	r2, #3
 8002f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e078      	b.n	8003090 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1e8      	bne.n	8002f7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4b38      	ldr	r3, [pc, #224]	; (8003098 <HAL_DMA_Init+0x158>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d107      	bne.n	8003008 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	4313      	orrs	r3, r2
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f023 0307 	bic.w	r3, r3, #7
 800301e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	2b04      	cmp	r3, #4
 8003030:	d117      	bne.n	8003062 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00e      	beq.n	8003062 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 fb01 	bl	800364c <DMA_CheckFifoParam>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2240      	movs	r2, #64	; 0x40
 8003054:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800305e:	2301      	movs	r3, #1
 8003060:	e016      	b.n	8003090 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fab8 	bl	80035e0 <DMA_CalcBaseAndBitshift>
 8003070:	4603      	mov	r3, r0
 8003072:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	223f      	movs	r2, #63	; 0x3f
 800307a:	409a      	lsls	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	f010803f 	.word	0xf010803f

0800309c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_DMA_Start_IT+0x26>
 80030be:	2302      	movs	r3, #2
 80030c0:	e040      	b.n	8003144 <HAL_DMA_Start_IT+0xa8>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d12f      	bne.n	8003136 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2202      	movs	r2, #2
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fa4a 	bl	8003584 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	223f      	movs	r2, #63	; 0x3f
 80030f6:	409a      	lsls	r2, r3
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0216 	orr.w	r2, r2, #22
 800310a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0208 	orr.w	r2, r2, #8
 8003122:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e005      	b.n	8003142 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800313e:	2302      	movs	r3, #2
 8003140:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003142:	7dfb      	ldrb	r3, [r7, #23]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800315a:	f7ff f9cd 	bl	80024f8 <HAL_GetTick>
 800315e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d008      	beq.n	800317e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2280      	movs	r2, #128	; 0x80
 8003170:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e052      	b.n	8003224 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0216 	bic.w	r2, r2, #22
 800318c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800319c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d103      	bne.n	80031ae <HAL_DMA_Abort+0x62>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d007      	beq.n	80031be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0208 	bic.w	r2, r2, #8
 80031bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ce:	e013      	b.n	80031f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031d0:	f7ff f992 	bl	80024f8 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d90c      	bls.n	80031f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2203      	movs	r2, #3
 80031e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e015      	b.n	8003224 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1e4      	bne.n	80031d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320a:	223f      	movs	r2, #63	; 0x3f
 800320c:	409a      	lsls	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d004      	beq.n	800324a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2280      	movs	r2, #128	; 0x80
 8003244:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e00c      	b.n	8003264 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2205      	movs	r2, #5
 800324e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800327c:	4b8e      	ldr	r3, [pc, #568]	; (80034b8 <HAL_DMA_IRQHandler+0x248>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a8e      	ldr	r2, [pc, #568]	; (80034bc <HAL_DMA_IRQHandler+0x24c>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	0a9b      	lsrs	r3, r3, #10
 8003288:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	2208      	movs	r2, #8
 800329c:	409a      	lsls	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d01a      	beq.n	80032dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d013      	beq.n	80032dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0204 	bic.w	r2, r2, #4
 80032c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	2208      	movs	r2, #8
 80032ca:	409a      	lsls	r2, r3
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	f043 0201 	orr.w	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e0:	2201      	movs	r2, #1
 80032e2:	409a      	lsls	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d012      	beq.n	8003312 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	2201      	movs	r2, #1
 8003300:	409a      	lsls	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	f043 0202 	orr.w	r2, r3, #2
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003316:	2204      	movs	r2, #4
 8003318:	409a      	lsls	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d012      	beq.n	8003348 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00b      	beq.n	8003348 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	2204      	movs	r2, #4
 8003336:	409a      	lsls	r2, r3
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f043 0204 	orr.w	r2, r3, #4
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	2210      	movs	r2, #16
 800334e:	409a      	lsls	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4013      	ands	r3, r2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d043      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d03c      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	2210      	movs	r2, #16
 800336c:	409a      	lsls	r2, r3
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d018      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d108      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d024      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	4798      	blx	r3
 800339e:	e01f      	b.n	80033e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01b      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
 80033b0:	e016      	b.n	80033e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d107      	bne.n	80033d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0208 	bic.w	r2, r2, #8
 80033ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	2220      	movs	r2, #32
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 808f 	beq.w	8003510 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8087 	beq.w	8003510 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	2220      	movs	r2, #32
 8003408:	409a      	lsls	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b05      	cmp	r3, #5
 8003418:	d136      	bne.n	8003488 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0216 	bic.w	r2, r2, #22
 8003428:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003438:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d103      	bne.n	800344a <HAL_DMA_IRQHandler+0x1da>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003446:	2b00      	cmp	r3, #0
 8003448:	d007      	beq.n	800345a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0208 	bic.w	r2, r2, #8
 8003458:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	223f      	movs	r2, #63	; 0x3f
 8003460:	409a      	lsls	r2, r3
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347a:	2b00      	cmp	r3, #0
 800347c:	d07e      	beq.n	800357c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
        }
        return;
 8003486:	e079      	b.n	800357c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01d      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10d      	bne.n	80034c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d031      	beq.n	8003510 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
 80034b4:	e02c      	b.n	8003510 <HAL_DMA_IRQHandler+0x2a0>
 80034b6:	bf00      	nop
 80034b8:	20000010 	.word	0x20000010
 80034bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d023      	beq.n	8003510 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
 80034d0:	e01e      	b.n	8003510 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10f      	bne.n	8003500 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0210 	bic.w	r2, r2, #16
 80034ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003514:	2b00      	cmp	r3, #0
 8003516:	d032      	beq.n	800357e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d022      	beq.n	800356a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2205      	movs	r2, #5
 8003528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	3301      	adds	r3, #1
 8003540:	60bb      	str	r3, [r7, #8]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	429a      	cmp	r2, r3
 8003546:	d307      	bcc.n	8003558 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f2      	bne.n	800353c <HAL_DMA_IRQHandler+0x2cc>
 8003556:	e000      	b.n	800355a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003558:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	4798      	blx	r3
 800357a:	e000      	b.n	800357e <HAL_DMA_IRQHandler+0x30e>
        return;
 800357c:	bf00      	nop
    }
  }
}
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b40      	cmp	r3, #64	; 0x40
 80035b0:	d108      	bne.n	80035c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035c2:	e007      	b.n	80035d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	60da      	str	r2, [r3, #12]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	3b10      	subs	r3, #16
 80035f0:	4a14      	ldr	r2, [pc, #80]	; (8003644 <DMA_CalcBaseAndBitshift+0x64>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035fa:	4a13      	ldr	r2, [pc, #76]	; (8003648 <DMA_CalcBaseAndBitshift+0x68>)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b03      	cmp	r3, #3
 800360c:	d909      	bls.n	8003622 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003616:	f023 0303 	bic.w	r3, r3, #3
 800361a:	1d1a      	adds	r2, r3, #4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	659a      	str	r2, [r3, #88]	; 0x58
 8003620:	e007      	b.n	8003632 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	aaaaaaab 	.word	0xaaaaaaab
 8003648:	0800ac00 	.word	0x0800ac00

0800364c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d11f      	bne.n	80036a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b03      	cmp	r3, #3
 800366a:	d856      	bhi.n	800371a <DMA_CheckFifoParam+0xce>
 800366c:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <DMA_CheckFifoParam+0x28>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	08003685 	.word	0x08003685
 8003678:	08003697 	.word	0x08003697
 800367c:	08003685 	.word	0x08003685
 8003680:	0800371b 	.word	0x0800371b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d046      	beq.n	800371e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003694:	e043      	b.n	800371e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800369e:	d140      	bne.n	8003722 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a4:	e03d      	b.n	8003722 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ae:	d121      	bne.n	80036f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d837      	bhi.n	8003726 <DMA_CheckFifoParam+0xda>
 80036b6:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <DMA_CheckFifoParam+0x70>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	080036cd 	.word	0x080036cd
 80036c0:	080036d3 	.word	0x080036d3
 80036c4:	080036cd 	.word	0x080036cd
 80036c8:	080036e5 	.word	0x080036e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
      break;
 80036d0:	e030      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d025      	beq.n	800372a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e2:	e022      	b.n	800372a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036ec:	d11f      	bne.n	800372e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036f2:	e01c      	b.n	800372e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d903      	bls.n	8003702 <DMA_CheckFifoParam+0xb6>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d003      	beq.n	8003708 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003700:	e018      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
      break;
 8003706:	e015      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00e      	beq.n	8003732 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      break;
 8003718:	e00b      	b.n	8003732 <DMA_CheckFifoParam+0xe6>
      break;
 800371a:	bf00      	nop
 800371c:	e00a      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      break;
 800371e:	bf00      	nop
 8003720:	e008      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      break;
 8003722:	bf00      	nop
 8003724:	e006      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      break;
 8003726:	bf00      	nop
 8003728:	e004      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      break;
 800372a:	bf00      	nop
 800372c:	e002      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      break;   
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      break;
 8003732:	bf00      	nop
    }
  } 
  
  return status; 
 8003734:	7bfb      	ldrb	r3, [r7, #15]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop

08003744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003756:	2300      	movs	r3, #0
 8003758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	e159      	b.n	8003a14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003760:	2201      	movs	r2, #1
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	429a      	cmp	r2, r3
 800377a:	f040 8148 	bne.w	8003a0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d005      	beq.n	8003796 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003792:	2b02      	cmp	r3, #2
 8003794:	d130      	bne.n	80037f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	2203      	movs	r2, #3
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4013      	ands	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037cc:	2201      	movs	r2, #1
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 0201 	and.w	r2, r3, #1
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	2b03      	cmp	r3, #3
 8003802:	d017      	beq.n	8003834 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	2203      	movs	r2, #3
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d123      	bne.n	8003888 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	08da      	lsrs	r2, r3, #3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3208      	adds	r2, #8
 8003848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800384c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	220f      	movs	r2, #15
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	08da      	lsrs	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3208      	adds	r2, #8
 8003882:	69b9      	ldr	r1, [r7, #24]
 8003884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	2203      	movs	r2, #3
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0203 	and.w	r2, r3, #3
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80a2 	beq.w	8003a0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	4b57      	ldr	r3, [pc, #348]	; (8003a2c <HAL_GPIO_Init+0x2e8>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	4a56      	ldr	r2, [pc, #344]	; (8003a2c <HAL_GPIO_Init+0x2e8>)
 80038d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038d8:	6453      	str	r3, [r2, #68]	; 0x44
 80038da:	4b54      	ldr	r3, [pc, #336]	; (8003a2c <HAL_GPIO_Init+0x2e8>)
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038e6:	4a52      	ldr	r2, [pc, #328]	; (8003a30 <HAL_GPIO_Init+0x2ec>)
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	089b      	lsrs	r3, r3, #2
 80038ec:	3302      	adds	r3, #2
 80038ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	220f      	movs	r2, #15
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a49      	ldr	r2, [pc, #292]	; (8003a34 <HAL_GPIO_Init+0x2f0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d019      	beq.n	8003946 <HAL_GPIO_Init+0x202>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a48      	ldr	r2, [pc, #288]	; (8003a38 <HAL_GPIO_Init+0x2f4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <HAL_GPIO_Init+0x1fe>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a47      	ldr	r2, [pc, #284]	; (8003a3c <HAL_GPIO_Init+0x2f8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00d      	beq.n	800393e <HAL_GPIO_Init+0x1fa>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a46      	ldr	r2, [pc, #280]	; (8003a40 <HAL_GPIO_Init+0x2fc>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d007      	beq.n	800393a <HAL_GPIO_Init+0x1f6>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a45      	ldr	r2, [pc, #276]	; (8003a44 <HAL_GPIO_Init+0x300>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d101      	bne.n	8003936 <HAL_GPIO_Init+0x1f2>
 8003932:	2304      	movs	r3, #4
 8003934:	e008      	b.n	8003948 <HAL_GPIO_Init+0x204>
 8003936:	2307      	movs	r3, #7
 8003938:	e006      	b.n	8003948 <HAL_GPIO_Init+0x204>
 800393a:	2303      	movs	r3, #3
 800393c:	e004      	b.n	8003948 <HAL_GPIO_Init+0x204>
 800393e:	2302      	movs	r3, #2
 8003940:	e002      	b.n	8003948 <HAL_GPIO_Init+0x204>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <HAL_GPIO_Init+0x204>
 8003946:	2300      	movs	r3, #0
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	f002 0203 	and.w	r2, r2, #3
 800394e:	0092      	lsls	r2, r2, #2
 8003950:	4093      	lsls	r3, r2
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4313      	orrs	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003958:	4935      	ldr	r1, [pc, #212]	; (8003a30 <HAL_GPIO_Init+0x2ec>)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	089b      	lsrs	r3, r3, #2
 800395e:	3302      	adds	r3, #2
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003966:	4b38      	ldr	r3, [pc, #224]	; (8003a48 <HAL_GPIO_Init+0x304>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	43db      	mvns	r3, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4013      	ands	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800398a:	4a2f      	ldr	r2, [pc, #188]	; (8003a48 <HAL_GPIO_Init+0x304>)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003990:	4b2d      	ldr	r3, [pc, #180]	; (8003a48 <HAL_GPIO_Init+0x304>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	43db      	mvns	r3, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039b4:	4a24      	ldr	r2, [pc, #144]	; (8003a48 <HAL_GPIO_Init+0x304>)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039ba:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <HAL_GPIO_Init+0x304>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039de:	4a1a      	ldr	r2, [pc, #104]	; (8003a48 <HAL_GPIO_Init+0x304>)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039e4:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <HAL_GPIO_Init+0x304>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a08:	4a0f      	ldr	r2, [pc, #60]	; (8003a48 <HAL_GPIO_Init+0x304>)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	3301      	adds	r3, #1
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	2b0f      	cmp	r3, #15
 8003a18:	f67f aea2 	bls.w	8003760 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	3724      	adds	r7, #36	; 0x24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	40013800 	.word	0x40013800
 8003a34:	40020000 	.word	0x40020000
 8003a38:	40020400 	.word	0x40020400
 8003a3c:	40020800 	.word	0x40020800
 8003a40:	40020c00 	.word	0x40020c00
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40013c00 	.word	0x40013c00

08003a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	807b      	strh	r3, [r7, #2]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a5c:	787b      	ldrb	r3, [r7, #1]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a62:	887a      	ldrh	r2, [r7, #2]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a68:	e003      	b.n	8003a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a6a:	887b      	ldrh	r3, [r7, #2]
 8003a6c:	041a      	lsls	r2, r3, #16
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	619a      	str	r2, [r3, #24]
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e267      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d075      	beq.n	8003b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a9e:	4b88      	ldr	r3, [pc, #544]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d00c      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aaa:	4b85      	ldr	r3, [pc, #532]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d112      	bne.n	8003adc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab6:	4b82      	ldr	r3, [pc, #520]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac2:	d10b      	bne.n	8003adc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	4b7e      	ldr	r3, [pc, #504]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d05b      	beq.n	8003b88 <HAL_RCC_OscConfig+0x108>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d157      	bne.n	8003b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e242      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d106      	bne.n	8003af4 <HAL_RCC_OscConfig+0x74>
 8003ae6:	4b76      	ldr	r3, [pc, #472]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a75      	ldr	r2, [pc, #468]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e01d      	b.n	8003b30 <HAL_RCC_OscConfig+0xb0>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x98>
 8003afe:	4b70      	ldr	r3, [pc, #448]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6f      	ldr	r2, [pc, #444]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	4b6d      	ldr	r3, [pc, #436]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a6c      	ldr	r2, [pc, #432]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0xb0>
 8003b18:	4b69      	ldr	r3, [pc, #420]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a68      	ldr	r2, [pc, #416]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4b66      	ldr	r3, [pc, #408]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a65      	ldr	r2, [pc, #404]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d013      	beq.n	8003b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fe fcde 	bl	80024f8 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b40:	f7fe fcda 	bl	80024f8 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b64      	cmp	r3, #100	; 0x64
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e207      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	4b5b      	ldr	r3, [pc, #364]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0xc0>
 8003b5e:	e014      	b.n	8003b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fe fcca 	bl	80024f8 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b68:	f7fe fcc6 	bl	80024f8 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e1f3      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7a:	4b51      	ldr	r3, [pc, #324]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0xe8>
 8003b86:	e000      	b.n	8003b8a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d063      	beq.n	8003c5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b96:	4b4a      	ldr	r3, [pc, #296]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba2:	4b47      	ldr	r3, [pc, #284]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d11c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bae:	4b44      	ldr	r3, [pc, #272]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d116      	bne.n	8003be8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bba:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x152>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e1c7      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd2:	4b3b      	ldr	r3, [pc, #236]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4937      	ldr	r1, [pc, #220]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be6:	e03a      	b.n	8003c5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d020      	beq.n	8003c32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf0:	4b34      	ldr	r3, [pc, #208]	; (8003cc4 <HAL_RCC_OscConfig+0x244>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf6:	f7fe fc7f 	bl	80024f8 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfe:	f7fe fc7b 	bl	80024f8 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e1a8      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c10:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1c:	4b28      	ldr	r3, [pc, #160]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4925      	ldr	r1, [pc, #148]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	600b      	str	r3, [r1, #0]
 8003c30:	e015      	b.n	8003c5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <HAL_RCC_OscConfig+0x244>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fe fc5e 	bl	80024f8 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c40:	f7fe fc5a 	bl	80024f8 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e187      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c52:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d036      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d016      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c72:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <HAL_RCC_OscConfig+0x248>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fe fc3e 	bl	80024f8 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c80:	f7fe fc3a 	bl	80024f8 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e167      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c92:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x200>
 8003c9e:	e01b      	b.n	8003cd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_RCC_OscConfig+0x248>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca6:	f7fe fc27 	bl	80024f8 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cac:	e00e      	b.n	8003ccc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cae:	f7fe fc23 	bl	80024f8 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d907      	bls.n	8003ccc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e150      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	42470000 	.word	0x42470000
 8003cc8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ccc:	4b88      	ldr	r3, [pc, #544]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1ea      	bne.n	8003cae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8097 	beq.w	8003e14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cea:	4b81      	ldr	r3, [pc, #516]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10f      	bne.n	8003d16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	4b7d      	ldr	r3, [pc, #500]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	4a7c      	ldr	r2, [pc, #496]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d04:	6413      	str	r3, [r2, #64]	; 0x40
 8003d06:	4b7a      	ldr	r3, [pc, #488]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	60bb      	str	r3, [r7, #8]
 8003d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d12:	2301      	movs	r3, #1
 8003d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d16:	4b77      	ldr	r3, [pc, #476]	; (8003ef4 <HAL_RCC_OscConfig+0x474>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d118      	bne.n	8003d54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d22:	4b74      	ldr	r3, [pc, #464]	; (8003ef4 <HAL_RCC_OscConfig+0x474>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a73      	ldr	r2, [pc, #460]	; (8003ef4 <HAL_RCC_OscConfig+0x474>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2e:	f7fe fbe3 	bl	80024f8 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d36:	f7fe fbdf 	bl	80024f8 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e10c      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d48:	4b6a      	ldr	r3, [pc, #424]	; (8003ef4 <HAL_RCC_OscConfig+0x474>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d106      	bne.n	8003d6a <HAL_RCC_OscConfig+0x2ea>
 8003d5c:	4b64      	ldr	r3, [pc, #400]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	4a63      	ldr	r2, [pc, #396]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6713      	str	r3, [r2, #112]	; 0x70
 8003d68:	e01c      	b.n	8003da4 <HAL_RCC_OscConfig+0x324>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b05      	cmp	r3, #5
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x30c>
 8003d72:	4b5f      	ldr	r3, [pc, #380]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	4a5e      	ldr	r2, [pc, #376]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d78:	f043 0304 	orr.w	r3, r3, #4
 8003d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7e:	4b5c      	ldr	r3, [pc, #368]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	4a5b      	ldr	r2, [pc, #364]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCC_OscConfig+0x324>
 8003d8c:	4b58      	ldr	r3, [pc, #352]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	4a57      	ldr	r2, [pc, #348]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d92:	f023 0301 	bic.w	r3, r3, #1
 8003d96:	6713      	str	r3, [r2, #112]	; 0x70
 8003d98:	4b55      	ldr	r3, [pc, #340]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	4a54      	ldr	r2, [pc, #336]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	f023 0304 	bic.w	r3, r3, #4
 8003da2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d015      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fe fba4 	bl	80024f8 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db2:	e00a      	b.n	8003dca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db4:	f7fe fba0 	bl	80024f8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e0cb      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dca:	4b49      	ldr	r3, [pc, #292]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0ee      	beq.n	8003db4 <HAL_RCC_OscConfig+0x334>
 8003dd6:	e014      	b.n	8003e02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd8:	f7fe fb8e 	bl	80024f8 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de0:	f7fe fb8a 	bl	80024f8 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e0b5      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df6:	4b3e      	ldr	r3, [pc, #248]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1ee      	bne.n	8003de0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d105      	bne.n	8003e14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e08:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	4a38      	ldr	r2, [pc, #224]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80a1 	beq.w	8003f60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e1e:	4b34      	ldr	r3, [pc, #208]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d05c      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d141      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e32:	4b31      	ldr	r3, [pc, #196]	; (8003ef8 <HAL_RCC_OscConfig+0x478>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e38:	f7fe fb5e 	bl	80024f8 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e40:	f7fe fb5a 	bl	80024f8 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e087      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	019b      	lsls	r3, r3, #6
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	085b      	lsrs	r3, r3, #1
 8003e76:	3b01      	subs	r3, #1
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	061b      	lsls	r3, r3, #24
 8003e82:	491b      	ldr	r1, [pc, #108]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e88:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <HAL_RCC_OscConfig+0x478>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8e:	f7fe fb33 	bl	80024f8 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e96:	f7fe fb2f 	bl	80024f8 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e05c      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea8:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x416>
 8003eb4:	e054      	b.n	8003f60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb6:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <HAL_RCC_OscConfig+0x478>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebc:	f7fe fb1c 	bl	80024f8 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec4:	f7fe fb18 	bl	80024f8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e045      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x444>
 8003ee2:	e03d      	b.n	8003f60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d107      	bne.n	8003efc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e038      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003efc:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <HAL_RCC_OscConfig+0x4ec>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d028      	beq.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d121      	bne.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d11a      	bne.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d111      	bne.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	085b      	lsrs	r3, r3, #1
 8003f44:	3b01      	subs	r3, #1
 8003f46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d107      	bne.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40023800 	.word	0x40023800

08003f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0cc      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f84:	4b68      	ldr	r3, [pc, #416]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d90c      	bls.n	8003fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	4b65      	ldr	r3, [pc, #404]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b63      	ldr	r3, [pc, #396]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0b8      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d020      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fc4:	4b59      	ldr	r3, [pc, #356]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4a58      	ldr	r2, [pc, #352]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fdc:	4b53      	ldr	r3, [pc, #332]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4a52      	ldr	r2, [pc, #328]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe8:	4b50      	ldr	r3, [pc, #320]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	494d      	ldr	r1, [pc, #308]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d044      	beq.n	8004090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d119      	bne.n	800404e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e07f      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d003      	beq.n	800402e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800402a:	2b03      	cmp	r3, #3
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402e:	4b3f      	ldr	r3, [pc, #252]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e06f      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403e:	4b3b      	ldr	r3, [pc, #236]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e067      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800404e:	4b37      	ldr	r3, [pc, #220]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f023 0203 	bic.w	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4934      	ldr	r1, [pc, #208]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	4313      	orrs	r3, r2
 800405e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004060:	f7fe fa4a 	bl	80024f8 <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	e00a      	b.n	800407e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004068:	f7fe fa46 	bl	80024f8 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	; 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e04f      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 020c 	and.w	r2, r3, #12
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	429a      	cmp	r2, r3
 800408e:	d1eb      	bne.n	8004068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004090:	4b25      	ldr	r3, [pc, #148]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d20c      	bcs.n	80040b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409e:	4b22      	ldr	r3, [pc, #136]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e032      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4916      	ldr	r1, [pc, #88]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040e2:	4b12      	ldr	r3, [pc, #72]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	490e      	ldr	r1, [pc, #56]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040f6:	f000 f821 	bl	800413c <HAL_RCC_GetSysClockFreq>
 80040fa:	4602      	mov	r2, r0
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	490a      	ldr	r1, [pc, #40]	; (8004130 <HAL_RCC_ClockConfig+0x1c0>)
 8004108:	5ccb      	ldrb	r3, [r1, r3]
 800410a:	fa22 f303 	lsr.w	r3, r2, r3
 800410e:	4a09      	ldr	r2, [pc, #36]	; (8004134 <HAL_RCC_ClockConfig+0x1c4>)
 8004110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe f9aa 	bl	8002470 <HAL_InitTick>

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40023c00 	.word	0x40023c00
 800412c:	40023800 	.word	0x40023800
 8004130:	0800abe8 	.word	0x0800abe8
 8004134:	20000010 	.word	0x20000010
 8004138:	20000014 	.word	0x20000014

0800413c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800413c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004140:	b090      	sub	sp, #64	; 0x40
 8004142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004154:	4b59      	ldr	r3, [pc, #356]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b08      	cmp	r3, #8
 800415e:	d00d      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x40>
 8004160:	2b08      	cmp	r3, #8
 8004162:	f200 80a1 	bhi.w	80042a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0x34>
 800416a:	2b04      	cmp	r3, #4
 800416c:	d003      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0x3a>
 800416e:	e09b      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004170:	4b53      	ldr	r3, [pc, #332]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004172:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004174:	e09b      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004176:	4b53      	ldr	r3, [pc, #332]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004178:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800417a:	e098      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800417c:	4b4f      	ldr	r3, [pc, #316]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004184:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004186:	4b4d      	ldr	r3, [pc, #308]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d028      	beq.n	80041e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004192:	4b4a      	ldr	r3, [pc, #296]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	099b      	lsrs	r3, r3, #6
 8004198:	2200      	movs	r2, #0
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	627a      	str	r2, [r7, #36]	; 0x24
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041a4:	2100      	movs	r1, #0
 80041a6:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80041a8:	fb03 f201 	mul.w	r2, r3, r1
 80041ac:	2300      	movs	r3, #0
 80041ae:	fb00 f303 	mul.w	r3, r0, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	4a43      	ldr	r2, [pc, #268]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80041b6:	fba0 1202 	umull	r1, r2, r0, r2
 80041ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041bc:	460a      	mov	r2, r1
 80041be:	62ba      	str	r2, [r7, #40]	; 0x28
 80041c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c2:	4413      	add	r3, r2
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c8:	2200      	movs	r2, #0
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	61fa      	str	r2, [r7, #28]
 80041ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041d6:	f7fc fe7d 	bl	8000ed4 <__aeabi_uldivmod>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4613      	mov	r3, r2
 80041e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e2:	e053      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e4:	4b35      	ldr	r3, [pc, #212]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	099b      	lsrs	r3, r3, #6
 80041ea:	2200      	movs	r2, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	617a      	str	r2, [r7, #20]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041f6:	f04f 0b00 	mov.w	fp, #0
 80041fa:	4652      	mov	r2, sl
 80041fc:	465b      	mov	r3, fp
 80041fe:	f04f 0000 	mov.w	r0, #0
 8004202:	f04f 0100 	mov.w	r1, #0
 8004206:	0159      	lsls	r1, r3, #5
 8004208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800420c:	0150      	lsls	r0, r2, #5
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	ebb2 080a 	subs.w	r8, r2, sl
 8004216:	eb63 090b 	sbc.w	r9, r3, fp
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004226:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800422a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800422e:	ebb2 0408 	subs.w	r4, r2, r8
 8004232:	eb63 0509 	sbc.w	r5, r3, r9
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	00eb      	lsls	r3, r5, #3
 8004240:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004244:	00e2      	lsls	r2, r4, #3
 8004246:	4614      	mov	r4, r2
 8004248:	461d      	mov	r5, r3
 800424a:	eb14 030a 	adds.w	r3, r4, sl
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	eb45 030b 	adc.w	r3, r5, fp
 8004254:	607b      	str	r3, [r7, #4]
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004262:	4629      	mov	r1, r5
 8004264:	028b      	lsls	r3, r1, #10
 8004266:	4621      	mov	r1, r4
 8004268:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800426c:	4621      	mov	r1, r4
 800426e:	028a      	lsls	r2, r1, #10
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	2200      	movs	r2, #0
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	60fa      	str	r2, [r7, #12]
 800427c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004280:	f7fc fe28 	bl	8000ed4 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4613      	mov	r3, r2
 800428a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	3301      	adds	r3, #1
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800429c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042a6:	e002      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80042aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3740      	adds	r7, #64	; 0x40
 80042b4:	46bd      	mov	sp, r7
 80042b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800
 80042c0:	00f42400 	.word	0x00f42400
 80042c4:	017d7840 	.word	0x017d7840

080042c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000010 	.word	0x20000010

080042e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042e4:	f7ff fff0 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	0a9b      	lsrs	r3, r3, #10
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4903      	ldr	r1, [pc, #12]	; (8004304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40023800 	.word	0x40023800
 8004304:	0800abf8 	.word	0x0800abf8

08004308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800430c:	f7ff ffdc 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	0b5b      	lsrs	r3, r3, #13
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4903      	ldr	r1, [pc, #12]	; (800432c <HAL_RCC_GetPCLK2Freq+0x24>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40023800 	.word	0x40023800
 800432c:	0800abf8 	.word	0x0800abf8

08004330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e041      	b.n	80043c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fd fe74 	bl	8002044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
 800436c:	4619      	mov	r1, r3
 800436e:	4610      	mov	r0, r2
 8004370:	f000 fa70 	bl	8004854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d001      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e044      	b.n	8004472 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1e      	ldr	r2, [pc, #120]	; (8004480 <HAL_TIM_Base_Start_IT+0xb0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d018      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x6c>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004412:	d013      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x6c>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1a      	ldr	r2, [pc, #104]	; (8004484 <HAL_TIM_Base_Start_IT+0xb4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00e      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x6c>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a19      	ldr	r2, [pc, #100]	; (8004488 <HAL_TIM_Base_Start_IT+0xb8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d009      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x6c>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a17      	ldr	r2, [pc, #92]	; (800448c <HAL_TIM_Base_Start_IT+0xbc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d004      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x6c>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a16      	ldr	r2, [pc, #88]	; (8004490 <HAL_TIM_Base_Start_IT+0xc0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d111      	bne.n	8004460 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b06      	cmp	r3, #6
 800444c:	d010      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0201 	orr.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445e:	e007      	b.n	8004470 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40010000 	.word	0x40010000
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800
 800448c:	40000c00 	.word	0x40000c00
 8004490:	40014000 	.word	0x40014000

08004494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d020      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01b      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0202 	mvn.w	r2, #2
 80044c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f999 	bl	8004816 <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f98b 	bl	8004802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f99c 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d020      	beq.n	8004544 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01b      	beq.n	8004544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0204 	mvn.w	r2, #4
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f973 	bl	8004816 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f965 	bl	8004802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f976 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d020      	beq.n	8004590 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01b      	beq.n	8004590 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0208 	mvn.w	r2, #8
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2204      	movs	r2, #4
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f94d 	bl	8004816 <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f93f 	bl	8004802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f950 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	d020      	beq.n	80045dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01b      	beq.n	80045dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0210 	mvn.w	r2, #16
 80045ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2208      	movs	r2, #8
 80045b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f927 	bl	8004816 <HAL_TIM_IC_CaptureCallback>
 80045c8:	e005      	b.n	80045d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f919 	bl	8004802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f92a 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00c      	beq.n	8004600 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0201 	mvn.w	r2, #1
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fd f9be 	bl	800197c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00c      	beq.n	8004624 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fab6 	bl	8004b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f8fb 	bl	800483e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d007      	beq.n	800466c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0220 	mvn.w	r2, #32
 8004664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fa88 	bl	8004b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_TIM_ConfigClockSource+0x1c>
 800468c:	2302      	movs	r3, #2
 800468e:	e0b4      	b.n	80047fa <HAL_TIM_ConfigClockSource+0x186>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c8:	d03e      	beq.n	8004748 <HAL_TIM_ConfigClockSource+0xd4>
 80046ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ce:	f200 8087 	bhi.w	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d6:	f000 8086 	beq.w	80047e6 <HAL_TIM_ConfigClockSource+0x172>
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046de:	d87f      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e0:	2b70      	cmp	r3, #112	; 0x70
 80046e2:	d01a      	beq.n	800471a <HAL_TIM_ConfigClockSource+0xa6>
 80046e4:	2b70      	cmp	r3, #112	; 0x70
 80046e6:	d87b      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e8:	2b60      	cmp	r3, #96	; 0x60
 80046ea:	d050      	beq.n	800478e <HAL_TIM_ConfigClockSource+0x11a>
 80046ec:	2b60      	cmp	r3, #96	; 0x60
 80046ee:	d877      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 80046f0:	2b50      	cmp	r3, #80	; 0x50
 80046f2:	d03c      	beq.n	800476e <HAL_TIM_ConfigClockSource+0xfa>
 80046f4:	2b50      	cmp	r3, #80	; 0x50
 80046f6:	d873      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 80046f8:	2b40      	cmp	r3, #64	; 0x40
 80046fa:	d058      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0x13a>
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	d86f      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004700:	2b30      	cmp	r3, #48	; 0x30
 8004702:	d064      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x15a>
 8004704:	2b30      	cmp	r3, #48	; 0x30
 8004706:	d86b      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004708:	2b20      	cmp	r3, #32
 800470a:	d060      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x15a>
 800470c:	2b20      	cmp	r3, #32
 800470e:	d867      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d05c      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x15a>
 8004714:	2b10      	cmp	r3, #16
 8004716:	d05a      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x15a>
 8004718:	e062      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800472a:	f000 f999 	bl	8004a60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800473c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	609a      	str	r2, [r3, #8]
      break;
 8004746:	e04f      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004758:	f000 f982 	bl	8004a60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800476a:	609a      	str	r2, [r3, #8]
      break;
 800476c:	e03c      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800477a:	461a      	mov	r2, r3
 800477c:	f000 f8f6 	bl	800496c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2150      	movs	r1, #80	; 0x50
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f94f 	bl	8004a2a <TIM_ITRx_SetConfig>
      break;
 800478c:	e02c      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800479a:	461a      	mov	r2, r3
 800479c:	f000 f915 	bl	80049ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2160      	movs	r1, #96	; 0x60
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f93f 	bl	8004a2a <TIM_ITRx_SetConfig>
      break;
 80047ac:	e01c      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ba:	461a      	mov	r2, r3
 80047bc:	f000 f8d6 	bl	800496c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2140      	movs	r1, #64	; 0x40
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f92f 	bl	8004a2a <TIM_ITRx_SetConfig>
      break;
 80047cc:	e00c      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f000 f926 	bl	8004a2a <TIM_ITRx_SetConfig>
      break;
 80047de:	e003      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	73fb      	strb	r3, [r7, #15]
      break;
 80047e4:	e000      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
	...

08004854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a3a      	ldr	r2, [pc, #232]	; (8004950 <TIM_Base_SetConfig+0xfc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00f      	beq.n	800488c <TIM_Base_SetConfig+0x38>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0x38>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a37      	ldr	r2, [pc, #220]	; (8004954 <TIM_Base_SetConfig+0x100>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0x38>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a36      	ldr	r2, [pc, #216]	; (8004958 <TIM_Base_SetConfig+0x104>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0x38>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a35      	ldr	r2, [pc, #212]	; (800495c <TIM_Base_SetConfig+0x108>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d108      	bne.n	800489e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2b      	ldr	r2, [pc, #172]	; (8004950 <TIM_Base_SetConfig+0xfc>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01b      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d017      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a28      	ldr	r2, [pc, #160]	; (8004954 <TIM_Base_SetConfig+0x100>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a27      	ldr	r2, [pc, #156]	; (8004958 <TIM_Base_SetConfig+0x104>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00f      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a26      	ldr	r2, [pc, #152]	; (800495c <TIM_Base_SetConfig+0x108>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00b      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a25      	ldr	r2, [pc, #148]	; (8004960 <TIM_Base_SetConfig+0x10c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a24      	ldr	r2, [pc, #144]	; (8004964 <TIM_Base_SetConfig+0x110>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d003      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a23      	ldr	r2, [pc, #140]	; (8004968 <TIM_Base_SetConfig+0x114>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d108      	bne.n	80048f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a0e      	ldr	r2, [pc, #56]	; (8004950 <TIM_Base_SetConfig+0xfc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d103      	bne.n	8004924 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b01      	cmp	r3, #1
 8004934:	d105      	bne.n	8004942 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f023 0201 	bic.w	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	611a      	str	r2, [r3, #16]
  }
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40010000 	.word	0x40010000
 8004954:	40000400 	.word	0x40000400
 8004958:	40000800 	.word	0x40000800
 800495c:	40000c00 	.word	0x40000c00
 8004960:	40014000 	.word	0x40014000
 8004964:	40014400 	.word	0x40014400
 8004968:	40014800 	.word	0x40014800

0800496c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	f023 0201 	bic.w	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f023 030a 	bic.w	r3, r3, #10
 80049a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	621a      	str	r2, [r3, #32]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b087      	sub	sp, #28
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	f023 0210 	bic.w	r2, r3, #16
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	031b      	lsls	r3, r3, #12
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	621a      	str	r2, [r3, #32]
}
 8004a1e:	bf00      	nop
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f043 0307 	orr.w	r3, r3, #7
 8004a4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	609a      	str	r2, [r3, #8]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	021a      	lsls	r2, r3, #8
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	609a      	str	r2, [r3, #8]
}
 8004a94:	bf00      	nop
 8004a96:	371c      	adds	r7, #28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e050      	b.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1c      	ldr	r2, [pc, #112]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d018      	beq.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d013      	beq.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00e      	beq.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a16      	ldr	r2, [pc, #88]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d009      	beq.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a15      	ldr	r2, [pc, #84]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d004      	beq.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a13      	ldr	r2, [pc, #76]	; (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d10c      	bne.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	40000800 	.word	0x40000800
 8004b74:	40000c00 	.word	0x40000c00
 8004b78:	40014000 	.word	0x40014000

08004b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e042      	b.n	8004c3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fd fa62 	bl	8002094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2224      	movs	r2, #36	; 0x24
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 ff85 	bl	8005af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	; 0x28
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d175      	bne.n	8004d50 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_UART_Transmit+0x2c>
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e06e      	b.n	8004d52 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2221      	movs	r2, #33	; 0x21
 8004c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c82:	f7fd fc39 	bl	80024f8 <HAL_GetTick>
 8004c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	88fa      	ldrh	r2, [r7, #6]
 8004c8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	88fa      	ldrh	r2, [r7, #6]
 8004c92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9c:	d108      	bne.n	8004cb0 <HAL_UART_Transmit+0x6c>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d104      	bne.n	8004cb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	e003      	b.n	8004cb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cb8:	e02e      	b.n	8004d18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2180      	movs	r1, #128	; 0x80
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fc5d 	bl	8005584 <UART_WaitOnFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e03a      	b.n	8004d52 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10b      	bne.n	8004cfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	61bb      	str	r3, [r7, #24]
 8004cf8:	e007      	b.n	8004d0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	781a      	ldrb	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	3301      	adds	r3, #1
 8004d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1cb      	bne.n	8004cba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2140      	movs	r1, #64	; 0x40
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 fc29 	bl	8005584 <UART_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e006      	b.n	8004d52 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e000      	b.n	8004d52 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d50:	2302      	movs	r3, #2
  }
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b08c      	sub	sp, #48	; 0x30
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	4613      	mov	r3, r2
 8004d66:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d14a      	bne.n	8004e0a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e043      	b.n	8004e0c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	461a      	mov	r2, r3
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fc4e 	bl	8005638 <UART_Start_Receive_DMA>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004da2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d12c      	bne.n	8004e04 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d125      	bne.n	8004dfe <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004db2:	2300      	movs	r3, #0
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	330c      	adds	r3, #12
 8004dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	617b      	str	r3, [r7, #20]
   return(result);
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f043 0310 	orr.w	r3, r3, #16
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004de8:	627a      	str	r2, [r7, #36]	; 0x24
 8004dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6a39      	ldr	r1, [r7, #32]
 8004dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e5      	bne.n	8004dc8 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004dfc:	e002      	b.n	8004e04 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004e04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e08:	e000      	b.n	8004e0c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
  }
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3730      	adds	r7, #48	; 0x30
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b0ba      	sub	sp, #232	; 0xe8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10f      	bne.n	8004e7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <HAL_UART_IRQHandler+0x66>
 8004e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fd81 	bl	800597a <UART_Receive_IT>
      return;
 8004e78:	e25b      	b.n	8005332 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 80de 	beq.w	8005040 <HAL_UART_IRQHandler+0x22c>
 8004e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80d1 	beq.w	8005040 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00b      	beq.n	8004ec2 <HAL_UART_IRQHandler+0xae>
 8004eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	f043 0201 	orr.w	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <HAL_UART_IRQHandler+0xd2>
 8004ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ede:	f043 0202 	orr.w	r2, r3, #2
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00b      	beq.n	8004f0a <HAL_UART_IRQHandler+0xf6>
 8004ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d005      	beq.n	8004f0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	f043 0204 	orr.w	r2, r3, #4
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d011      	beq.n	8004f3a <HAL_UART_IRQHandler+0x126>
 8004f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d105      	bne.n	8004f2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	f043 0208 	orr.w	r2, r3, #8
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 81f2 	beq.w	8005328 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_UART_IRQHandler+0x14e>
 8004f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fd0c 	bl	800597a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6c:	2b40      	cmp	r3, #64	; 0x40
 8004f6e:	bf0c      	ite	eq
 8004f70:	2301      	moveq	r3, #1
 8004f72:	2300      	movne	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d103      	bne.n	8004f8e <HAL_UART_IRQHandler+0x17a>
 8004f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d04f      	beq.n	800502e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fc14 	bl	80057bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d141      	bne.n	8005026 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3314      	adds	r3, #20
 8004fa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3314      	adds	r3, #20
 8004fca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004fe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1d9      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d013      	beq.n	800501e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	4a7e      	ldr	r2, [pc, #504]	; (80051f4 <HAL_UART_IRQHandler+0x3e0>)
 8004ffc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005002:	4618      	mov	r0, r3
 8005004:	f7fe f912 	bl	800322c <HAL_DMA_Abort_IT>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d016      	beq.n	800503c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005018:	4610      	mov	r0, r2
 800501a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800501c:	e00e      	b.n	800503c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f9a8 	bl	8005374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005024:	e00a      	b.n	800503c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f9a4 	bl	8005374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502c:	e006      	b.n	800503c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f9a0 	bl	8005374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800503a:	e175      	b.n	8005328 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503c:	bf00      	nop
    return;
 800503e:	e173      	b.n	8005328 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	2b01      	cmp	r3, #1
 8005046:	f040 814f 	bne.w	80052e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800504a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 8148 	beq.w	80052e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 8141 	beq.w	80052e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005066:	2300      	movs	r3, #0
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b40      	cmp	r3, #64	; 0x40
 8005088:	f040 80b6 	bne.w	80051f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005098:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 8145 	beq.w	800532c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050aa:	429a      	cmp	r2, r3
 80050ac:	f080 813e 	bcs.w	800532c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c2:	f000 8088 	beq.w	80051d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	330c      	adds	r3, #12
 80050cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	330c      	adds	r3, #12
 80050ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80050f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800510a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1d9      	bne.n	80050c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3314      	adds	r3, #20
 8005118:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005124:	f023 0301 	bic.w	r3, r3, #1
 8005128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3314      	adds	r3, #20
 8005132:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005136:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800513a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800513e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e1      	bne.n	8005112 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3314      	adds	r3, #20
 8005154:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800515e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005164:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3314      	adds	r3, #20
 800516e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005172:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005174:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005178:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e3      	bne.n	800514e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	330c      	adds	r3, #12
 800519a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a6:	f023 0310 	bic.w	r3, r3, #16
 80051aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	330c      	adds	r3, #12
 80051b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80051ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e3      	bne.n	8005194 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fd ffbb 	bl	800314c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2202      	movs	r2, #2
 80051da:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7fc fb8d 	bl	800190c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051f2:	e09b      	b.n	800532c <HAL_UART_IRQHandler+0x518>
 80051f4:	08005883 	.word	0x08005883
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005200:	b29b      	uxth	r3, r3
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 808e 	beq.w	8005330 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005214:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8089 	beq.w	8005330 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800522e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005230:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005234:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	330c      	adds	r3, #12
 800523e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005242:	647a      	str	r2, [r7, #68]	; 0x44
 8005244:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e3      	bne.n	800521e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3314      	adds	r3, #20
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	623b      	str	r3, [r7, #32]
   return(result);
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3314      	adds	r3, #20
 8005276:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800527a:	633a      	str	r2, [r7, #48]	; 0x30
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e3      	bne.n	8005256 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	330c      	adds	r3, #12
 80052a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0310 	bic.w	r3, r3, #16
 80052b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	330c      	adds	r3, #12
 80052bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052c0:	61fa      	str	r2, [r7, #28]
 80052c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	69b9      	ldr	r1, [r7, #24]
 80052c6:	69fa      	ldr	r2, [r7, #28]
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	617b      	str	r3, [r7, #20]
   return(result);
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e3      	bne.n	800529c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052de:	4619      	mov	r1, r3
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7fc fb13 	bl	800190c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052e6:	e023      	b.n	8005330 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d009      	beq.n	8005308 <HAL_UART_IRQHandler+0x4f4>
 80052f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fad2 	bl	80058aa <UART_Transmit_IT>
    return;
 8005306:	e014      	b.n	8005332 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00e      	beq.n	8005332 <HAL_UART_IRQHandler+0x51e>
 8005314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fb12 	bl	800594a <UART_EndTransmit_IT>
    return;
 8005326:	e004      	b.n	8005332 <HAL_UART_IRQHandler+0x51e>
    return;
 8005328:	bf00      	nop
 800532a:	e002      	b.n	8005332 <HAL_UART_IRQHandler+0x51e>
      return;
 800532c:	bf00      	nop
 800532e:	e000      	b.n	8005332 <HAL_UART_IRQHandler+0x51e>
      return;
 8005330:	bf00      	nop
  }
}
 8005332:	37e8      	adds	r7, #232	; 0xe8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b09c      	sub	sp, #112	; 0x70
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d172      	bne.n	800548a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80053a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a6:	2200      	movs	r2, #0
 80053a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	330c      	adds	r3, #12
 80053b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80053c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	330c      	adds	r3, #12
 80053c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80053cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e5      	bne.n	80053aa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3314      	adds	r3, #20
 80053e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f0:	f023 0301 	bic.w	r3, r3, #1
 80053f4:	667b      	str	r3, [r7, #100]	; 0x64
 80053f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3314      	adds	r3, #20
 80053fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80053fe:	647a      	str	r2, [r7, #68]	; 0x44
 8005400:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800540c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e5      	bne.n	80053de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3314      	adds	r3, #20
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	623b      	str	r3, [r7, #32]
   return(result);
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005428:	663b      	str	r3, [r7, #96]	; 0x60
 800542a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3314      	adds	r3, #20
 8005430:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005432:	633a      	str	r2, [r7, #48]	; 0x30
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e5      	bne.n	8005412 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005448:	2220      	movs	r2, #32
 800544a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800544e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	2b01      	cmp	r3, #1
 8005454:	d119      	bne.n	800548a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	330c      	adds	r3, #12
 800545c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	60fb      	str	r3, [r7, #12]
   return(result);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f023 0310 	bic.w	r3, r3, #16
 800546c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800546e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	330c      	adds	r3, #12
 8005474:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005476:	61fa      	str	r2, [r7, #28]
 8005478:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	69b9      	ldr	r1, [r7, #24]
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	617b      	str	r3, [r7, #20]
   return(result);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e5      	bne.n	8005456 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800548a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548c:	2200      	movs	r2, #0
 800548e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	2b01      	cmp	r3, #1
 8005496:	d106      	bne.n	80054a6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800549c:	4619      	mov	r1, r3
 800549e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80054a0:	f7fc fa34 	bl	800190c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054a4:	e002      	b.n	80054ac <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80054a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80054a8:	f7ff ff50 	bl	800534c <HAL_UART_RxCpltCallback>
}
 80054ac:	bf00      	nop
 80054ae:	3770      	adds	r7, #112	; 0x70
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d108      	bne.n	80054e2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054d4:	085b      	lsrs	r3, r3, #1
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	4619      	mov	r1, r3
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f7fc fa16 	bl	800190c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054e0:	e002      	b.n	80054e8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7ff ff3c 	bl	8005360 <HAL_UART_RxHalfCpltCallback>
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550c:	2b80      	cmp	r3, #128	; 0x80
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b21      	cmp	r3, #33	; 0x21
 8005522:	d108      	bne.n	8005536 <UART_DMAError+0x46>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2200      	movs	r2, #0
 800552e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005530:	68b8      	ldr	r0, [r7, #8]
 8005532:	f000 f91b 	bl	800576c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005540:	2b40      	cmp	r3, #64	; 0x40
 8005542:	bf0c      	ite	eq
 8005544:	2301      	moveq	r3, #1
 8005546:	2300      	movne	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b22      	cmp	r3, #34	; 0x22
 8005556:	d108      	bne.n	800556a <UART_DMAError+0x7a>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d005      	beq.n	800556a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2200      	movs	r2, #0
 8005562:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005564:	68b8      	ldr	r0, [r7, #8]
 8005566:	f000 f929 	bl	80057bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556e:	f043 0210 	orr.w	r2, r3, #16
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005576:	68b8      	ldr	r0, [r7, #8]
 8005578:	f7ff fefc 	bl	8005374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800557c:	bf00      	nop
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	4613      	mov	r3, r2
 8005592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005594:	e03b      	b.n	800560e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559c:	d037      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559e:	f7fc ffab 	bl	80024f8 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	6a3a      	ldr	r2, [r7, #32]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d302      	bcc.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e03a      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d023      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0x8a>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b80      	cmp	r3, #128	; 0x80
 80055ca:	d020      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0x8a>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d01d      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d116      	bne.n	800560e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f8e0 	bl	80057bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2208      	movs	r2, #8
 8005600:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e00f      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4013      	ands	r3, r2
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	429a      	cmp	r2, r3
 800561c:	bf0c      	ite	eq
 800561e:	2301      	moveq	r3, #1
 8005620:	2300      	movne	r3, #0
 8005622:	b2db      	uxtb	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	429a      	cmp	r2, r3
 800562a:	d0b4      	beq.n	8005596 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b098      	sub	sp, #96	; 0x60
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	4613      	mov	r3, r2
 8005644:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	88fa      	ldrh	r2, [r7, #6]
 8005650:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2222      	movs	r2, #34	; 0x22
 800565c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005664:	4a3e      	ldr	r2, [pc, #248]	; (8005760 <UART_Start_Receive_DMA+0x128>)
 8005666:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566c:	4a3d      	ldr	r2, [pc, #244]	; (8005764 <UART_Start_Receive_DMA+0x12c>)
 800566e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005674:	4a3c      	ldr	r2, [pc, #240]	; (8005768 <UART_Start_Receive_DMA+0x130>)
 8005676:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567c:	2200      	movs	r2, #0
 800567e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005680:	f107 0308 	add.w	r3, r7, #8
 8005684:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3304      	adds	r3, #4
 8005690:	4619      	mov	r1, r3
 8005692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	f7fd fd00 	bl	800309c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800569c:	2300      	movs	r3, #0
 800569e:	613b      	str	r3, [r7, #16]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	613b      	str	r3, [r7, #16]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d019      	beq.n	80056ee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	330c      	adds	r3, #12
 80056d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056da:	64fa      	str	r2, [r7, #76]	; 0x4c
 80056dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80056e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80056e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e5      	bne.n	80056ba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3314      	adds	r3, #20
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	657b      	str	r3, [r7, #84]	; 0x54
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3314      	adds	r3, #20
 800570c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800570e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005714:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800571c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e5      	bne.n	80056ee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3314      	adds	r3, #20
 8005728:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	617b      	str	r3, [r7, #20]
   return(result);
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005738:	653b      	str	r3, [r7, #80]	; 0x50
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3314      	adds	r3, #20
 8005740:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005742:	627a      	str	r2, [r7, #36]	; 0x24
 8005744:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6a39      	ldr	r1, [r7, #32]
 8005748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e5      	bne.n	8005722 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3760      	adds	r7, #96	; 0x60
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	08005389 	.word	0x08005389
 8005764:	080054b5 	.word	0x080054b5
 8005768:	080054f1 	.word	0x080054f1

0800576c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b089      	sub	sp, #36	; 0x24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	330c      	adds	r3, #12
 800577a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	60bb      	str	r3, [r7, #8]
   return(result);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	330c      	adds	r3, #12
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	61ba      	str	r2, [r7, #24]
 8005796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6979      	ldr	r1, [r7, #20]
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	613b      	str	r3, [r7, #16]
   return(result);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e5      	bne.n	8005774 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80057b0:	bf00      	nop
 80057b2:	3724      	adds	r7, #36	; 0x24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057bc:	b480      	push	{r7}
 80057be:	b095      	sub	sp, #84	; 0x54
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	330c      	adds	r3, #12
 80057e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057e4:	643a      	str	r2, [r7, #64]	; 0x40
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e5      	bne.n	80057c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3314      	adds	r3, #20
 80057fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	61fb      	str	r3, [r7, #28]
   return(result);
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3314      	adds	r3, #20
 8005816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005818:	62fa      	str	r2, [r7, #44]	; 0x2c
 800581a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800581e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e5      	bne.n	80057f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	2b01      	cmp	r3, #1
 8005832:	d119      	bne.n	8005868 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	60bb      	str	r3, [r7, #8]
   return(result);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f023 0310 	bic.w	r3, r3, #16
 800584a:	647b      	str	r3, [r7, #68]	; 0x44
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005854:	61ba      	str	r2, [r7, #24]
 8005856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	6979      	ldr	r1, [r7, #20]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	613b      	str	r3, [r7, #16]
   return(result);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e5      	bne.n	8005834 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005876:	bf00      	nop
 8005878:	3754      	adds	r7, #84	; 0x54
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f7ff fd69 	bl	8005374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b21      	cmp	r3, #33	; 0x21
 80058bc:	d13e      	bne.n	800593c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c6:	d114      	bne.n	80058f2 <UART_Transmit_IT+0x48>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d110      	bne.n	80058f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	1c9a      	adds	r2, r3, #2
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	621a      	str	r2, [r3, #32]
 80058f0:	e008      	b.n	8005904 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	1c59      	adds	r1, r3, #1
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6211      	str	r1, [r2, #32]
 80058fc:	781a      	ldrb	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29b      	uxth	r3, r3
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	4619      	mov	r1, r3
 8005912:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10f      	bne.n	8005938 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005926:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005936:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	e000      	b.n	800593e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800593c:	2302      	movs	r3, #2
  }
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005960:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff fce4 	bl	8005338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b08c      	sub	sp, #48	; 0x30
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b22      	cmp	r3, #34	; 0x22
 800598c:	f040 80ae 	bne.w	8005aec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005998:	d117      	bne.n	80059ca <UART_Receive_IT+0x50>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d113      	bne.n	80059ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	1c9a      	adds	r2, r3, #2
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	629a      	str	r2, [r3, #40]	; 0x28
 80059c8:	e026      	b.n	8005a18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059dc:	d007      	beq.n	80059ee <UART_Receive_IT+0x74>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10a      	bne.n	80059fc <UART_Receive_IT+0x82>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d106      	bne.n	80059fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	e008      	b.n	8005a0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	4619      	mov	r1, r3
 8005a26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d15d      	bne.n	8005ae8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0220 	bic.w	r2, r2, #32
 8005a3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695a      	ldr	r2, [r3, #20]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0201 	bic.w	r2, r2, #1
 8005a5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d135      	bne.n	8005ade <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	330c      	adds	r3, #12
 8005a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	e853 3f00 	ldrex	r3, [r3]
 8005a86:	613b      	str	r3, [r7, #16]
   return(result);
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f023 0310 	bic.w	r3, r3, #16
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	330c      	adds	r3, #12
 8005a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a98:	623a      	str	r2, [r7, #32]
 8005a9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	69f9      	ldr	r1, [r7, #28]
 8005a9e:	6a3a      	ldr	r2, [r7, #32]
 8005aa0:	e841 2300 	strex	r3, r2, [r1]
 8005aa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e5      	bne.n	8005a78 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b10      	cmp	r3, #16
 8005ab8:	d10a      	bne.n	8005ad0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fb ff18 	bl	800190c <HAL_UARTEx_RxEventCallback>
 8005adc:	e002      	b.n	8005ae4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7ff fc34 	bl	800534c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e002      	b.n	8005aee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e000      	b.n	8005aee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005aec:	2302      	movs	r3, #2
  }
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3730      	adds	r7, #48	; 0x30
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005afc:	b0c0      	sub	sp, #256	; 0x100
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b14:	68d9      	ldr	r1, [r3, #12]
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	ea40 0301 	orr.w	r3, r0, r1
 8005b20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b50:	f021 010c 	bic.w	r1, r1, #12
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b5e:	430b      	orrs	r3, r1
 8005b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b72:	6999      	ldr	r1, [r3, #24]
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	ea40 0301 	orr.w	r3, r0, r1
 8005b7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4b8f      	ldr	r3, [pc, #572]	; (8005dc4 <UART_SetConfig+0x2cc>)
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d005      	beq.n	8005b98 <UART_SetConfig+0xa0>
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4b8d      	ldr	r3, [pc, #564]	; (8005dc8 <UART_SetConfig+0x2d0>)
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d104      	bne.n	8005ba2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b98:	f7fe fbb6 	bl	8004308 <HAL_RCC_GetPCLK2Freq>
 8005b9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ba0:	e003      	b.n	8005baa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ba2:	f7fe fb9d 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8005ba6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb4:	f040 810c 	bne.w	8005dd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005bc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005bca:	4622      	mov	r2, r4
 8005bcc:	462b      	mov	r3, r5
 8005bce:	1891      	adds	r1, r2, r2
 8005bd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005bd2:	415b      	adcs	r3, r3
 8005bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bda:	4621      	mov	r1, r4
 8005bdc:	eb12 0801 	adds.w	r8, r2, r1
 8005be0:	4629      	mov	r1, r5
 8005be2:	eb43 0901 	adc.w	r9, r3, r1
 8005be6:	f04f 0200 	mov.w	r2, #0
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bfa:	4690      	mov	r8, r2
 8005bfc:	4699      	mov	r9, r3
 8005bfe:	4623      	mov	r3, r4
 8005c00:	eb18 0303 	adds.w	r3, r8, r3
 8005c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c08:	462b      	mov	r3, r5
 8005c0a:	eb49 0303 	adc.w	r3, r9, r3
 8005c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c26:	460b      	mov	r3, r1
 8005c28:	18db      	adds	r3, r3, r3
 8005c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	eb42 0303 	adc.w	r3, r2, r3
 8005c32:	657b      	str	r3, [r7, #84]	; 0x54
 8005c34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c3c:	f7fb f94a 	bl	8000ed4 <__aeabi_uldivmod>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4b61      	ldr	r3, [pc, #388]	; (8005dcc <UART_SetConfig+0x2d4>)
 8005c46:	fba3 2302 	umull	r2, r3, r3, r2
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	011c      	lsls	r4, r3, #4
 8005c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c60:	4642      	mov	r2, r8
 8005c62:	464b      	mov	r3, r9
 8005c64:	1891      	adds	r1, r2, r2
 8005c66:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c68:	415b      	adcs	r3, r3
 8005c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c70:	4641      	mov	r1, r8
 8005c72:	eb12 0a01 	adds.w	sl, r2, r1
 8005c76:	4649      	mov	r1, r9
 8005c78:	eb43 0b01 	adc.w	fp, r3, r1
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	f04f 0300 	mov.w	r3, #0
 8005c84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c90:	4692      	mov	sl, r2
 8005c92:	469b      	mov	fp, r3
 8005c94:	4643      	mov	r3, r8
 8005c96:	eb1a 0303 	adds.w	r3, sl, r3
 8005c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005cb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	18db      	adds	r3, r3, r3
 8005cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	eb42 0303 	adc.w	r3, r2, r3
 8005cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005cd2:	f7fb f8ff 	bl	8000ed4 <__aeabi_uldivmod>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4611      	mov	r1, r2
 8005cdc:	4b3b      	ldr	r3, [pc, #236]	; (8005dcc <UART_SetConfig+0x2d4>)
 8005cde:	fba3 2301 	umull	r2, r3, r3, r1
 8005ce2:	095b      	lsrs	r3, r3, #5
 8005ce4:	2264      	movs	r2, #100	; 0x64
 8005ce6:	fb02 f303 	mul.w	r3, r2, r3
 8005cea:	1acb      	subs	r3, r1, r3
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005cf2:	4b36      	ldr	r3, [pc, #216]	; (8005dcc <UART_SetConfig+0x2d4>)
 8005cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf8:	095b      	lsrs	r3, r3, #5
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d00:	441c      	add	r4, r3
 8005d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d14:	4642      	mov	r2, r8
 8005d16:	464b      	mov	r3, r9
 8005d18:	1891      	adds	r1, r2, r2
 8005d1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d1c:	415b      	adcs	r3, r3
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d24:	4641      	mov	r1, r8
 8005d26:	1851      	adds	r1, r2, r1
 8005d28:	6339      	str	r1, [r7, #48]	; 0x30
 8005d2a:	4649      	mov	r1, r9
 8005d2c:	414b      	adcs	r3, r1
 8005d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	f04f 0300 	mov.w	r3, #0
 8005d38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d3c:	4659      	mov	r1, fp
 8005d3e:	00cb      	lsls	r3, r1, #3
 8005d40:	4651      	mov	r1, sl
 8005d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d46:	4651      	mov	r1, sl
 8005d48:	00ca      	lsls	r2, r1, #3
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4603      	mov	r3, r0
 8005d50:	4642      	mov	r2, r8
 8005d52:	189b      	adds	r3, r3, r2
 8005d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d58:	464b      	mov	r3, r9
 8005d5a:	460a      	mov	r2, r1
 8005d5c:	eb42 0303 	adc.w	r3, r2, r3
 8005d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d78:	460b      	mov	r3, r1
 8005d7a:	18db      	adds	r3, r3, r3
 8005d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d7e:	4613      	mov	r3, r2
 8005d80:	eb42 0303 	adc.w	r3, r2, r3
 8005d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d8e:	f7fb f8a1 	bl	8000ed4 <__aeabi_uldivmod>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <UART_SetConfig+0x2d4>)
 8005d98:	fba3 1302 	umull	r1, r3, r3, r2
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	2164      	movs	r1, #100	; 0x64
 8005da0:	fb01 f303 	mul.w	r3, r1, r3
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	3332      	adds	r3, #50	; 0x32
 8005daa:	4a08      	ldr	r2, [pc, #32]	; (8005dcc <UART_SetConfig+0x2d4>)
 8005dac:	fba2 2303 	umull	r2, r3, r2, r3
 8005db0:	095b      	lsrs	r3, r3, #5
 8005db2:	f003 0207 	and.w	r2, r3, #7
 8005db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4422      	add	r2, r4
 8005dbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dc0:	e106      	b.n	8005fd0 <UART_SetConfig+0x4d8>
 8005dc2:	bf00      	nop
 8005dc4:	40011000 	.word	0x40011000
 8005dc8:	40011400 	.word	0x40011400
 8005dcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005dde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005de2:	4642      	mov	r2, r8
 8005de4:	464b      	mov	r3, r9
 8005de6:	1891      	adds	r1, r2, r2
 8005de8:	6239      	str	r1, [r7, #32]
 8005dea:	415b      	adcs	r3, r3
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
 8005dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005df2:	4641      	mov	r1, r8
 8005df4:	1854      	adds	r4, r2, r1
 8005df6:	4649      	mov	r1, r9
 8005df8:	eb43 0501 	adc.w	r5, r3, r1
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	00eb      	lsls	r3, r5, #3
 8005e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e0a:	00e2      	lsls	r2, r4, #3
 8005e0c:	4614      	mov	r4, r2
 8005e0e:	461d      	mov	r5, r3
 8005e10:	4643      	mov	r3, r8
 8005e12:	18e3      	adds	r3, r4, r3
 8005e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e18:	464b      	mov	r3, r9
 8005e1a:	eb45 0303 	adc.w	r3, r5, r3
 8005e1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e3e:	4629      	mov	r1, r5
 8005e40:	008b      	lsls	r3, r1, #2
 8005e42:	4621      	mov	r1, r4
 8005e44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e48:	4621      	mov	r1, r4
 8005e4a:	008a      	lsls	r2, r1, #2
 8005e4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e50:	f7fb f840 	bl	8000ed4 <__aeabi_uldivmod>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4b60      	ldr	r3, [pc, #384]	; (8005fdc <UART_SetConfig+0x4e4>)
 8005e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	011c      	lsls	r4, r3, #4
 8005e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e74:	4642      	mov	r2, r8
 8005e76:	464b      	mov	r3, r9
 8005e78:	1891      	adds	r1, r2, r2
 8005e7a:	61b9      	str	r1, [r7, #24]
 8005e7c:	415b      	adcs	r3, r3
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e84:	4641      	mov	r1, r8
 8005e86:	1851      	adds	r1, r2, r1
 8005e88:	6139      	str	r1, [r7, #16]
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	414b      	adcs	r3, r1
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	f04f 0300 	mov.w	r3, #0
 8005e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e9c:	4659      	mov	r1, fp
 8005e9e:	00cb      	lsls	r3, r1, #3
 8005ea0:	4651      	mov	r1, sl
 8005ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ea6:	4651      	mov	r1, sl
 8005ea8:	00ca      	lsls	r2, r1, #3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	4619      	mov	r1, r3
 8005eae:	4603      	mov	r3, r0
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	189b      	adds	r3, r3, r2
 8005eb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005eb8:	464b      	mov	r3, r9
 8005eba:	460a      	mov	r2, r1
 8005ebc:	eb42 0303 	adc.w	r3, r2, r3
 8005ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ece:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005edc:	4649      	mov	r1, r9
 8005ede:	008b      	lsls	r3, r1, #2
 8005ee0:	4641      	mov	r1, r8
 8005ee2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ee6:	4641      	mov	r1, r8
 8005ee8:	008a      	lsls	r2, r1, #2
 8005eea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005eee:	f7fa fff1 	bl	8000ed4 <__aeabi_uldivmod>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	4b38      	ldr	r3, [pc, #224]	; (8005fdc <UART_SetConfig+0x4e4>)
 8005efa:	fba3 2301 	umull	r2, r3, r3, r1
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	2264      	movs	r2, #100	; 0x64
 8005f02:	fb02 f303 	mul.w	r3, r2, r3
 8005f06:	1acb      	subs	r3, r1, r3
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	3332      	adds	r3, #50	; 0x32
 8005f0c:	4a33      	ldr	r2, [pc, #204]	; (8005fdc <UART_SetConfig+0x4e4>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f18:	441c      	add	r4, r3
 8005f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f1e:	2200      	movs	r2, #0
 8005f20:	673b      	str	r3, [r7, #112]	; 0x70
 8005f22:	677a      	str	r2, [r7, #116]	; 0x74
 8005f24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f28:	4642      	mov	r2, r8
 8005f2a:	464b      	mov	r3, r9
 8005f2c:	1891      	adds	r1, r2, r2
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	415b      	adcs	r3, r3
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f38:	4641      	mov	r1, r8
 8005f3a:	1851      	adds	r1, r2, r1
 8005f3c:	6039      	str	r1, [r7, #0]
 8005f3e:	4649      	mov	r1, r9
 8005f40:	414b      	adcs	r3, r1
 8005f42:	607b      	str	r3, [r7, #4]
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f50:	4659      	mov	r1, fp
 8005f52:	00cb      	lsls	r3, r1, #3
 8005f54:	4651      	mov	r1, sl
 8005f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f5a:	4651      	mov	r1, sl
 8005f5c:	00ca      	lsls	r2, r1, #3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	4619      	mov	r1, r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	4642      	mov	r2, r8
 8005f66:	189b      	adds	r3, r3, r2
 8005f68:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	460a      	mov	r2, r1
 8005f6e:	eb42 0303 	adc.w	r3, r2, r3
 8005f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f7e:	667a      	str	r2, [r7, #100]	; 0x64
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	f04f 0300 	mov.w	r3, #0
 8005f88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f8c:	4649      	mov	r1, r9
 8005f8e:	008b      	lsls	r3, r1, #2
 8005f90:	4641      	mov	r1, r8
 8005f92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f96:	4641      	mov	r1, r8
 8005f98:	008a      	lsls	r2, r1, #2
 8005f9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f9e:	f7fa ff99 	bl	8000ed4 <__aeabi_uldivmod>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <UART_SetConfig+0x4e4>)
 8005fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	2164      	movs	r1, #100	; 0x64
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	011b      	lsls	r3, r3, #4
 8005fb8:	3332      	adds	r3, #50	; 0x32
 8005fba:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <UART_SetConfig+0x4e4>)
 8005fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc0:	095b      	lsrs	r3, r3, #5
 8005fc2:	f003 020f 	and.w	r2, r3, #15
 8005fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4422      	add	r2, r4
 8005fce:	609a      	str	r2, [r3, #8]
}
 8005fd0:	bf00      	nop
 8005fd2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fdc:	51eb851f 	.word	0x51eb851f

08005fe0 <__cvt>:
 8005fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	ec55 4b10 	vmov	r4, r5, d0
 8005fe8:	2d00      	cmp	r5, #0
 8005fea:	460e      	mov	r6, r1
 8005fec:	4619      	mov	r1, r3
 8005fee:	462b      	mov	r3, r5
 8005ff0:	bfbb      	ittet	lt
 8005ff2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ff6:	461d      	movlt	r5, r3
 8005ff8:	2300      	movge	r3, #0
 8005ffa:	232d      	movlt	r3, #45	; 0x2d
 8005ffc:	700b      	strb	r3, [r1, #0]
 8005ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006000:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006004:	4691      	mov	r9, r2
 8006006:	f023 0820 	bic.w	r8, r3, #32
 800600a:	bfbc      	itt	lt
 800600c:	4622      	movlt	r2, r4
 800600e:	4614      	movlt	r4, r2
 8006010:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006014:	d005      	beq.n	8006022 <__cvt+0x42>
 8006016:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800601a:	d100      	bne.n	800601e <__cvt+0x3e>
 800601c:	3601      	adds	r6, #1
 800601e:	2102      	movs	r1, #2
 8006020:	e000      	b.n	8006024 <__cvt+0x44>
 8006022:	2103      	movs	r1, #3
 8006024:	ab03      	add	r3, sp, #12
 8006026:	9301      	str	r3, [sp, #4]
 8006028:	ab02      	add	r3, sp, #8
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	ec45 4b10 	vmov	d0, r4, r5
 8006030:	4653      	mov	r3, sl
 8006032:	4632      	mov	r2, r6
 8006034:	f001 f880 	bl	8007138 <_dtoa_r>
 8006038:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800603c:	4607      	mov	r7, r0
 800603e:	d102      	bne.n	8006046 <__cvt+0x66>
 8006040:	f019 0f01 	tst.w	r9, #1
 8006044:	d022      	beq.n	800608c <__cvt+0xac>
 8006046:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800604a:	eb07 0906 	add.w	r9, r7, r6
 800604e:	d110      	bne.n	8006072 <__cvt+0x92>
 8006050:	783b      	ldrb	r3, [r7, #0]
 8006052:	2b30      	cmp	r3, #48	; 0x30
 8006054:	d10a      	bne.n	800606c <__cvt+0x8c>
 8006056:	2200      	movs	r2, #0
 8006058:	2300      	movs	r3, #0
 800605a:	4620      	mov	r0, r4
 800605c:	4629      	mov	r1, r5
 800605e:	f7fa fd4b 	bl	8000af8 <__aeabi_dcmpeq>
 8006062:	b918      	cbnz	r0, 800606c <__cvt+0x8c>
 8006064:	f1c6 0601 	rsb	r6, r6, #1
 8006068:	f8ca 6000 	str.w	r6, [sl]
 800606c:	f8da 3000 	ldr.w	r3, [sl]
 8006070:	4499      	add	r9, r3
 8006072:	2200      	movs	r2, #0
 8006074:	2300      	movs	r3, #0
 8006076:	4620      	mov	r0, r4
 8006078:	4629      	mov	r1, r5
 800607a:	f7fa fd3d 	bl	8000af8 <__aeabi_dcmpeq>
 800607e:	b108      	cbz	r0, 8006084 <__cvt+0xa4>
 8006080:	f8cd 900c 	str.w	r9, [sp, #12]
 8006084:	2230      	movs	r2, #48	; 0x30
 8006086:	9b03      	ldr	r3, [sp, #12]
 8006088:	454b      	cmp	r3, r9
 800608a:	d307      	bcc.n	800609c <__cvt+0xbc>
 800608c:	9b03      	ldr	r3, [sp, #12]
 800608e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006090:	1bdb      	subs	r3, r3, r7
 8006092:	4638      	mov	r0, r7
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	b004      	add	sp, #16
 8006098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800609c:	1c59      	adds	r1, r3, #1
 800609e:	9103      	str	r1, [sp, #12]
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	e7f0      	b.n	8006086 <__cvt+0xa6>

080060a4 <__exponent>:
 80060a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060a6:	4603      	mov	r3, r0
 80060a8:	2900      	cmp	r1, #0
 80060aa:	bfb8      	it	lt
 80060ac:	4249      	neglt	r1, r1
 80060ae:	f803 2b02 	strb.w	r2, [r3], #2
 80060b2:	bfb4      	ite	lt
 80060b4:	222d      	movlt	r2, #45	; 0x2d
 80060b6:	222b      	movge	r2, #43	; 0x2b
 80060b8:	2909      	cmp	r1, #9
 80060ba:	7042      	strb	r2, [r0, #1]
 80060bc:	dd2a      	ble.n	8006114 <__exponent+0x70>
 80060be:	f10d 0207 	add.w	r2, sp, #7
 80060c2:	4617      	mov	r7, r2
 80060c4:	260a      	movs	r6, #10
 80060c6:	4694      	mov	ip, r2
 80060c8:	fb91 f5f6 	sdiv	r5, r1, r6
 80060cc:	fb06 1415 	mls	r4, r6, r5, r1
 80060d0:	3430      	adds	r4, #48	; 0x30
 80060d2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80060d6:	460c      	mov	r4, r1
 80060d8:	2c63      	cmp	r4, #99	; 0x63
 80060da:	f102 32ff 	add.w	r2, r2, #4294967295
 80060de:	4629      	mov	r1, r5
 80060e0:	dcf1      	bgt.n	80060c6 <__exponent+0x22>
 80060e2:	3130      	adds	r1, #48	; 0x30
 80060e4:	f1ac 0402 	sub.w	r4, ip, #2
 80060e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80060ec:	1c41      	adds	r1, r0, #1
 80060ee:	4622      	mov	r2, r4
 80060f0:	42ba      	cmp	r2, r7
 80060f2:	d30a      	bcc.n	800610a <__exponent+0x66>
 80060f4:	f10d 0209 	add.w	r2, sp, #9
 80060f8:	eba2 020c 	sub.w	r2, r2, ip
 80060fc:	42bc      	cmp	r4, r7
 80060fe:	bf88      	it	hi
 8006100:	2200      	movhi	r2, #0
 8006102:	4413      	add	r3, r2
 8006104:	1a18      	subs	r0, r3, r0
 8006106:	b003      	add	sp, #12
 8006108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800610a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800610e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006112:	e7ed      	b.n	80060f0 <__exponent+0x4c>
 8006114:	2330      	movs	r3, #48	; 0x30
 8006116:	3130      	adds	r1, #48	; 0x30
 8006118:	7083      	strb	r3, [r0, #2]
 800611a:	70c1      	strb	r1, [r0, #3]
 800611c:	1d03      	adds	r3, r0, #4
 800611e:	e7f1      	b.n	8006104 <__exponent+0x60>

08006120 <_printf_float>:
 8006120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006124:	ed2d 8b02 	vpush	{d8}
 8006128:	b08d      	sub	sp, #52	; 0x34
 800612a:	460c      	mov	r4, r1
 800612c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006130:	4616      	mov	r6, r2
 8006132:	461f      	mov	r7, r3
 8006134:	4605      	mov	r5, r0
 8006136:	f000 fef7 	bl	8006f28 <_localeconv_r>
 800613a:	f8d0 a000 	ldr.w	sl, [r0]
 800613e:	4650      	mov	r0, sl
 8006140:	f7fa f8ae 	bl	80002a0 <strlen>
 8006144:	2300      	movs	r3, #0
 8006146:	930a      	str	r3, [sp, #40]	; 0x28
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	9305      	str	r3, [sp, #20]
 800614c:	f8d8 3000 	ldr.w	r3, [r8]
 8006150:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006154:	3307      	adds	r3, #7
 8006156:	f023 0307 	bic.w	r3, r3, #7
 800615a:	f103 0208 	add.w	r2, r3, #8
 800615e:	f8c8 2000 	str.w	r2, [r8]
 8006162:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006166:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800616a:	9307      	str	r3, [sp, #28]
 800616c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006170:	ee08 0a10 	vmov	s16, r0
 8006174:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800617c:	4b9e      	ldr	r3, [pc, #632]	; (80063f8 <_printf_float+0x2d8>)
 800617e:	f04f 32ff 	mov.w	r2, #4294967295
 8006182:	f7fa fceb 	bl	8000b5c <__aeabi_dcmpun>
 8006186:	bb88      	cbnz	r0, 80061ec <_printf_float+0xcc>
 8006188:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800618c:	4b9a      	ldr	r3, [pc, #616]	; (80063f8 <_printf_float+0x2d8>)
 800618e:	f04f 32ff 	mov.w	r2, #4294967295
 8006192:	f7fa fcc5 	bl	8000b20 <__aeabi_dcmple>
 8006196:	bb48      	cbnz	r0, 80061ec <_printf_float+0xcc>
 8006198:	2200      	movs	r2, #0
 800619a:	2300      	movs	r3, #0
 800619c:	4640      	mov	r0, r8
 800619e:	4649      	mov	r1, r9
 80061a0:	f7fa fcb4 	bl	8000b0c <__aeabi_dcmplt>
 80061a4:	b110      	cbz	r0, 80061ac <_printf_float+0x8c>
 80061a6:	232d      	movs	r3, #45	; 0x2d
 80061a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ac:	4a93      	ldr	r2, [pc, #588]	; (80063fc <_printf_float+0x2dc>)
 80061ae:	4b94      	ldr	r3, [pc, #592]	; (8006400 <_printf_float+0x2e0>)
 80061b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80061b4:	bf94      	ite	ls
 80061b6:	4690      	movls	r8, r2
 80061b8:	4698      	movhi	r8, r3
 80061ba:	2303      	movs	r3, #3
 80061bc:	6123      	str	r3, [r4, #16]
 80061be:	9b05      	ldr	r3, [sp, #20]
 80061c0:	f023 0304 	bic.w	r3, r3, #4
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	f04f 0900 	mov.w	r9, #0
 80061ca:	9700      	str	r7, [sp, #0]
 80061cc:	4633      	mov	r3, r6
 80061ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80061d0:	4621      	mov	r1, r4
 80061d2:	4628      	mov	r0, r5
 80061d4:	f000 f9da 	bl	800658c <_printf_common>
 80061d8:	3001      	adds	r0, #1
 80061da:	f040 8090 	bne.w	80062fe <_printf_float+0x1de>
 80061de:	f04f 30ff 	mov.w	r0, #4294967295
 80061e2:	b00d      	add	sp, #52	; 0x34
 80061e4:	ecbd 8b02 	vpop	{d8}
 80061e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ec:	4642      	mov	r2, r8
 80061ee:	464b      	mov	r3, r9
 80061f0:	4640      	mov	r0, r8
 80061f2:	4649      	mov	r1, r9
 80061f4:	f7fa fcb2 	bl	8000b5c <__aeabi_dcmpun>
 80061f8:	b140      	cbz	r0, 800620c <_printf_float+0xec>
 80061fa:	464b      	mov	r3, r9
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	bfbc      	itt	lt
 8006200:	232d      	movlt	r3, #45	; 0x2d
 8006202:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006206:	4a7f      	ldr	r2, [pc, #508]	; (8006404 <_printf_float+0x2e4>)
 8006208:	4b7f      	ldr	r3, [pc, #508]	; (8006408 <_printf_float+0x2e8>)
 800620a:	e7d1      	b.n	80061b0 <_printf_float+0x90>
 800620c:	6863      	ldr	r3, [r4, #4]
 800620e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006212:	9206      	str	r2, [sp, #24]
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	d13f      	bne.n	8006298 <_printf_float+0x178>
 8006218:	2306      	movs	r3, #6
 800621a:	6063      	str	r3, [r4, #4]
 800621c:	9b05      	ldr	r3, [sp, #20]
 800621e:	6861      	ldr	r1, [r4, #4]
 8006220:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006224:	2300      	movs	r3, #0
 8006226:	9303      	str	r3, [sp, #12]
 8006228:	ab0a      	add	r3, sp, #40	; 0x28
 800622a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800622e:	ab09      	add	r3, sp, #36	; 0x24
 8006230:	ec49 8b10 	vmov	d0, r8, r9
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	6022      	str	r2, [r4, #0]
 8006238:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800623c:	4628      	mov	r0, r5
 800623e:	f7ff fecf 	bl	8005fe0 <__cvt>
 8006242:	9b06      	ldr	r3, [sp, #24]
 8006244:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006246:	2b47      	cmp	r3, #71	; 0x47
 8006248:	4680      	mov	r8, r0
 800624a:	d108      	bne.n	800625e <_printf_float+0x13e>
 800624c:	1cc8      	adds	r0, r1, #3
 800624e:	db02      	blt.n	8006256 <_printf_float+0x136>
 8006250:	6863      	ldr	r3, [r4, #4]
 8006252:	4299      	cmp	r1, r3
 8006254:	dd41      	ble.n	80062da <_printf_float+0x1ba>
 8006256:	f1ab 0302 	sub.w	r3, fp, #2
 800625a:	fa5f fb83 	uxtb.w	fp, r3
 800625e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006262:	d820      	bhi.n	80062a6 <_printf_float+0x186>
 8006264:	3901      	subs	r1, #1
 8006266:	465a      	mov	r2, fp
 8006268:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800626c:	9109      	str	r1, [sp, #36]	; 0x24
 800626e:	f7ff ff19 	bl	80060a4 <__exponent>
 8006272:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006274:	1813      	adds	r3, r2, r0
 8006276:	2a01      	cmp	r2, #1
 8006278:	4681      	mov	r9, r0
 800627a:	6123      	str	r3, [r4, #16]
 800627c:	dc02      	bgt.n	8006284 <_printf_float+0x164>
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	07d2      	lsls	r2, r2, #31
 8006282:	d501      	bpl.n	8006288 <_printf_float+0x168>
 8006284:	3301      	adds	r3, #1
 8006286:	6123      	str	r3, [r4, #16]
 8006288:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800628c:	2b00      	cmp	r3, #0
 800628e:	d09c      	beq.n	80061ca <_printf_float+0xaa>
 8006290:	232d      	movs	r3, #45	; 0x2d
 8006292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006296:	e798      	b.n	80061ca <_printf_float+0xaa>
 8006298:	9a06      	ldr	r2, [sp, #24]
 800629a:	2a47      	cmp	r2, #71	; 0x47
 800629c:	d1be      	bne.n	800621c <_printf_float+0xfc>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1bc      	bne.n	800621c <_printf_float+0xfc>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e7b9      	b.n	800621a <_printf_float+0xfa>
 80062a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80062aa:	d118      	bne.n	80062de <_printf_float+0x1be>
 80062ac:	2900      	cmp	r1, #0
 80062ae:	6863      	ldr	r3, [r4, #4]
 80062b0:	dd0b      	ble.n	80062ca <_printf_float+0x1aa>
 80062b2:	6121      	str	r1, [r4, #16]
 80062b4:	b913      	cbnz	r3, 80062bc <_printf_float+0x19c>
 80062b6:	6822      	ldr	r2, [r4, #0]
 80062b8:	07d0      	lsls	r0, r2, #31
 80062ba:	d502      	bpl.n	80062c2 <_printf_float+0x1a2>
 80062bc:	3301      	adds	r3, #1
 80062be:	440b      	add	r3, r1
 80062c0:	6123      	str	r3, [r4, #16]
 80062c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80062c4:	f04f 0900 	mov.w	r9, #0
 80062c8:	e7de      	b.n	8006288 <_printf_float+0x168>
 80062ca:	b913      	cbnz	r3, 80062d2 <_printf_float+0x1b2>
 80062cc:	6822      	ldr	r2, [r4, #0]
 80062ce:	07d2      	lsls	r2, r2, #31
 80062d0:	d501      	bpl.n	80062d6 <_printf_float+0x1b6>
 80062d2:	3302      	adds	r3, #2
 80062d4:	e7f4      	b.n	80062c0 <_printf_float+0x1a0>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e7f2      	b.n	80062c0 <_printf_float+0x1a0>
 80062da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80062de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e0:	4299      	cmp	r1, r3
 80062e2:	db05      	blt.n	80062f0 <_printf_float+0x1d0>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	6121      	str	r1, [r4, #16]
 80062e8:	07d8      	lsls	r0, r3, #31
 80062ea:	d5ea      	bpl.n	80062c2 <_printf_float+0x1a2>
 80062ec:	1c4b      	adds	r3, r1, #1
 80062ee:	e7e7      	b.n	80062c0 <_printf_float+0x1a0>
 80062f0:	2900      	cmp	r1, #0
 80062f2:	bfd4      	ite	le
 80062f4:	f1c1 0202 	rsble	r2, r1, #2
 80062f8:	2201      	movgt	r2, #1
 80062fa:	4413      	add	r3, r2
 80062fc:	e7e0      	b.n	80062c0 <_printf_float+0x1a0>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	055a      	lsls	r2, r3, #21
 8006302:	d407      	bmi.n	8006314 <_printf_float+0x1f4>
 8006304:	6923      	ldr	r3, [r4, #16]
 8006306:	4642      	mov	r2, r8
 8006308:	4631      	mov	r1, r6
 800630a:	4628      	mov	r0, r5
 800630c:	47b8      	blx	r7
 800630e:	3001      	adds	r0, #1
 8006310:	d12c      	bne.n	800636c <_printf_float+0x24c>
 8006312:	e764      	b.n	80061de <_printf_float+0xbe>
 8006314:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006318:	f240 80e0 	bls.w	80064dc <_printf_float+0x3bc>
 800631c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006320:	2200      	movs	r2, #0
 8006322:	2300      	movs	r3, #0
 8006324:	f7fa fbe8 	bl	8000af8 <__aeabi_dcmpeq>
 8006328:	2800      	cmp	r0, #0
 800632a:	d034      	beq.n	8006396 <_printf_float+0x276>
 800632c:	4a37      	ldr	r2, [pc, #220]	; (800640c <_printf_float+0x2ec>)
 800632e:	2301      	movs	r3, #1
 8006330:	4631      	mov	r1, r6
 8006332:	4628      	mov	r0, r5
 8006334:	47b8      	blx	r7
 8006336:	3001      	adds	r0, #1
 8006338:	f43f af51 	beq.w	80061de <_printf_float+0xbe>
 800633c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006340:	429a      	cmp	r2, r3
 8006342:	db02      	blt.n	800634a <_printf_float+0x22a>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	07d8      	lsls	r0, r3, #31
 8006348:	d510      	bpl.n	800636c <_printf_float+0x24c>
 800634a:	ee18 3a10 	vmov	r3, s16
 800634e:	4652      	mov	r2, sl
 8006350:	4631      	mov	r1, r6
 8006352:	4628      	mov	r0, r5
 8006354:	47b8      	blx	r7
 8006356:	3001      	adds	r0, #1
 8006358:	f43f af41 	beq.w	80061de <_printf_float+0xbe>
 800635c:	f04f 0800 	mov.w	r8, #0
 8006360:	f104 091a 	add.w	r9, r4, #26
 8006364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006366:	3b01      	subs	r3, #1
 8006368:	4543      	cmp	r3, r8
 800636a:	dc09      	bgt.n	8006380 <_printf_float+0x260>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	079b      	lsls	r3, r3, #30
 8006370:	f100 8107 	bmi.w	8006582 <_printf_float+0x462>
 8006374:	68e0      	ldr	r0, [r4, #12]
 8006376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006378:	4298      	cmp	r0, r3
 800637a:	bfb8      	it	lt
 800637c:	4618      	movlt	r0, r3
 800637e:	e730      	b.n	80061e2 <_printf_float+0xc2>
 8006380:	2301      	movs	r3, #1
 8006382:	464a      	mov	r2, r9
 8006384:	4631      	mov	r1, r6
 8006386:	4628      	mov	r0, r5
 8006388:	47b8      	blx	r7
 800638a:	3001      	adds	r0, #1
 800638c:	f43f af27 	beq.w	80061de <_printf_float+0xbe>
 8006390:	f108 0801 	add.w	r8, r8, #1
 8006394:	e7e6      	b.n	8006364 <_printf_float+0x244>
 8006396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006398:	2b00      	cmp	r3, #0
 800639a:	dc39      	bgt.n	8006410 <_printf_float+0x2f0>
 800639c:	4a1b      	ldr	r2, [pc, #108]	; (800640c <_printf_float+0x2ec>)
 800639e:	2301      	movs	r3, #1
 80063a0:	4631      	mov	r1, r6
 80063a2:	4628      	mov	r0, r5
 80063a4:	47b8      	blx	r7
 80063a6:	3001      	adds	r0, #1
 80063a8:	f43f af19 	beq.w	80061de <_printf_float+0xbe>
 80063ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80063b0:	4313      	orrs	r3, r2
 80063b2:	d102      	bne.n	80063ba <_printf_float+0x29a>
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	07d9      	lsls	r1, r3, #31
 80063b8:	d5d8      	bpl.n	800636c <_printf_float+0x24c>
 80063ba:	ee18 3a10 	vmov	r3, s16
 80063be:	4652      	mov	r2, sl
 80063c0:	4631      	mov	r1, r6
 80063c2:	4628      	mov	r0, r5
 80063c4:	47b8      	blx	r7
 80063c6:	3001      	adds	r0, #1
 80063c8:	f43f af09 	beq.w	80061de <_printf_float+0xbe>
 80063cc:	f04f 0900 	mov.w	r9, #0
 80063d0:	f104 0a1a 	add.w	sl, r4, #26
 80063d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d6:	425b      	negs	r3, r3
 80063d8:	454b      	cmp	r3, r9
 80063da:	dc01      	bgt.n	80063e0 <_printf_float+0x2c0>
 80063dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063de:	e792      	b.n	8006306 <_printf_float+0x1e6>
 80063e0:	2301      	movs	r3, #1
 80063e2:	4652      	mov	r2, sl
 80063e4:	4631      	mov	r1, r6
 80063e6:	4628      	mov	r0, r5
 80063e8:	47b8      	blx	r7
 80063ea:	3001      	adds	r0, #1
 80063ec:	f43f aef7 	beq.w	80061de <_printf_float+0xbe>
 80063f0:	f109 0901 	add.w	r9, r9, #1
 80063f4:	e7ee      	b.n	80063d4 <_printf_float+0x2b4>
 80063f6:	bf00      	nop
 80063f8:	7fefffff 	.word	0x7fefffff
 80063fc:	0800ac08 	.word	0x0800ac08
 8006400:	0800ac0c 	.word	0x0800ac0c
 8006404:	0800ac10 	.word	0x0800ac10
 8006408:	0800ac14 	.word	0x0800ac14
 800640c:	0800ac18 	.word	0x0800ac18
 8006410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006412:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006414:	429a      	cmp	r2, r3
 8006416:	bfa8      	it	ge
 8006418:	461a      	movge	r2, r3
 800641a:	2a00      	cmp	r2, #0
 800641c:	4691      	mov	r9, r2
 800641e:	dc37      	bgt.n	8006490 <_printf_float+0x370>
 8006420:	f04f 0b00 	mov.w	fp, #0
 8006424:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006428:	f104 021a 	add.w	r2, r4, #26
 800642c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800642e:	9305      	str	r3, [sp, #20]
 8006430:	eba3 0309 	sub.w	r3, r3, r9
 8006434:	455b      	cmp	r3, fp
 8006436:	dc33      	bgt.n	80064a0 <_printf_float+0x380>
 8006438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800643c:	429a      	cmp	r2, r3
 800643e:	db3b      	blt.n	80064b8 <_printf_float+0x398>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	07da      	lsls	r2, r3, #31
 8006444:	d438      	bmi.n	80064b8 <_printf_float+0x398>
 8006446:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800644a:	eba2 0903 	sub.w	r9, r2, r3
 800644e:	9b05      	ldr	r3, [sp, #20]
 8006450:	1ad2      	subs	r2, r2, r3
 8006452:	4591      	cmp	r9, r2
 8006454:	bfa8      	it	ge
 8006456:	4691      	movge	r9, r2
 8006458:	f1b9 0f00 	cmp.w	r9, #0
 800645c:	dc35      	bgt.n	80064ca <_printf_float+0x3aa>
 800645e:	f04f 0800 	mov.w	r8, #0
 8006462:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006466:	f104 0a1a 	add.w	sl, r4, #26
 800646a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800646e:	1a9b      	subs	r3, r3, r2
 8006470:	eba3 0309 	sub.w	r3, r3, r9
 8006474:	4543      	cmp	r3, r8
 8006476:	f77f af79 	ble.w	800636c <_printf_float+0x24c>
 800647a:	2301      	movs	r3, #1
 800647c:	4652      	mov	r2, sl
 800647e:	4631      	mov	r1, r6
 8006480:	4628      	mov	r0, r5
 8006482:	47b8      	blx	r7
 8006484:	3001      	adds	r0, #1
 8006486:	f43f aeaa 	beq.w	80061de <_printf_float+0xbe>
 800648a:	f108 0801 	add.w	r8, r8, #1
 800648e:	e7ec      	b.n	800646a <_printf_float+0x34a>
 8006490:	4613      	mov	r3, r2
 8006492:	4631      	mov	r1, r6
 8006494:	4642      	mov	r2, r8
 8006496:	4628      	mov	r0, r5
 8006498:	47b8      	blx	r7
 800649a:	3001      	adds	r0, #1
 800649c:	d1c0      	bne.n	8006420 <_printf_float+0x300>
 800649e:	e69e      	b.n	80061de <_printf_float+0xbe>
 80064a0:	2301      	movs	r3, #1
 80064a2:	4631      	mov	r1, r6
 80064a4:	4628      	mov	r0, r5
 80064a6:	9205      	str	r2, [sp, #20]
 80064a8:	47b8      	blx	r7
 80064aa:	3001      	adds	r0, #1
 80064ac:	f43f ae97 	beq.w	80061de <_printf_float+0xbe>
 80064b0:	9a05      	ldr	r2, [sp, #20]
 80064b2:	f10b 0b01 	add.w	fp, fp, #1
 80064b6:	e7b9      	b.n	800642c <_printf_float+0x30c>
 80064b8:	ee18 3a10 	vmov	r3, s16
 80064bc:	4652      	mov	r2, sl
 80064be:	4631      	mov	r1, r6
 80064c0:	4628      	mov	r0, r5
 80064c2:	47b8      	blx	r7
 80064c4:	3001      	adds	r0, #1
 80064c6:	d1be      	bne.n	8006446 <_printf_float+0x326>
 80064c8:	e689      	b.n	80061de <_printf_float+0xbe>
 80064ca:	9a05      	ldr	r2, [sp, #20]
 80064cc:	464b      	mov	r3, r9
 80064ce:	4442      	add	r2, r8
 80064d0:	4631      	mov	r1, r6
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b8      	blx	r7
 80064d6:	3001      	adds	r0, #1
 80064d8:	d1c1      	bne.n	800645e <_printf_float+0x33e>
 80064da:	e680      	b.n	80061de <_printf_float+0xbe>
 80064dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064de:	2a01      	cmp	r2, #1
 80064e0:	dc01      	bgt.n	80064e6 <_printf_float+0x3c6>
 80064e2:	07db      	lsls	r3, r3, #31
 80064e4:	d53a      	bpl.n	800655c <_printf_float+0x43c>
 80064e6:	2301      	movs	r3, #1
 80064e8:	4642      	mov	r2, r8
 80064ea:	4631      	mov	r1, r6
 80064ec:	4628      	mov	r0, r5
 80064ee:	47b8      	blx	r7
 80064f0:	3001      	adds	r0, #1
 80064f2:	f43f ae74 	beq.w	80061de <_printf_float+0xbe>
 80064f6:	ee18 3a10 	vmov	r3, s16
 80064fa:	4652      	mov	r2, sl
 80064fc:	4631      	mov	r1, r6
 80064fe:	4628      	mov	r0, r5
 8006500:	47b8      	blx	r7
 8006502:	3001      	adds	r0, #1
 8006504:	f43f ae6b 	beq.w	80061de <_printf_float+0xbe>
 8006508:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800650c:	2200      	movs	r2, #0
 800650e:	2300      	movs	r3, #0
 8006510:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006514:	f7fa faf0 	bl	8000af8 <__aeabi_dcmpeq>
 8006518:	b9d8      	cbnz	r0, 8006552 <_printf_float+0x432>
 800651a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800651e:	f108 0201 	add.w	r2, r8, #1
 8006522:	4631      	mov	r1, r6
 8006524:	4628      	mov	r0, r5
 8006526:	47b8      	blx	r7
 8006528:	3001      	adds	r0, #1
 800652a:	d10e      	bne.n	800654a <_printf_float+0x42a>
 800652c:	e657      	b.n	80061de <_printf_float+0xbe>
 800652e:	2301      	movs	r3, #1
 8006530:	4652      	mov	r2, sl
 8006532:	4631      	mov	r1, r6
 8006534:	4628      	mov	r0, r5
 8006536:	47b8      	blx	r7
 8006538:	3001      	adds	r0, #1
 800653a:	f43f ae50 	beq.w	80061de <_printf_float+0xbe>
 800653e:	f108 0801 	add.w	r8, r8, #1
 8006542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006544:	3b01      	subs	r3, #1
 8006546:	4543      	cmp	r3, r8
 8006548:	dcf1      	bgt.n	800652e <_printf_float+0x40e>
 800654a:	464b      	mov	r3, r9
 800654c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006550:	e6da      	b.n	8006308 <_printf_float+0x1e8>
 8006552:	f04f 0800 	mov.w	r8, #0
 8006556:	f104 0a1a 	add.w	sl, r4, #26
 800655a:	e7f2      	b.n	8006542 <_printf_float+0x422>
 800655c:	2301      	movs	r3, #1
 800655e:	4642      	mov	r2, r8
 8006560:	e7df      	b.n	8006522 <_printf_float+0x402>
 8006562:	2301      	movs	r3, #1
 8006564:	464a      	mov	r2, r9
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	f43f ae36 	beq.w	80061de <_printf_float+0xbe>
 8006572:	f108 0801 	add.w	r8, r8, #1
 8006576:	68e3      	ldr	r3, [r4, #12]
 8006578:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800657a:	1a5b      	subs	r3, r3, r1
 800657c:	4543      	cmp	r3, r8
 800657e:	dcf0      	bgt.n	8006562 <_printf_float+0x442>
 8006580:	e6f8      	b.n	8006374 <_printf_float+0x254>
 8006582:	f04f 0800 	mov.w	r8, #0
 8006586:	f104 0919 	add.w	r9, r4, #25
 800658a:	e7f4      	b.n	8006576 <_printf_float+0x456>

0800658c <_printf_common>:
 800658c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006590:	4616      	mov	r6, r2
 8006592:	4699      	mov	r9, r3
 8006594:	688a      	ldr	r2, [r1, #8]
 8006596:	690b      	ldr	r3, [r1, #16]
 8006598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800659c:	4293      	cmp	r3, r2
 800659e:	bfb8      	it	lt
 80065a0:	4613      	movlt	r3, r2
 80065a2:	6033      	str	r3, [r6, #0]
 80065a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065a8:	4607      	mov	r7, r0
 80065aa:	460c      	mov	r4, r1
 80065ac:	b10a      	cbz	r2, 80065b2 <_printf_common+0x26>
 80065ae:	3301      	adds	r3, #1
 80065b0:	6033      	str	r3, [r6, #0]
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	0699      	lsls	r1, r3, #26
 80065b6:	bf42      	ittt	mi
 80065b8:	6833      	ldrmi	r3, [r6, #0]
 80065ba:	3302      	addmi	r3, #2
 80065bc:	6033      	strmi	r3, [r6, #0]
 80065be:	6825      	ldr	r5, [r4, #0]
 80065c0:	f015 0506 	ands.w	r5, r5, #6
 80065c4:	d106      	bne.n	80065d4 <_printf_common+0x48>
 80065c6:	f104 0a19 	add.w	sl, r4, #25
 80065ca:	68e3      	ldr	r3, [r4, #12]
 80065cc:	6832      	ldr	r2, [r6, #0]
 80065ce:	1a9b      	subs	r3, r3, r2
 80065d0:	42ab      	cmp	r3, r5
 80065d2:	dc26      	bgt.n	8006622 <_printf_common+0x96>
 80065d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065d8:	1e13      	subs	r3, r2, #0
 80065da:	6822      	ldr	r2, [r4, #0]
 80065dc:	bf18      	it	ne
 80065de:	2301      	movne	r3, #1
 80065e0:	0692      	lsls	r2, r2, #26
 80065e2:	d42b      	bmi.n	800663c <_printf_common+0xb0>
 80065e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065e8:	4649      	mov	r1, r9
 80065ea:	4638      	mov	r0, r7
 80065ec:	47c0      	blx	r8
 80065ee:	3001      	adds	r0, #1
 80065f0:	d01e      	beq.n	8006630 <_printf_common+0xa4>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	6922      	ldr	r2, [r4, #16]
 80065f6:	f003 0306 	and.w	r3, r3, #6
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	bf02      	ittt	eq
 80065fe:	68e5      	ldreq	r5, [r4, #12]
 8006600:	6833      	ldreq	r3, [r6, #0]
 8006602:	1aed      	subeq	r5, r5, r3
 8006604:	68a3      	ldr	r3, [r4, #8]
 8006606:	bf0c      	ite	eq
 8006608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800660c:	2500      	movne	r5, #0
 800660e:	4293      	cmp	r3, r2
 8006610:	bfc4      	itt	gt
 8006612:	1a9b      	subgt	r3, r3, r2
 8006614:	18ed      	addgt	r5, r5, r3
 8006616:	2600      	movs	r6, #0
 8006618:	341a      	adds	r4, #26
 800661a:	42b5      	cmp	r5, r6
 800661c:	d11a      	bne.n	8006654 <_printf_common+0xc8>
 800661e:	2000      	movs	r0, #0
 8006620:	e008      	b.n	8006634 <_printf_common+0xa8>
 8006622:	2301      	movs	r3, #1
 8006624:	4652      	mov	r2, sl
 8006626:	4649      	mov	r1, r9
 8006628:	4638      	mov	r0, r7
 800662a:	47c0      	blx	r8
 800662c:	3001      	adds	r0, #1
 800662e:	d103      	bne.n	8006638 <_printf_common+0xac>
 8006630:	f04f 30ff 	mov.w	r0, #4294967295
 8006634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006638:	3501      	adds	r5, #1
 800663a:	e7c6      	b.n	80065ca <_printf_common+0x3e>
 800663c:	18e1      	adds	r1, r4, r3
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	2030      	movs	r0, #48	; 0x30
 8006642:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006646:	4422      	add	r2, r4
 8006648:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800664c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006650:	3302      	adds	r3, #2
 8006652:	e7c7      	b.n	80065e4 <_printf_common+0x58>
 8006654:	2301      	movs	r3, #1
 8006656:	4622      	mov	r2, r4
 8006658:	4649      	mov	r1, r9
 800665a:	4638      	mov	r0, r7
 800665c:	47c0      	blx	r8
 800665e:	3001      	adds	r0, #1
 8006660:	d0e6      	beq.n	8006630 <_printf_common+0xa4>
 8006662:	3601      	adds	r6, #1
 8006664:	e7d9      	b.n	800661a <_printf_common+0x8e>
	...

08006668 <_printf_i>:
 8006668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800666c:	7e0f      	ldrb	r7, [r1, #24]
 800666e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006670:	2f78      	cmp	r7, #120	; 0x78
 8006672:	4691      	mov	r9, r2
 8006674:	4680      	mov	r8, r0
 8006676:	460c      	mov	r4, r1
 8006678:	469a      	mov	sl, r3
 800667a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800667e:	d807      	bhi.n	8006690 <_printf_i+0x28>
 8006680:	2f62      	cmp	r7, #98	; 0x62
 8006682:	d80a      	bhi.n	800669a <_printf_i+0x32>
 8006684:	2f00      	cmp	r7, #0
 8006686:	f000 80d4 	beq.w	8006832 <_printf_i+0x1ca>
 800668a:	2f58      	cmp	r7, #88	; 0x58
 800668c:	f000 80c0 	beq.w	8006810 <_printf_i+0x1a8>
 8006690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006698:	e03a      	b.n	8006710 <_printf_i+0xa8>
 800669a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800669e:	2b15      	cmp	r3, #21
 80066a0:	d8f6      	bhi.n	8006690 <_printf_i+0x28>
 80066a2:	a101      	add	r1, pc, #4	; (adr r1, 80066a8 <_printf_i+0x40>)
 80066a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066a8:	08006701 	.word	0x08006701
 80066ac:	08006715 	.word	0x08006715
 80066b0:	08006691 	.word	0x08006691
 80066b4:	08006691 	.word	0x08006691
 80066b8:	08006691 	.word	0x08006691
 80066bc:	08006691 	.word	0x08006691
 80066c0:	08006715 	.word	0x08006715
 80066c4:	08006691 	.word	0x08006691
 80066c8:	08006691 	.word	0x08006691
 80066cc:	08006691 	.word	0x08006691
 80066d0:	08006691 	.word	0x08006691
 80066d4:	08006819 	.word	0x08006819
 80066d8:	08006741 	.word	0x08006741
 80066dc:	080067d3 	.word	0x080067d3
 80066e0:	08006691 	.word	0x08006691
 80066e4:	08006691 	.word	0x08006691
 80066e8:	0800683b 	.word	0x0800683b
 80066ec:	08006691 	.word	0x08006691
 80066f0:	08006741 	.word	0x08006741
 80066f4:	08006691 	.word	0x08006691
 80066f8:	08006691 	.word	0x08006691
 80066fc:	080067db 	.word	0x080067db
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	1d1a      	adds	r2, r3, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	602a      	str	r2, [r5, #0]
 8006708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800670c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006710:	2301      	movs	r3, #1
 8006712:	e09f      	b.n	8006854 <_printf_i+0x1ec>
 8006714:	6820      	ldr	r0, [r4, #0]
 8006716:	682b      	ldr	r3, [r5, #0]
 8006718:	0607      	lsls	r7, r0, #24
 800671a:	f103 0104 	add.w	r1, r3, #4
 800671e:	6029      	str	r1, [r5, #0]
 8006720:	d501      	bpl.n	8006726 <_printf_i+0xbe>
 8006722:	681e      	ldr	r6, [r3, #0]
 8006724:	e003      	b.n	800672e <_printf_i+0xc6>
 8006726:	0646      	lsls	r6, r0, #25
 8006728:	d5fb      	bpl.n	8006722 <_printf_i+0xba>
 800672a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800672e:	2e00      	cmp	r6, #0
 8006730:	da03      	bge.n	800673a <_printf_i+0xd2>
 8006732:	232d      	movs	r3, #45	; 0x2d
 8006734:	4276      	negs	r6, r6
 8006736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800673a:	485a      	ldr	r0, [pc, #360]	; (80068a4 <_printf_i+0x23c>)
 800673c:	230a      	movs	r3, #10
 800673e:	e012      	b.n	8006766 <_printf_i+0xfe>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	6820      	ldr	r0, [r4, #0]
 8006744:	1d19      	adds	r1, r3, #4
 8006746:	6029      	str	r1, [r5, #0]
 8006748:	0605      	lsls	r5, r0, #24
 800674a:	d501      	bpl.n	8006750 <_printf_i+0xe8>
 800674c:	681e      	ldr	r6, [r3, #0]
 800674e:	e002      	b.n	8006756 <_printf_i+0xee>
 8006750:	0641      	lsls	r1, r0, #25
 8006752:	d5fb      	bpl.n	800674c <_printf_i+0xe4>
 8006754:	881e      	ldrh	r6, [r3, #0]
 8006756:	4853      	ldr	r0, [pc, #332]	; (80068a4 <_printf_i+0x23c>)
 8006758:	2f6f      	cmp	r7, #111	; 0x6f
 800675a:	bf0c      	ite	eq
 800675c:	2308      	moveq	r3, #8
 800675e:	230a      	movne	r3, #10
 8006760:	2100      	movs	r1, #0
 8006762:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006766:	6865      	ldr	r5, [r4, #4]
 8006768:	60a5      	str	r5, [r4, #8]
 800676a:	2d00      	cmp	r5, #0
 800676c:	bfa2      	ittt	ge
 800676e:	6821      	ldrge	r1, [r4, #0]
 8006770:	f021 0104 	bicge.w	r1, r1, #4
 8006774:	6021      	strge	r1, [r4, #0]
 8006776:	b90e      	cbnz	r6, 800677c <_printf_i+0x114>
 8006778:	2d00      	cmp	r5, #0
 800677a:	d04b      	beq.n	8006814 <_printf_i+0x1ac>
 800677c:	4615      	mov	r5, r2
 800677e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006782:	fb03 6711 	mls	r7, r3, r1, r6
 8006786:	5dc7      	ldrb	r7, [r0, r7]
 8006788:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800678c:	4637      	mov	r7, r6
 800678e:	42bb      	cmp	r3, r7
 8006790:	460e      	mov	r6, r1
 8006792:	d9f4      	bls.n	800677e <_printf_i+0x116>
 8006794:	2b08      	cmp	r3, #8
 8006796:	d10b      	bne.n	80067b0 <_printf_i+0x148>
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	07de      	lsls	r6, r3, #31
 800679c:	d508      	bpl.n	80067b0 <_printf_i+0x148>
 800679e:	6923      	ldr	r3, [r4, #16]
 80067a0:	6861      	ldr	r1, [r4, #4]
 80067a2:	4299      	cmp	r1, r3
 80067a4:	bfde      	ittt	le
 80067a6:	2330      	movle	r3, #48	; 0x30
 80067a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067b0:	1b52      	subs	r2, r2, r5
 80067b2:	6122      	str	r2, [r4, #16]
 80067b4:	f8cd a000 	str.w	sl, [sp]
 80067b8:	464b      	mov	r3, r9
 80067ba:	aa03      	add	r2, sp, #12
 80067bc:	4621      	mov	r1, r4
 80067be:	4640      	mov	r0, r8
 80067c0:	f7ff fee4 	bl	800658c <_printf_common>
 80067c4:	3001      	adds	r0, #1
 80067c6:	d14a      	bne.n	800685e <_printf_i+0x1f6>
 80067c8:	f04f 30ff 	mov.w	r0, #4294967295
 80067cc:	b004      	add	sp, #16
 80067ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	f043 0320 	orr.w	r3, r3, #32
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	4833      	ldr	r0, [pc, #204]	; (80068a8 <_printf_i+0x240>)
 80067dc:	2778      	movs	r7, #120	; 0x78
 80067de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	6829      	ldr	r1, [r5, #0]
 80067e6:	061f      	lsls	r7, r3, #24
 80067e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80067ec:	d402      	bmi.n	80067f4 <_printf_i+0x18c>
 80067ee:	065f      	lsls	r7, r3, #25
 80067f0:	bf48      	it	mi
 80067f2:	b2b6      	uxthmi	r6, r6
 80067f4:	07df      	lsls	r7, r3, #31
 80067f6:	bf48      	it	mi
 80067f8:	f043 0320 	orrmi.w	r3, r3, #32
 80067fc:	6029      	str	r1, [r5, #0]
 80067fe:	bf48      	it	mi
 8006800:	6023      	strmi	r3, [r4, #0]
 8006802:	b91e      	cbnz	r6, 800680c <_printf_i+0x1a4>
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	f023 0320 	bic.w	r3, r3, #32
 800680a:	6023      	str	r3, [r4, #0]
 800680c:	2310      	movs	r3, #16
 800680e:	e7a7      	b.n	8006760 <_printf_i+0xf8>
 8006810:	4824      	ldr	r0, [pc, #144]	; (80068a4 <_printf_i+0x23c>)
 8006812:	e7e4      	b.n	80067de <_printf_i+0x176>
 8006814:	4615      	mov	r5, r2
 8006816:	e7bd      	b.n	8006794 <_printf_i+0x12c>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	6826      	ldr	r6, [r4, #0]
 800681c:	6961      	ldr	r1, [r4, #20]
 800681e:	1d18      	adds	r0, r3, #4
 8006820:	6028      	str	r0, [r5, #0]
 8006822:	0635      	lsls	r5, r6, #24
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	d501      	bpl.n	800682c <_printf_i+0x1c4>
 8006828:	6019      	str	r1, [r3, #0]
 800682a:	e002      	b.n	8006832 <_printf_i+0x1ca>
 800682c:	0670      	lsls	r0, r6, #25
 800682e:	d5fb      	bpl.n	8006828 <_printf_i+0x1c0>
 8006830:	8019      	strh	r1, [r3, #0]
 8006832:	2300      	movs	r3, #0
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	4615      	mov	r5, r2
 8006838:	e7bc      	b.n	80067b4 <_printf_i+0x14c>
 800683a:	682b      	ldr	r3, [r5, #0]
 800683c:	1d1a      	adds	r2, r3, #4
 800683e:	602a      	str	r2, [r5, #0]
 8006840:	681d      	ldr	r5, [r3, #0]
 8006842:	6862      	ldr	r2, [r4, #4]
 8006844:	2100      	movs	r1, #0
 8006846:	4628      	mov	r0, r5
 8006848:	f7f9 fcda 	bl	8000200 <memchr>
 800684c:	b108      	cbz	r0, 8006852 <_printf_i+0x1ea>
 800684e:	1b40      	subs	r0, r0, r5
 8006850:	6060      	str	r0, [r4, #4]
 8006852:	6863      	ldr	r3, [r4, #4]
 8006854:	6123      	str	r3, [r4, #16]
 8006856:	2300      	movs	r3, #0
 8006858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800685c:	e7aa      	b.n	80067b4 <_printf_i+0x14c>
 800685e:	6923      	ldr	r3, [r4, #16]
 8006860:	462a      	mov	r2, r5
 8006862:	4649      	mov	r1, r9
 8006864:	4640      	mov	r0, r8
 8006866:	47d0      	blx	sl
 8006868:	3001      	adds	r0, #1
 800686a:	d0ad      	beq.n	80067c8 <_printf_i+0x160>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	079b      	lsls	r3, r3, #30
 8006870:	d413      	bmi.n	800689a <_printf_i+0x232>
 8006872:	68e0      	ldr	r0, [r4, #12]
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	4298      	cmp	r0, r3
 8006878:	bfb8      	it	lt
 800687a:	4618      	movlt	r0, r3
 800687c:	e7a6      	b.n	80067cc <_printf_i+0x164>
 800687e:	2301      	movs	r3, #1
 8006880:	4632      	mov	r2, r6
 8006882:	4649      	mov	r1, r9
 8006884:	4640      	mov	r0, r8
 8006886:	47d0      	blx	sl
 8006888:	3001      	adds	r0, #1
 800688a:	d09d      	beq.n	80067c8 <_printf_i+0x160>
 800688c:	3501      	adds	r5, #1
 800688e:	68e3      	ldr	r3, [r4, #12]
 8006890:	9903      	ldr	r1, [sp, #12]
 8006892:	1a5b      	subs	r3, r3, r1
 8006894:	42ab      	cmp	r3, r5
 8006896:	dcf2      	bgt.n	800687e <_printf_i+0x216>
 8006898:	e7eb      	b.n	8006872 <_printf_i+0x20a>
 800689a:	2500      	movs	r5, #0
 800689c:	f104 0619 	add.w	r6, r4, #25
 80068a0:	e7f5      	b.n	800688e <_printf_i+0x226>
 80068a2:	bf00      	nop
 80068a4:	0800ac1a 	.word	0x0800ac1a
 80068a8:	0800ac2b 	.word	0x0800ac2b

080068ac <_scanf_float>:
 80068ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b0:	b087      	sub	sp, #28
 80068b2:	4617      	mov	r7, r2
 80068b4:	9303      	str	r3, [sp, #12]
 80068b6:	688b      	ldr	r3, [r1, #8]
 80068b8:	1e5a      	subs	r2, r3, #1
 80068ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80068be:	bf83      	ittte	hi
 80068c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80068c4:	195b      	addhi	r3, r3, r5
 80068c6:	9302      	strhi	r3, [sp, #8]
 80068c8:	2300      	movls	r3, #0
 80068ca:	bf86      	itte	hi
 80068cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80068d0:	608b      	strhi	r3, [r1, #8]
 80068d2:	9302      	strls	r3, [sp, #8]
 80068d4:	680b      	ldr	r3, [r1, #0]
 80068d6:	468b      	mov	fp, r1
 80068d8:	2500      	movs	r5, #0
 80068da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80068de:	f84b 3b1c 	str.w	r3, [fp], #28
 80068e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80068e6:	4680      	mov	r8, r0
 80068e8:	460c      	mov	r4, r1
 80068ea:	465e      	mov	r6, fp
 80068ec:	46aa      	mov	sl, r5
 80068ee:	46a9      	mov	r9, r5
 80068f0:	9501      	str	r5, [sp, #4]
 80068f2:	68a2      	ldr	r2, [r4, #8]
 80068f4:	b152      	cbz	r2, 800690c <_scanf_float+0x60>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b4e      	cmp	r3, #78	; 0x4e
 80068fc:	d864      	bhi.n	80069c8 <_scanf_float+0x11c>
 80068fe:	2b40      	cmp	r3, #64	; 0x40
 8006900:	d83c      	bhi.n	800697c <_scanf_float+0xd0>
 8006902:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006906:	b2c8      	uxtb	r0, r1
 8006908:	280e      	cmp	r0, #14
 800690a:	d93a      	bls.n	8006982 <_scanf_float+0xd6>
 800690c:	f1b9 0f00 	cmp.w	r9, #0
 8006910:	d003      	beq.n	800691a <_scanf_float+0x6e>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800691e:	f1ba 0f01 	cmp.w	sl, #1
 8006922:	f200 8113 	bhi.w	8006b4c <_scanf_float+0x2a0>
 8006926:	455e      	cmp	r6, fp
 8006928:	f200 8105 	bhi.w	8006b36 <_scanf_float+0x28a>
 800692c:	2501      	movs	r5, #1
 800692e:	4628      	mov	r0, r5
 8006930:	b007      	add	sp, #28
 8006932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006936:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800693a:	2a0d      	cmp	r2, #13
 800693c:	d8e6      	bhi.n	800690c <_scanf_float+0x60>
 800693e:	a101      	add	r1, pc, #4	; (adr r1, 8006944 <_scanf_float+0x98>)
 8006940:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006944:	08006a83 	.word	0x08006a83
 8006948:	0800690d 	.word	0x0800690d
 800694c:	0800690d 	.word	0x0800690d
 8006950:	0800690d 	.word	0x0800690d
 8006954:	08006ae3 	.word	0x08006ae3
 8006958:	08006abb 	.word	0x08006abb
 800695c:	0800690d 	.word	0x0800690d
 8006960:	0800690d 	.word	0x0800690d
 8006964:	08006a91 	.word	0x08006a91
 8006968:	0800690d 	.word	0x0800690d
 800696c:	0800690d 	.word	0x0800690d
 8006970:	0800690d 	.word	0x0800690d
 8006974:	0800690d 	.word	0x0800690d
 8006978:	08006a49 	.word	0x08006a49
 800697c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006980:	e7db      	b.n	800693a <_scanf_float+0x8e>
 8006982:	290e      	cmp	r1, #14
 8006984:	d8c2      	bhi.n	800690c <_scanf_float+0x60>
 8006986:	a001      	add	r0, pc, #4	; (adr r0, 800698c <_scanf_float+0xe0>)
 8006988:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800698c:	08006a3b 	.word	0x08006a3b
 8006990:	0800690d 	.word	0x0800690d
 8006994:	08006a3b 	.word	0x08006a3b
 8006998:	08006acf 	.word	0x08006acf
 800699c:	0800690d 	.word	0x0800690d
 80069a0:	080069e9 	.word	0x080069e9
 80069a4:	08006a25 	.word	0x08006a25
 80069a8:	08006a25 	.word	0x08006a25
 80069ac:	08006a25 	.word	0x08006a25
 80069b0:	08006a25 	.word	0x08006a25
 80069b4:	08006a25 	.word	0x08006a25
 80069b8:	08006a25 	.word	0x08006a25
 80069bc:	08006a25 	.word	0x08006a25
 80069c0:	08006a25 	.word	0x08006a25
 80069c4:	08006a25 	.word	0x08006a25
 80069c8:	2b6e      	cmp	r3, #110	; 0x6e
 80069ca:	d809      	bhi.n	80069e0 <_scanf_float+0x134>
 80069cc:	2b60      	cmp	r3, #96	; 0x60
 80069ce:	d8b2      	bhi.n	8006936 <_scanf_float+0x8a>
 80069d0:	2b54      	cmp	r3, #84	; 0x54
 80069d2:	d077      	beq.n	8006ac4 <_scanf_float+0x218>
 80069d4:	2b59      	cmp	r3, #89	; 0x59
 80069d6:	d199      	bne.n	800690c <_scanf_float+0x60>
 80069d8:	2d07      	cmp	r5, #7
 80069da:	d197      	bne.n	800690c <_scanf_float+0x60>
 80069dc:	2508      	movs	r5, #8
 80069de:	e029      	b.n	8006a34 <_scanf_float+0x188>
 80069e0:	2b74      	cmp	r3, #116	; 0x74
 80069e2:	d06f      	beq.n	8006ac4 <_scanf_float+0x218>
 80069e4:	2b79      	cmp	r3, #121	; 0x79
 80069e6:	e7f6      	b.n	80069d6 <_scanf_float+0x12a>
 80069e8:	6821      	ldr	r1, [r4, #0]
 80069ea:	05c8      	lsls	r0, r1, #23
 80069ec:	d51a      	bpl.n	8006a24 <_scanf_float+0x178>
 80069ee:	9b02      	ldr	r3, [sp, #8]
 80069f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80069f4:	6021      	str	r1, [r4, #0]
 80069f6:	f109 0901 	add.w	r9, r9, #1
 80069fa:	b11b      	cbz	r3, 8006a04 <_scanf_float+0x158>
 80069fc:	3b01      	subs	r3, #1
 80069fe:	3201      	adds	r2, #1
 8006a00:	9302      	str	r3, [sp, #8]
 8006a02:	60a2      	str	r2, [r4, #8]
 8006a04:	68a3      	ldr	r3, [r4, #8]
 8006a06:	3b01      	subs	r3, #1
 8006a08:	60a3      	str	r3, [r4, #8]
 8006a0a:	6923      	ldr	r3, [r4, #16]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	6123      	str	r3, [r4, #16]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	607b      	str	r3, [r7, #4]
 8006a18:	f340 8084 	ble.w	8006b24 <_scanf_float+0x278>
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	603b      	str	r3, [r7, #0]
 8006a22:	e766      	b.n	80068f2 <_scanf_float+0x46>
 8006a24:	eb1a 0f05 	cmn.w	sl, r5
 8006a28:	f47f af70 	bne.w	800690c <_scanf_float+0x60>
 8006a2c:	6822      	ldr	r2, [r4, #0]
 8006a2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006a32:	6022      	str	r2, [r4, #0]
 8006a34:	f806 3b01 	strb.w	r3, [r6], #1
 8006a38:	e7e4      	b.n	8006a04 <_scanf_float+0x158>
 8006a3a:	6822      	ldr	r2, [r4, #0]
 8006a3c:	0610      	lsls	r0, r2, #24
 8006a3e:	f57f af65 	bpl.w	800690c <_scanf_float+0x60>
 8006a42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a46:	e7f4      	b.n	8006a32 <_scanf_float+0x186>
 8006a48:	f1ba 0f00 	cmp.w	sl, #0
 8006a4c:	d10e      	bne.n	8006a6c <_scanf_float+0x1c0>
 8006a4e:	f1b9 0f00 	cmp.w	r9, #0
 8006a52:	d10e      	bne.n	8006a72 <_scanf_float+0x1c6>
 8006a54:	6822      	ldr	r2, [r4, #0]
 8006a56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a5e:	d108      	bne.n	8006a72 <_scanf_float+0x1c6>
 8006a60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a64:	6022      	str	r2, [r4, #0]
 8006a66:	f04f 0a01 	mov.w	sl, #1
 8006a6a:	e7e3      	b.n	8006a34 <_scanf_float+0x188>
 8006a6c:	f1ba 0f02 	cmp.w	sl, #2
 8006a70:	d055      	beq.n	8006b1e <_scanf_float+0x272>
 8006a72:	2d01      	cmp	r5, #1
 8006a74:	d002      	beq.n	8006a7c <_scanf_float+0x1d0>
 8006a76:	2d04      	cmp	r5, #4
 8006a78:	f47f af48 	bne.w	800690c <_scanf_float+0x60>
 8006a7c:	3501      	adds	r5, #1
 8006a7e:	b2ed      	uxtb	r5, r5
 8006a80:	e7d8      	b.n	8006a34 <_scanf_float+0x188>
 8006a82:	f1ba 0f01 	cmp.w	sl, #1
 8006a86:	f47f af41 	bne.w	800690c <_scanf_float+0x60>
 8006a8a:	f04f 0a02 	mov.w	sl, #2
 8006a8e:	e7d1      	b.n	8006a34 <_scanf_float+0x188>
 8006a90:	b97d      	cbnz	r5, 8006ab2 <_scanf_float+0x206>
 8006a92:	f1b9 0f00 	cmp.w	r9, #0
 8006a96:	f47f af3c 	bne.w	8006912 <_scanf_float+0x66>
 8006a9a:	6822      	ldr	r2, [r4, #0]
 8006a9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006aa0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006aa4:	f47f af39 	bne.w	800691a <_scanf_float+0x6e>
 8006aa8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006aac:	6022      	str	r2, [r4, #0]
 8006aae:	2501      	movs	r5, #1
 8006ab0:	e7c0      	b.n	8006a34 <_scanf_float+0x188>
 8006ab2:	2d03      	cmp	r5, #3
 8006ab4:	d0e2      	beq.n	8006a7c <_scanf_float+0x1d0>
 8006ab6:	2d05      	cmp	r5, #5
 8006ab8:	e7de      	b.n	8006a78 <_scanf_float+0x1cc>
 8006aba:	2d02      	cmp	r5, #2
 8006abc:	f47f af26 	bne.w	800690c <_scanf_float+0x60>
 8006ac0:	2503      	movs	r5, #3
 8006ac2:	e7b7      	b.n	8006a34 <_scanf_float+0x188>
 8006ac4:	2d06      	cmp	r5, #6
 8006ac6:	f47f af21 	bne.w	800690c <_scanf_float+0x60>
 8006aca:	2507      	movs	r5, #7
 8006acc:	e7b2      	b.n	8006a34 <_scanf_float+0x188>
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	0591      	lsls	r1, r2, #22
 8006ad2:	f57f af1b 	bpl.w	800690c <_scanf_float+0x60>
 8006ad6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006ada:	6022      	str	r2, [r4, #0]
 8006adc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ae0:	e7a8      	b.n	8006a34 <_scanf_float+0x188>
 8006ae2:	6822      	ldr	r2, [r4, #0]
 8006ae4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006ae8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006aec:	d006      	beq.n	8006afc <_scanf_float+0x250>
 8006aee:	0550      	lsls	r0, r2, #21
 8006af0:	f57f af0c 	bpl.w	800690c <_scanf_float+0x60>
 8006af4:	f1b9 0f00 	cmp.w	r9, #0
 8006af8:	f43f af0f 	beq.w	800691a <_scanf_float+0x6e>
 8006afc:	0591      	lsls	r1, r2, #22
 8006afe:	bf58      	it	pl
 8006b00:	9901      	ldrpl	r1, [sp, #4]
 8006b02:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b06:	bf58      	it	pl
 8006b08:	eba9 0101 	subpl.w	r1, r9, r1
 8006b0c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006b10:	bf58      	it	pl
 8006b12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006b16:	6022      	str	r2, [r4, #0]
 8006b18:	f04f 0900 	mov.w	r9, #0
 8006b1c:	e78a      	b.n	8006a34 <_scanf_float+0x188>
 8006b1e:	f04f 0a03 	mov.w	sl, #3
 8006b22:	e787      	b.n	8006a34 <_scanf_float+0x188>
 8006b24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b28:	4639      	mov	r1, r7
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	4798      	blx	r3
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	f43f aedf 	beq.w	80068f2 <_scanf_float+0x46>
 8006b34:	e6ea      	b.n	800690c <_scanf_float+0x60>
 8006b36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b3e:	463a      	mov	r2, r7
 8006b40:	4640      	mov	r0, r8
 8006b42:	4798      	blx	r3
 8006b44:	6923      	ldr	r3, [r4, #16]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	e6ec      	b.n	8006926 <_scanf_float+0x7a>
 8006b4c:	1e6b      	subs	r3, r5, #1
 8006b4e:	2b06      	cmp	r3, #6
 8006b50:	d825      	bhi.n	8006b9e <_scanf_float+0x2f2>
 8006b52:	2d02      	cmp	r5, #2
 8006b54:	d836      	bhi.n	8006bc4 <_scanf_float+0x318>
 8006b56:	455e      	cmp	r6, fp
 8006b58:	f67f aee8 	bls.w	800692c <_scanf_float+0x80>
 8006b5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b64:	463a      	mov	r2, r7
 8006b66:	4640      	mov	r0, r8
 8006b68:	4798      	blx	r3
 8006b6a:	6923      	ldr	r3, [r4, #16]
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	6123      	str	r3, [r4, #16]
 8006b70:	e7f1      	b.n	8006b56 <_scanf_float+0x2aa>
 8006b72:	9802      	ldr	r0, [sp, #8]
 8006b74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b78:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006b7c:	9002      	str	r0, [sp, #8]
 8006b7e:	463a      	mov	r2, r7
 8006b80:	4640      	mov	r0, r8
 8006b82:	4798      	blx	r3
 8006b84:	6923      	ldr	r3, [r4, #16]
 8006b86:	3b01      	subs	r3, #1
 8006b88:	6123      	str	r3, [r4, #16]
 8006b8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b8e:	fa5f fa8a 	uxtb.w	sl, sl
 8006b92:	f1ba 0f02 	cmp.w	sl, #2
 8006b96:	d1ec      	bne.n	8006b72 <_scanf_float+0x2c6>
 8006b98:	3d03      	subs	r5, #3
 8006b9a:	b2ed      	uxtb	r5, r5
 8006b9c:	1b76      	subs	r6, r6, r5
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	05da      	lsls	r2, r3, #23
 8006ba2:	d52f      	bpl.n	8006c04 <_scanf_float+0x358>
 8006ba4:	055b      	lsls	r3, r3, #21
 8006ba6:	d510      	bpl.n	8006bca <_scanf_float+0x31e>
 8006ba8:	455e      	cmp	r6, fp
 8006baa:	f67f aebf 	bls.w	800692c <_scanf_float+0x80>
 8006bae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bb6:	463a      	mov	r2, r7
 8006bb8:	4640      	mov	r0, r8
 8006bba:	4798      	blx	r3
 8006bbc:	6923      	ldr	r3, [r4, #16]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	6123      	str	r3, [r4, #16]
 8006bc2:	e7f1      	b.n	8006ba8 <_scanf_float+0x2fc>
 8006bc4:	46aa      	mov	sl, r5
 8006bc6:	9602      	str	r6, [sp, #8]
 8006bc8:	e7df      	b.n	8006b8a <_scanf_float+0x2de>
 8006bca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006bce:	6923      	ldr	r3, [r4, #16]
 8006bd0:	2965      	cmp	r1, #101	; 0x65
 8006bd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bd6:	f106 35ff 	add.w	r5, r6, #4294967295
 8006bda:	6123      	str	r3, [r4, #16]
 8006bdc:	d00c      	beq.n	8006bf8 <_scanf_float+0x34c>
 8006bde:	2945      	cmp	r1, #69	; 0x45
 8006be0:	d00a      	beq.n	8006bf8 <_scanf_float+0x34c>
 8006be2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006be6:	463a      	mov	r2, r7
 8006be8:	4640      	mov	r0, r8
 8006bea:	4798      	blx	r3
 8006bec:	6923      	ldr	r3, [r4, #16]
 8006bee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	1eb5      	subs	r5, r6, #2
 8006bf6:	6123      	str	r3, [r4, #16]
 8006bf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bfc:	463a      	mov	r2, r7
 8006bfe:	4640      	mov	r0, r8
 8006c00:	4798      	blx	r3
 8006c02:	462e      	mov	r6, r5
 8006c04:	6825      	ldr	r5, [r4, #0]
 8006c06:	f015 0510 	ands.w	r5, r5, #16
 8006c0a:	d158      	bne.n	8006cbe <_scanf_float+0x412>
 8006c0c:	7035      	strb	r5, [r6, #0]
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c18:	d11c      	bne.n	8006c54 <_scanf_float+0x3a8>
 8006c1a:	9b01      	ldr	r3, [sp, #4]
 8006c1c:	454b      	cmp	r3, r9
 8006c1e:	eba3 0209 	sub.w	r2, r3, r9
 8006c22:	d124      	bne.n	8006c6e <_scanf_float+0x3c2>
 8006c24:	2200      	movs	r2, #0
 8006c26:	4659      	mov	r1, fp
 8006c28:	4640      	mov	r0, r8
 8006c2a:	f002 fc31 	bl	8009490 <_strtod_r>
 8006c2e:	9b03      	ldr	r3, [sp, #12]
 8006c30:	6821      	ldr	r1, [r4, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f011 0f02 	tst.w	r1, #2
 8006c38:	ec57 6b10 	vmov	r6, r7, d0
 8006c3c:	f103 0204 	add.w	r2, r3, #4
 8006c40:	d020      	beq.n	8006c84 <_scanf_float+0x3d8>
 8006c42:	9903      	ldr	r1, [sp, #12]
 8006c44:	600a      	str	r2, [r1, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	e9c3 6700 	strd	r6, r7, [r3]
 8006c4c:	68e3      	ldr	r3, [r4, #12]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	60e3      	str	r3, [r4, #12]
 8006c52:	e66c      	b.n	800692e <_scanf_float+0x82>
 8006c54:	9b04      	ldr	r3, [sp, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0e4      	beq.n	8006c24 <_scanf_float+0x378>
 8006c5a:	9905      	ldr	r1, [sp, #20]
 8006c5c:	230a      	movs	r3, #10
 8006c5e:	462a      	mov	r2, r5
 8006c60:	3101      	adds	r1, #1
 8006c62:	4640      	mov	r0, r8
 8006c64:	f002 fc9c 	bl	80095a0 <_strtol_r>
 8006c68:	9b04      	ldr	r3, [sp, #16]
 8006c6a:	9e05      	ldr	r6, [sp, #20]
 8006c6c:	1ac2      	subs	r2, r0, r3
 8006c6e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006c72:	429e      	cmp	r6, r3
 8006c74:	bf28      	it	cs
 8006c76:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006c7a:	4912      	ldr	r1, [pc, #72]	; (8006cc4 <_scanf_float+0x418>)
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	f000 f8e7 	bl	8006e50 <siprintf>
 8006c82:	e7cf      	b.n	8006c24 <_scanf_float+0x378>
 8006c84:	f011 0f04 	tst.w	r1, #4
 8006c88:	9903      	ldr	r1, [sp, #12]
 8006c8a:	600a      	str	r2, [r1, #0]
 8006c8c:	d1db      	bne.n	8006c46 <_scanf_float+0x39a>
 8006c8e:	f8d3 8000 	ldr.w	r8, [r3]
 8006c92:	ee10 2a10 	vmov	r2, s0
 8006c96:	ee10 0a10 	vmov	r0, s0
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	f7f9 ff5d 	bl	8000b5c <__aeabi_dcmpun>
 8006ca2:	b128      	cbz	r0, 8006cb0 <_scanf_float+0x404>
 8006ca4:	4808      	ldr	r0, [pc, #32]	; (8006cc8 <_scanf_float+0x41c>)
 8006ca6:	f000 f9b7 	bl	8007018 <nanf>
 8006caa:	ed88 0a00 	vstr	s0, [r8]
 8006cae:	e7cd      	b.n	8006c4c <_scanf_float+0x3a0>
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	4639      	mov	r1, r7
 8006cb4:	f7f9 ffb0 	bl	8000c18 <__aeabi_d2f>
 8006cb8:	f8c8 0000 	str.w	r0, [r8]
 8006cbc:	e7c6      	b.n	8006c4c <_scanf_float+0x3a0>
 8006cbe:	2500      	movs	r5, #0
 8006cc0:	e635      	b.n	800692e <_scanf_float+0x82>
 8006cc2:	bf00      	nop
 8006cc4:	0800ac3c 	.word	0x0800ac3c
 8006cc8:	0800afcd 	.word	0x0800afcd

08006ccc <std>:
 8006ccc:	2300      	movs	r3, #0
 8006cce:	b510      	push	{r4, lr}
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8006cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cda:	6083      	str	r3, [r0, #8]
 8006cdc:	8181      	strh	r1, [r0, #12]
 8006cde:	6643      	str	r3, [r0, #100]	; 0x64
 8006ce0:	81c2      	strh	r2, [r0, #14]
 8006ce2:	6183      	str	r3, [r0, #24]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	2208      	movs	r2, #8
 8006ce8:	305c      	adds	r0, #92	; 0x5c
 8006cea:	f000 f914 	bl	8006f16 <memset>
 8006cee:	4b0d      	ldr	r3, [pc, #52]	; (8006d24 <std+0x58>)
 8006cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8006cf2:	4b0d      	ldr	r3, [pc, #52]	; (8006d28 <std+0x5c>)
 8006cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	; (8006d2c <std+0x60>)
 8006cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	; (8006d30 <std+0x64>)
 8006cfc:	6323      	str	r3, [r4, #48]	; 0x30
 8006cfe:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <std+0x68>)
 8006d00:	6224      	str	r4, [r4, #32]
 8006d02:	429c      	cmp	r4, r3
 8006d04:	d006      	beq.n	8006d14 <std+0x48>
 8006d06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006d0a:	4294      	cmp	r4, r2
 8006d0c:	d002      	beq.n	8006d14 <std+0x48>
 8006d0e:	33d0      	adds	r3, #208	; 0xd0
 8006d10:	429c      	cmp	r4, r3
 8006d12:	d105      	bne.n	8006d20 <std+0x54>
 8006d14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d1c:	f000 b978 	b.w	8007010 <__retarget_lock_init_recursive>
 8006d20:	bd10      	pop	{r4, pc}
 8006d22:	bf00      	nop
 8006d24:	08006e91 	.word	0x08006e91
 8006d28:	08006eb3 	.word	0x08006eb3
 8006d2c:	08006eeb 	.word	0x08006eeb
 8006d30:	08006f0f 	.word	0x08006f0f
 8006d34:	200006ac 	.word	0x200006ac

08006d38 <stdio_exit_handler>:
 8006d38:	4a02      	ldr	r2, [pc, #8]	; (8006d44 <stdio_exit_handler+0xc>)
 8006d3a:	4903      	ldr	r1, [pc, #12]	; (8006d48 <stdio_exit_handler+0x10>)
 8006d3c:	4803      	ldr	r0, [pc, #12]	; (8006d4c <stdio_exit_handler+0x14>)
 8006d3e:	f000 b869 	b.w	8006e14 <_fwalk_sglue>
 8006d42:	bf00      	nop
 8006d44:	2000001c 	.word	0x2000001c
 8006d48:	08009961 	.word	0x08009961
 8006d4c:	20000028 	.word	0x20000028

08006d50 <cleanup_stdio>:
 8006d50:	6841      	ldr	r1, [r0, #4]
 8006d52:	4b0c      	ldr	r3, [pc, #48]	; (8006d84 <cleanup_stdio+0x34>)
 8006d54:	4299      	cmp	r1, r3
 8006d56:	b510      	push	{r4, lr}
 8006d58:	4604      	mov	r4, r0
 8006d5a:	d001      	beq.n	8006d60 <cleanup_stdio+0x10>
 8006d5c:	f002 fe00 	bl	8009960 <_fflush_r>
 8006d60:	68a1      	ldr	r1, [r4, #8]
 8006d62:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <cleanup_stdio+0x38>)
 8006d64:	4299      	cmp	r1, r3
 8006d66:	d002      	beq.n	8006d6e <cleanup_stdio+0x1e>
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f002 fdf9 	bl	8009960 <_fflush_r>
 8006d6e:	68e1      	ldr	r1, [r4, #12]
 8006d70:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <cleanup_stdio+0x3c>)
 8006d72:	4299      	cmp	r1, r3
 8006d74:	d004      	beq.n	8006d80 <cleanup_stdio+0x30>
 8006d76:	4620      	mov	r0, r4
 8006d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d7c:	f002 bdf0 	b.w	8009960 <_fflush_r>
 8006d80:	bd10      	pop	{r4, pc}
 8006d82:	bf00      	nop
 8006d84:	200006ac 	.word	0x200006ac
 8006d88:	20000714 	.word	0x20000714
 8006d8c:	2000077c 	.word	0x2000077c

08006d90 <global_stdio_init.part.0>:
 8006d90:	b510      	push	{r4, lr}
 8006d92:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <global_stdio_init.part.0+0x30>)
 8006d94:	4c0b      	ldr	r4, [pc, #44]	; (8006dc4 <global_stdio_init.part.0+0x34>)
 8006d96:	4a0c      	ldr	r2, [pc, #48]	; (8006dc8 <global_stdio_init.part.0+0x38>)
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2104      	movs	r1, #4
 8006da0:	f7ff ff94 	bl	8006ccc <std>
 8006da4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006da8:	2201      	movs	r2, #1
 8006daa:	2109      	movs	r1, #9
 8006dac:	f7ff ff8e 	bl	8006ccc <std>
 8006db0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006db4:	2202      	movs	r2, #2
 8006db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dba:	2112      	movs	r1, #18
 8006dbc:	f7ff bf86 	b.w	8006ccc <std>
 8006dc0:	200007e4 	.word	0x200007e4
 8006dc4:	200006ac 	.word	0x200006ac
 8006dc8:	08006d39 	.word	0x08006d39

08006dcc <__sfp_lock_acquire>:
 8006dcc:	4801      	ldr	r0, [pc, #4]	; (8006dd4 <__sfp_lock_acquire+0x8>)
 8006dce:	f000 b920 	b.w	8007012 <__retarget_lock_acquire_recursive>
 8006dd2:	bf00      	nop
 8006dd4:	200007ed 	.word	0x200007ed

08006dd8 <__sfp_lock_release>:
 8006dd8:	4801      	ldr	r0, [pc, #4]	; (8006de0 <__sfp_lock_release+0x8>)
 8006dda:	f000 b91b 	b.w	8007014 <__retarget_lock_release_recursive>
 8006dde:	bf00      	nop
 8006de0:	200007ed 	.word	0x200007ed

08006de4 <__sinit>:
 8006de4:	b510      	push	{r4, lr}
 8006de6:	4604      	mov	r4, r0
 8006de8:	f7ff fff0 	bl	8006dcc <__sfp_lock_acquire>
 8006dec:	6a23      	ldr	r3, [r4, #32]
 8006dee:	b11b      	cbz	r3, 8006df8 <__sinit+0x14>
 8006df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df4:	f7ff bff0 	b.w	8006dd8 <__sfp_lock_release>
 8006df8:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <__sinit+0x28>)
 8006dfa:	6223      	str	r3, [r4, #32]
 8006dfc:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <__sinit+0x2c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1f5      	bne.n	8006df0 <__sinit+0xc>
 8006e04:	f7ff ffc4 	bl	8006d90 <global_stdio_init.part.0>
 8006e08:	e7f2      	b.n	8006df0 <__sinit+0xc>
 8006e0a:	bf00      	nop
 8006e0c:	08006d51 	.word	0x08006d51
 8006e10:	200007e4 	.word	0x200007e4

08006e14 <_fwalk_sglue>:
 8006e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e18:	4607      	mov	r7, r0
 8006e1a:	4688      	mov	r8, r1
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	2600      	movs	r6, #0
 8006e20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e24:	f1b9 0901 	subs.w	r9, r9, #1
 8006e28:	d505      	bpl.n	8006e36 <_fwalk_sglue+0x22>
 8006e2a:	6824      	ldr	r4, [r4, #0]
 8006e2c:	2c00      	cmp	r4, #0
 8006e2e:	d1f7      	bne.n	8006e20 <_fwalk_sglue+0xc>
 8006e30:	4630      	mov	r0, r6
 8006e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e36:	89ab      	ldrh	r3, [r5, #12]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d907      	bls.n	8006e4c <_fwalk_sglue+0x38>
 8006e3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e40:	3301      	adds	r3, #1
 8006e42:	d003      	beq.n	8006e4c <_fwalk_sglue+0x38>
 8006e44:	4629      	mov	r1, r5
 8006e46:	4638      	mov	r0, r7
 8006e48:	47c0      	blx	r8
 8006e4a:	4306      	orrs	r6, r0
 8006e4c:	3568      	adds	r5, #104	; 0x68
 8006e4e:	e7e9      	b.n	8006e24 <_fwalk_sglue+0x10>

08006e50 <siprintf>:
 8006e50:	b40e      	push	{r1, r2, r3}
 8006e52:	b500      	push	{lr}
 8006e54:	b09c      	sub	sp, #112	; 0x70
 8006e56:	ab1d      	add	r3, sp, #116	; 0x74
 8006e58:	9002      	str	r0, [sp, #8]
 8006e5a:	9006      	str	r0, [sp, #24]
 8006e5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e60:	4809      	ldr	r0, [pc, #36]	; (8006e88 <siprintf+0x38>)
 8006e62:	9107      	str	r1, [sp, #28]
 8006e64:	9104      	str	r1, [sp, #16]
 8006e66:	4909      	ldr	r1, [pc, #36]	; (8006e8c <siprintf+0x3c>)
 8006e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e6c:	9105      	str	r1, [sp, #20]
 8006e6e:	6800      	ldr	r0, [r0, #0]
 8006e70:	9301      	str	r3, [sp, #4]
 8006e72:	a902      	add	r1, sp, #8
 8006e74:	f002 fbf0 	bl	8009658 <_svfiprintf_r>
 8006e78:	9b02      	ldr	r3, [sp, #8]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	701a      	strb	r2, [r3, #0]
 8006e7e:	b01c      	add	sp, #112	; 0x70
 8006e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e84:	b003      	add	sp, #12
 8006e86:	4770      	bx	lr
 8006e88:	20000074 	.word	0x20000074
 8006e8c:	ffff0208 	.word	0xffff0208

08006e90 <__sread>:
 8006e90:	b510      	push	{r4, lr}
 8006e92:	460c      	mov	r4, r1
 8006e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e98:	f000 f86c 	bl	8006f74 <_read_r>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	bfab      	itete	ge
 8006ea0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ea2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ea4:	181b      	addge	r3, r3, r0
 8006ea6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006eaa:	bfac      	ite	ge
 8006eac:	6563      	strge	r3, [r4, #84]	; 0x54
 8006eae:	81a3      	strhlt	r3, [r4, #12]
 8006eb0:	bd10      	pop	{r4, pc}

08006eb2 <__swrite>:
 8006eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb6:	461f      	mov	r7, r3
 8006eb8:	898b      	ldrh	r3, [r1, #12]
 8006eba:	05db      	lsls	r3, r3, #23
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	4616      	mov	r6, r2
 8006ec2:	d505      	bpl.n	8006ed0 <__swrite+0x1e>
 8006ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec8:	2302      	movs	r3, #2
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f000 f840 	bl	8006f50 <_lseek_r>
 8006ed0:	89a3      	ldrh	r3, [r4, #12]
 8006ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eda:	81a3      	strh	r3, [r4, #12]
 8006edc:	4632      	mov	r2, r6
 8006ede:	463b      	mov	r3, r7
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee6:	f000 b857 	b.w	8006f98 <_write_r>

08006eea <__sseek>:
 8006eea:	b510      	push	{r4, lr}
 8006eec:	460c      	mov	r4, r1
 8006eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef2:	f000 f82d 	bl	8006f50 <_lseek_r>
 8006ef6:	1c43      	adds	r3, r0, #1
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	bf15      	itete	ne
 8006efc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006efe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f06:	81a3      	strheq	r3, [r4, #12]
 8006f08:	bf18      	it	ne
 8006f0a:	81a3      	strhne	r3, [r4, #12]
 8006f0c:	bd10      	pop	{r4, pc}

08006f0e <__sclose>:
 8006f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f12:	f000 b80d 	b.w	8006f30 <_close_r>

08006f16 <memset>:
 8006f16:	4402      	add	r2, r0
 8006f18:	4603      	mov	r3, r0
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d100      	bne.n	8006f20 <memset+0xa>
 8006f1e:	4770      	bx	lr
 8006f20:	f803 1b01 	strb.w	r1, [r3], #1
 8006f24:	e7f9      	b.n	8006f1a <memset+0x4>
	...

08006f28 <_localeconv_r>:
 8006f28:	4800      	ldr	r0, [pc, #0]	; (8006f2c <_localeconv_r+0x4>)
 8006f2a:	4770      	bx	lr
 8006f2c:	20000168 	.word	0x20000168

08006f30 <_close_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4d06      	ldr	r5, [pc, #24]	; (8006f4c <_close_r+0x1c>)
 8006f34:	2300      	movs	r3, #0
 8006f36:	4604      	mov	r4, r0
 8006f38:	4608      	mov	r0, r1
 8006f3a:	602b      	str	r3, [r5, #0]
 8006f3c:	f7fb f9cf 	bl	80022de <_close>
 8006f40:	1c43      	adds	r3, r0, #1
 8006f42:	d102      	bne.n	8006f4a <_close_r+0x1a>
 8006f44:	682b      	ldr	r3, [r5, #0]
 8006f46:	b103      	cbz	r3, 8006f4a <_close_r+0x1a>
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}
 8006f4c:	200007e8 	.word	0x200007e8

08006f50 <_lseek_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4d07      	ldr	r5, [pc, #28]	; (8006f70 <_lseek_r+0x20>)
 8006f54:	4604      	mov	r4, r0
 8006f56:	4608      	mov	r0, r1
 8006f58:	4611      	mov	r1, r2
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	602a      	str	r2, [r5, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f7fb f9e4 	bl	800232c <_lseek>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d102      	bne.n	8006f6e <_lseek_r+0x1e>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	b103      	cbz	r3, 8006f6e <_lseek_r+0x1e>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
 8006f70:	200007e8 	.word	0x200007e8

08006f74 <_read_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4d07      	ldr	r5, [pc, #28]	; (8006f94 <_read_r+0x20>)
 8006f78:	4604      	mov	r4, r0
 8006f7a:	4608      	mov	r0, r1
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	2200      	movs	r2, #0
 8006f80:	602a      	str	r2, [r5, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	f7fb f972 	bl	800226c <_read>
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d102      	bne.n	8006f92 <_read_r+0x1e>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	b103      	cbz	r3, 8006f92 <_read_r+0x1e>
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	200007e8 	.word	0x200007e8

08006f98 <_write_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d07      	ldr	r5, [pc, #28]	; (8006fb8 <_write_r+0x20>)
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	602a      	str	r2, [r5, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f7fb f97d 	bl	80022a6 <_write>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_write_r+0x1e>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_write_r+0x1e>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	200007e8 	.word	0x200007e8

08006fbc <__errno>:
 8006fbc:	4b01      	ldr	r3, [pc, #4]	; (8006fc4 <__errno+0x8>)
 8006fbe:	6818      	ldr	r0, [r3, #0]
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	20000074 	.word	0x20000074

08006fc8 <__libc_init_array>:
 8006fc8:	b570      	push	{r4, r5, r6, lr}
 8006fca:	4d0d      	ldr	r5, [pc, #52]	; (8007000 <__libc_init_array+0x38>)
 8006fcc:	4c0d      	ldr	r4, [pc, #52]	; (8007004 <__libc_init_array+0x3c>)
 8006fce:	1b64      	subs	r4, r4, r5
 8006fd0:	10a4      	asrs	r4, r4, #2
 8006fd2:	2600      	movs	r6, #0
 8006fd4:	42a6      	cmp	r6, r4
 8006fd6:	d109      	bne.n	8006fec <__libc_init_array+0x24>
 8006fd8:	4d0b      	ldr	r5, [pc, #44]	; (8007008 <__libc_init_array+0x40>)
 8006fda:	4c0c      	ldr	r4, [pc, #48]	; (800700c <__libc_init_array+0x44>)
 8006fdc:	f003 fdd2 	bl	800ab84 <_init>
 8006fe0:	1b64      	subs	r4, r4, r5
 8006fe2:	10a4      	asrs	r4, r4, #2
 8006fe4:	2600      	movs	r6, #0
 8006fe6:	42a6      	cmp	r6, r4
 8006fe8:	d105      	bne.n	8006ff6 <__libc_init_array+0x2e>
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff0:	4798      	blx	r3
 8006ff2:	3601      	adds	r6, #1
 8006ff4:	e7ee      	b.n	8006fd4 <__libc_init_array+0xc>
 8006ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ffa:	4798      	blx	r3
 8006ffc:	3601      	adds	r6, #1
 8006ffe:	e7f2      	b.n	8006fe6 <__libc_init_array+0x1e>
 8007000:	0800b038 	.word	0x0800b038
 8007004:	0800b038 	.word	0x0800b038
 8007008:	0800b038 	.word	0x0800b038
 800700c:	0800b03c 	.word	0x0800b03c

08007010 <__retarget_lock_init_recursive>:
 8007010:	4770      	bx	lr

08007012 <__retarget_lock_acquire_recursive>:
 8007012:	4770      	bx	lr

08007014 <__retarget_lock_release_recursive>:
 8007014:	4770      	bx	lr
	...

08007018 <nanf>:
 8007018:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007020 <nanf+0x8>
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	7fc00000 	.word	0x7fc00000

08007024 <quorem>:
 8007024:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007028:	6903      	ldr	r3, [r0, #16]
 800702a:	690c      	ldr	r4, [r1, #16]
 800702c:	42a3      	cmp	r3, r4
 800702e:	4607      	mov	r7, r0
 8007030:	db7e      	blt.n	8007130 <quorem+0x10c>
 8007032:	3c01      	subs	r4, #1
 8007034:	f101 0814 	add.w	r8, r1, #20
 8007038:	f100 0514 	add.w	r5, r0, #20
 800703c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007040:	9301      	str	r3, [sp, #4]
 8007042:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007046:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800704a:	3301      	adds	r3, #1
 800704c:	429a      	cmp	r2, r3
 800704e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007052:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007056:	fbb2 f6f3 	udiv	r6, r2, r3
 800705a:	d331      	bcc.n	80070c0 <quorem+0x9c>
 800705c:	f04f 0e00 	mov.w	lr, #0
 8007060:	4640      	mov	r0, r8
 8007062:	46ac      	mov	ip, r5
 8007064:	46f2      	mov	sl, lr
 8007066:	f850 2b04 	ldr.w	r2, [r0], #4
 800706a:	b293      	uxth	r3, r2
 800706c:	fb06 e303 	mla	r3, r6, r3, lr
 8007070:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007074:	0c1a      	lsrs	r2, r3, #16
 8007076:	b29b      	uxth	r3, r3
 8007078:	ebaa 0303 	sub.w	r3, sl, r3
 800707c:	f8dc a000 	ldr.w	sl, [ip]
 8007080:	fa13 f38a 	uxtah	r3, r3, sl
 8007084:	fb06 220e 	mla	r2, r6, lr, r2
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	9b00      	ldr	r3, [sp, #0]
 800708c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007090:	b292      	uxth	r2, r2
 8007092:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007096:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800709a:	f8bd 3000 	ldrh.w	r3, [sp]
 800709e:	4581      	cmp	r9, r0
 80070a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070a4:	f84c 3b04 	str.w	r3, [ip], #4
 80070a8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070ac:	d2db      	bcs.n	8007066 <quorem+0x42>
 80070ae:	f855 300b 	ldr.w	r3, [r5, fp]
 80070b2:	b92b      	cbnz	r3, 80070c0 <quorem+0x9c>
 80070b4:	9b01      	ldr	r3, [sp, #4]
 80070b6:	3b04      	subs	r3, #4
 80070b8:	429d      	cmp	r5, r3
 80070ba:	461a      	mov	r2, r3
 80070bc:	d32c      	bcc.n	8007118 <quorem+0xf4>
 80070be:	613c      	str	r4, [r7, #16]
 80070c0:	4638      	mov	r0, r7
 80070c2:	f001 f9f1 	bl	80084a8 <__mcmp>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	db22      	blt.n	8007110 <quorem+0xec>
 80070ca:	3601      	adds	r6, #1
 80070cc:	4629      	mov	r1, r5
 80070ce:	2000      	movs	r0, #0
 80070d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80070d4:	f8d1 c000 	ldr.w	ip, [r1]
 80070d8:	b293      	uxth	r3, r2
 80070da:	1ac3      	subs	r3, r0, r3
 80070dc:	0c12      	lsrs	r2, r2, #16
 80070de:	fa13 f38c 	uxtah	r3, r3, ip
 80070e2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80070e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070f0:	45c1      	cmp	r9, r8
 80070f2:	f841 3b04 	str.w	r3, [r1], #4
 80070f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80070fa:	d2e9      	bcs.n	80070d0 <quorem+0xac>
 80070fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007100:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007104:	b922      	cbnz	r2, 8007110 <quorem+0xec>
 8007106:	3b04      	subs	r3, #4
 8007108:	429d      	cmp	r5, r3
 800710a:	461a      	mov	r2, r3
 800710c:	d30a      	bcc.n	8007124 <quorem+0x100>
 800710e:	613c      	str	r4, [r7, #16]
 8007110:	4630      	mov	r0, r6
 8007112:	b003      	add	sp, #12
 8007114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007118:	6812      	ldr	r2, [r2, #0]
 800711a:	3b04      	subs	r3, #4
 800711c:	2a00      	cmp	r2, #0
 800711e:	d1ce      	bne.n	80070be <quorem+0x9a>
 8007120:	3c01      	subs	r4, #1
 8007122:	e7c9      	b.n	80070b8 <quorem+0x94>
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	3b04      	subs	r3, #4
 8007128:	2a00      	cmp	r2, #0
 800712a:	d1f0      	bne.n	800710e <quorem+0xea>
 800712c:	3c01      	subs	r4, #1
 800712e:	e7eb      	b.n	8007108 <quorem+0xe4>
 8007130:	2000      	movs	r0, #0
 8007132:	e7ee      	b.n	8007112 <quorem+0xee>
 8007134:	0000      	movs	r0, r0
	...

08007138 <_dtoa_r>:
 8007138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	ed2d 8b04 	vpush	{d8-d9}
 8007140:	69c5      	ldr	r5, [r0, #28]
 8007142:	b093      	sub	sp, #76	; 0x4c
 8007144:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007148:	ec57 6b10 	vmov	r6, r7, d0
 800714c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007150:	9107      	str	r1, [sp, #28]
 8007152:	4604      	mov	r4, r0
 8007154:	920a      	str	r2, [sp, #40]	; 0x28
 8007156:	930d      	str	r3, [sp, #52]	; 0x34
 8007158:	b975      	cbnz	r5, 8007178 <_dtoa_r+0x40>
 800715a:	2010      	movs	r0, #16
 800715c:	f000 fe2a 	bl	8007db4 <malloc>
 8007160:	4602      	mov	r2, r0
 8007162:	61e0      	str	r0, [r4, #28]
 8007164:	b920      	cbnz	r0, 8007170 <_dtoa_r+0x38>
 8007166:	4bae      	ldr	r3, [pc, #696]	; (8007420 <_dtoa_r+0x2e8>)
 8007168:	21ef      	movs	r1, #239	; 0xef
 800716a:	48ae      	ldr	r0, [pc, #696]	; (8007424 <_dtoa_r+0x2ec>)
 800716c:	f002 fc74 	bl	8009a58 <__assert_func>
 8007170:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007174:	6005      	str	r5, [r0, #0]
 8007176:	60c5      	str	r5, [r0, #12]
 8007178:	69e3      	ldr	r3, [r4, #28]
 800717a:	6819      	ldr	r1, [r3, #0]
 800717c:	b151      	cbz	r1, 8007194 <_dtoa_r+0x5c>
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	604a      	str	r2, [r1, #4]
 8007182:	2301      	movs	r3, #1
 8007184:	4093      	lsls	r3, r2
 8007186:	608b      	str	r3, [r1, #8]
 8007188:	4620      	mov	r0, r4
 800718a:	f000 ff07 	bl	8007f9c <_Bfree>
 800718e:	69e3      	ldr	r3, [r4, #28]
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	1e3b      	subs	r3, r7, #0
 8007196:	bfbb      	ittet	lt
 8007198:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800719c:	9303      	strlt	r3, [sp, #12]
 800719e:	2300      	movge	r3, #0
 80071a0:	2201      	movlt	r2, #1
 80071a2:	bfac      	ite	ge
 80071a4:	f8c8 3000 	strge.w	r3, [r8]
 80071a8:	f8c8 2000 	strlt.w	r2, [r8]
 80071ac:	4b9e      	ldr	r3, [pc, #632]	; (8007428 <_dtoa_r+0x2f0>)
 80071ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80071b2:	ea33 0308 	bics.w	r3, r3, r8
 80071b6:	d11b      	bne.n	80071f0 <_dtoa_r+0xb8>
 80071b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80071c4:	4333      	orrs	r3, r6
 80071c6:	f000 8593 	beq.w	8007cf0 <_dtoa_r+0xbb8>
 80071ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071cc:	b963      	cbnz	r3, 80071e8 <_dtoa_r+0xb0>
 80071ce:	4b97      	ldr	r3, [pc, #604]	; (800742c <_dtoa_r+0x2f4>)
 80071d0:	e027      	b.n	8007222 <_dtoa_r+0xea>
 80071d2:	4b97      	ldr	r3, [pc, #604]	; (8007430 <_dtoa_r+0x2f8>)
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	3308      	adds	r3, #8
 80071d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	9800      	ldr	r0, [sp, #0]
 80071de:	b013      	add	sp, #76	; 0x4c
 80071e0:	ecbd 8b04 	vpop	{d8-d9}
 80071e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e8:	4b90      	ldr	r3, [pc, #576]	; (800742c <_dtoa_r+0x2f4>)
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	3303      	adds	r3, #3
 80071ee:	e7f3      	b.n	80071d8 <_dtoa_r+0xa0>
 80071f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071f4:	2200      	movs	r2, #0
 80071f6:	ec51 0b17 	vmov	r0, r1, d7
 80071fa:	eeb0 8a47 	vmov.f32	s16, s14
 80071fe:	eef0 8a67 	vmov.f32	s17, s15
 8007202:	2300      	movs	r3, #0
 8007204:	f7f9 fc78 	bl	8000af8 <__aeabi_dcmpeq>
 8007208:	4681      	mov	r9, r0
 800720a:	b160      	cbz	r0, 8007226 <_dtoa_r+0xee>
 800720c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800720e:	2301      	movs	r3, #1
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 8568 	beq.w	8007cea <_dtoa_r+0xbb2>
 800721a:	4b86      	ldr	r3, [pc, #536]	; (8007434 <_dtoa_r+0x2fc>)
 800721c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	3b01      	subs	r3, #1
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	e7da      	b.n	80071dc <_dtoa_r+0xa4>
 8007226:	aa10      	add	r2, sp, #64	; 0x40
 8007228:	a911      	add	r1, sp, #68	; 0x44
 800722a:	4620      	mov	r0, r4
 800722c:	eeb0 0a48 	vmov.f32	s0, s16
 8007230:	eef0 0a68 	vmov.f32	s1, s17
 8007234:	f001 fa4e 	bl	80086d4 <__d2b>
 8007238:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800723c:	4682      	mov	sl, r0
 800723e:	2d00      	cmp	r5, #0
 8007240:	d07f      	beq.n	8007342 <_dtoa_r+0x20a>
 8007242:	ee18 3a90 	vmov	r3, s17
 8007246:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800724a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800724e:	ec51 0b18 	vmov	r0, r1, d8
 8007252:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800725a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800725e:	4619      	mov	r1, r3
 8007260:	2200      	movs	r2, #0
 8007262:	4b75      	ldr	r3, [pc, #468]	; (8007438 <_dtoa_r+0x300>)
 8007264:	f7f9 f828 	bl	80002b8 <__aeabi_dsub>
 8007268:	a367      	add	r3, pc, #412	; (adr r3, 8007408 <_dtoa_r+0x2d0>)
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	f7f9 f9db 	bl	8000628 <__aeabi_dmul>
 8007272:	a367      	add	r3, pc, #412	; (adr r3, 8007410 <_dtoa_r+0x2d8>)
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f7f9 f820 	bl	80002bc <__adddf3>
 800727c:	4606      	mov	r6, r0
 800727e:	4628      	mov	r0, r5
 8007280:	460f      	mov	r7, r1
 8007282:	f7f9 f967 	bl	8000554 <__aeabi_i2d>
 8007286:	a364      	add	r3, pc, #400	; (adr r3, 8007418 <_dtoa_r+0x2e0>)
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	f7f9 f9cc 	bl	8000628 <__aeabi_dmul>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4630      	mov	r0, r6
 8007296:	4639      	mov	r1, r7
 8007298:	f7f9 f810 	bl	80002bc <__adddf3>
 800729c:	4606      	mov	r6, r0
 800729e:	460f      	mov	r7, r1
 80072a0:	f7f9 fc72 	bl	8000b88 <__aeabi_d2iz>
 80072a4:	2200      	movs	r2, #0
 80072a6:	4683      	mov	fp, r0
 80072a8:	2300      	movs	r3, #0
 80072aa:	4630      	mov	r0, r6
 80072ac:	4639      	mov	r1, r7
 80072ae:	f7f9 fc2d 	bl	8000b0c <__aeabi_dcmplt>
 80072b2:	b148      	cbz	r0, 80072c8 <_dtoa_r+0x190>
 80072b4:	4658      	mov	r0, fp
 80072b6:	f7f9 f94d 	bl	8000554 <__aeabi_i2d>
 80072ba:	4632      	mov	r2, r6
 80072bc:	463b      	mov	r3, r7
 80072be:	f7f9 fc1b 	bl	8000af8 <__aeabi_dcmpeq>
 80072c2:	b908      	cbnz	r0, 80072c8 <_dtoa_r+0x190>
 80072c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072c8:	f1bb 0f16 	cmp.w	fp, #22
 80072cc:	d857      	bhi.n	800737e <_dtoa_r+0x246>
 80072ce:	4b5b      	ldr	r3, [pc, #364]	; (800743c <_dtoa_r+0x304>)
 80072d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	ec51 0b18 	vmov	r0, r1, d8
 80072dc:	f7f9 fc16 	bl	8000b0c <__aeabi_dcmplt>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d04e      	beq.n	8007382 <_dtoa_r+0x24a>
 80072e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072e8:	2300      	movs	r3, #0
 80072ea:	930c      	str	r3, [sp, #48]	; 0x30
 80072ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072ee:	1b5b      	subs	r3, r3, r5
 80072f0:	1e5a      	subs	r2, r3, #1
 80072f2:	bf45      	ittet	mi
 80072f4:	f1c3 0301 	rsbmi	r3, r3, #1
 80072f8:	9305      	strmi	r3, [sp, #20]
 80072fa:	2300      	movpl	r3, #0
 80072fc:	2300      	movmi	r3, #0
 80072fe:	9206      	str	r2, [sp, #24]
 8007300:	bf54      	ite	pl
 8007302:	9305      	strpl	r3, [sp, #20]
 8007304:	9306      	strmi	r3, [sp, #24]
 8007306:	f1bb 0f00 	cmp.w	fp, #0
 800730a:	db3c      	blt.n	8007386 <_dtoa_r+0x24e>
 800730c:	9b06      	ldr	r3, [sp, #24]
 800730e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007312:	445b      	add	r3, fp
 8007314:	9306      	str	r3, [sp, #24]
 8007316:	2300      	movs	r3, #0
 8007318:	9308      	str	r3, [sp, #32]
 800731a:	9b07      	ldr	r3, [sp, #28]
 800731c:	2b09      	cmp	r3, #9
 800731e:	d868      	bhi.n	80073f2 <_dtoa_r+0x2ba>
 8007320:	2b05      	cmp	r3, #5
 8007322:	bfc4      	itt	gt
 8007324:	3b04      	subgt	r3, #4
 8007326:	9307      	strgt	r3, [sp, #28]
 8007328:	9b07      	ldr	r3, [sp, #28]
 800732a:	f1a3 0302 	sub.w	r3, r3, #2
 800732e:	bfcc      	ite	gt
 8007330:	2500      	movgt	r5, #0
 8007332:	2501      	movle	r5, #1
 8007334:	2b03      	cmp	r3, #3
 8007336:	f200 8085 	bhi.w	8007444 <_dtoa_r+0x30c>
 800733a:	e8df f003 	tbb	[pc, r3]
 800733e:	3b2e      	.short	0x3b2e
 8007340:	5839      	.short	0x5839
 8007342:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007346:	441d      	add	r5, r3
 8007348:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800734c:	2b20      	cmp	r3, #32
 800734e:	bfc1      	itttt	gt
 8007350:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007354:	fa08 f803 	lslgt.w	r8, r8, r3
 8007358:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800735c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007360:	bfd6      	itet	le
 8007362:	f1c3 0320 	rsble	r3, r3, #32
 8007366:	ea48 0003 	orrgt.w	r0, r8, r3
 800736a:	fa06 f003 	lslle.w	r0, r6, r3
 800736e:	f7f9 f8e1 	bl	8000534 <__aeabi_ui2d>
 8007372:	2201      	movs	r2, #1
 8007374:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007378:	3d01      	subs	r5, #1
 800737a:	920e      	str	r2, [sp, #56]	; 0x38
 800737c:	e76f      	b.n	800725e <_dtoa_r+0x126>
 800737e:	2301      	movs	r3, #1
 8007380:	e7b3      	b.n	80072ea <_dtoa_r+0x1b2>
 8007382:	900c      	str	r0, [sp, #48]	; 0x30
 8007384:	e7b2      	b.n	80072ec <_dtoa_r+0x1b4>
 8007386:	9b05      	ldr	r3, [sp, #20]
 8007388:	eba3 030b 	sub.w	r3, r3, fp
 800738c:	9305      	str	r3, [sp, #20]
 800738e:	f1cb 0300 	rsb	r3, fp, #0
 8007392:	9308      	str	r3, [sp, #32]
 8007394:	2300      	movs	r3, #0
 8007396:	930b      	str	r3, [sp, #44]	; 0x2c
 8007398:	e7bf      	b.n	800731a <_dtoa_r+0x1e2>
 800739a:	2300      	movs	r3, #0
 800739c:	9309      	str	r3, [sp, #36]	; 0x24
 800739e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	dc52      	bgt.n	800744a <_dtoa_r+0x312>
 80073a4:	2301      	movs	r3, #1
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	461a      	mov	r2, r3
 80073ac:	920a      	str	r2, [sp, #40]	; 0x28
 80073ae:	e00b      	b.n	80073c8 <_dtoa_r+0x290>
 80073b0:	2301      	movs	r3, #1
 80073b2:	e7f3      	b.n	800739c <_dtoa_r+0x264>
 80073b4:	2300      	movs	r3, #0
 80073b6:	9309      	str	r3, [sp, #36]	; 0x24
 80073b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ba:	445b      	add	r3, fp
 80073bc:	9301      	str	r3, [sp, #4]
 80073be:	3301      	adds	r3, #1
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	9304      	str	r3, [sp, #16]
 80073c4:	bfb8      	it	lt
 80073c6:	2301      	movlt	r3, #1
 80073c8:	69e0      	ldr	r0, [r4, #28]
 80073ca:	2100      	movs	r1, #0
 80073cc:	2204      	movs	r2, #4
 80073ce:	f102 0614 	add.w	r6, r2, #20
 80073d2:	429e      	cmp	r6, r3
 80073d4:	d93d      	bls.n	8007452 <_dtoa_r+0x31a>
 80073d6:	6041      	str	r1, [r0, #4]
 80073d8:	4620      	mov	r0, r4
 80073da:	f000 fd9f 	bl	8007f1c <_Balloc>
 80073de:	9000      	str	r0, [sp, #0]
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d139      	bne.n	8007458 <_dtoa_r+0x320>
 80073e4:	4b16      	ldr	r3, [pc, #88]	; (8007440 <_dtoa_r+0x308>)
 80073e6:	4602      	mov	r2, r0
 80073e8:	f240 11af 	movw	r1, #431	; 0x1af
 80073ec:	e6bd      	b.n	800716a <_dtoa_r+0x32>
 80073ee:	2301      	movs	r3, #1
 80073f0:	e7e1      	b.n	80073b6 <_dtoa_r+0x27e>
 80073f2:	2501      	movs	r5, #1
 80073f4:	2300      	movs	r3, #0
 80073f6:	9307      	str	r3, [sp, #28]
 80073f8:	9509      	str	r5, [sp, #36]	; 0x24
 80073fa:	f04f 33ff 	mov.w	r3, #4294967295
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	9304      	str	r3, [sp, #16]
 8007402:	2200      	movs	r2, #0
 8007404:	2312      	movs	r3, #18
 8007406:	e7d1      	b.n	80073ac <_dtoa_r+0x274>
 8007408:	636f4361 	.word	0x636f4361
 800740c:	3fd287a7 	.word	0x3fd287a7
 8007410:	8b60c8b3 	.word	0x8b60c8b3
 8007414:	3fc68a28 	.word	0x3fc68a28
 8007418:	509f79fb 	.word	0x509f79fb
 800741c:	3fd34413 	.word	0x3fd34413
 8007420:	0800ac4e 	.word	0x0800ac4e
 8007424:	0800ac65 	.word	0x0800ac65
 8007428:	7ff00000 	.word	0x7ff00000
 800742c:	0800ac4a 	.word	0x0800ac4a
 8007430:	0800ac41 	.word	0x0800ac41
 8007434:	0800ac19 	.word	0x0800ac19
 8007438:	3ff80000 	.word	0x3ff80000
 800743c:	0800ad50 	.word	0x0800ad50
 8007440:	0800acbd 	.word	0x0800acbd
 8007444:	2301      	movs	r3, #1
 8007446:	9309      	str	r3, [sp, #36]	; 0x24
 8007448:	e7d7      	b.n	80073fa <_dtoa_r+0x2c2>
 800744a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	9304      	str	r3, [sp, #16]
 8007450:	e7ba      	b.n	80073c8 <_dtoa_r+0x290>
 8007452:	3101      	adds	r1, #1
 8007454:	0052      	lsls	r2, r2, #1
 8007456:	e7ba      	b.n	80073ce <_dtoa_r+0x296>
 8007458:	69e3      	ldr	r3, [r4, #28]
 800745a:	9a00      	ldr	r2, [sp, #0]
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	9b04      	ldr	r3, [sp, #16]
 8007460:	2b0e      	cmp	r3, #14
 8007462:	f200 80a8 	bhi.w	80075b6 <_dtoa_r+0x47e>
 8007466:	2d00      	cmp	r5, #0
 8007468:	f000 80a5 	beq.w	80075b6 <_dtoa_r+0x47e>
 800746c:	f1bb 0f00 	cmp.w	fp, #0
 8007470:	dd38      	ble.n	80074e4 <_dtoa_r+0x3ac>
 8007472:	4bc0      	ldr	r3, [pc, #768]	; (8007774 <_dtoa_r+0x63c>)
 8007474:	f00b 020f 	and.w	r2, fp, #15
 8007478:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800747c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007480:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007484:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007488:	d019      	beq.n	80074be <_dtoa_r+0x386>
 800748a:	4bbb      	ldr	r3, [pc, #748]	; (8007778 <_dtoa_r+0x640>)
 800748c:	ec51 0b18 	vmov	r0, r1, d8
 8007490:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007494:	f7f9 f9f2 	bl	800087c <__aeabi_ddiv>
 8007498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800749c:	f008 080f 	and.w	r8, r8, #15
 80074a0:	2503      	movs	r5, #3
 80074a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007778 <_dtoa_r+0x640>
 80074a6:	f1b8 0f00 	cmp.w	r8, #0
 80074aa:	d10a      	bne.n	80074c2 <_dtoa_r+0x38a>
 80074ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074b0:	4632      	mov	r2, r6
 80074b2:	463b      	mov	r3, r7
 80074b4:	f7f9 f9e2 	bl	800087c <__aeabi_ddiv>
 80074b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074bc:	e02b      	b.n	8007516 <_dtoa_r+0x3de>
 80074be:	2502      	movs	r5, #2
 80074c0:	e7ef      	b.n	80074a2 <_dtoa_r+0x36a>
 80074c2:	f018 0f01 	tst.w	r8, #1
 80074c6:	d008      	beq.n	80074da <_dtoa_r+0x3a2>
 80074c8:	4630      	mov	r0, r6
 80074ca:	4639      	mov	r1, r7
 80074cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80074d0:	f7f9 f8aa 	bl	8000628 <__aeabi_dmul>
 80074d4:	3501      	adds	r5, #1
 80074d6:	4606      	mov	r6, r0
 80074d8:	460f      	mov	r7, r1
 80074da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80074de:	f109 0908 	add.w	r9, r9, #8
 80074e2:	e7e0      	b.n	80074a6 <_dtoa_r+0x36e>
 80074e4:	f000 809f 	beq.w	8007626 <_dtoa_r+0x4ee>
 80074e8:	f1cb 0600 	rsb	r6, fp, #0
 80074ec:	4ba1      	ldr	r3, [pc, #644]	; (8007774 <_dtoa_r+0x63c>)
 80074ee:	4fa2      	ldr	r7, [pc, #648]	; (8007778 <_dtoa_r+0x640>)
 80074f0:	f006 020f 	and.w	r2, r6, #15
 80074f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	ec51 0b18 	vmov	r0, r1, d8
 8007500:	f7f9 f892 	bl	8000628 <__aeabi_dmul>
 8007504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007508:	1136      	asrs	r6, r6, #4
 800750a:	2300      	movs	r3, #0
 800750c:	2502      	movs	r5, #2
 800750e:	2e00      	cmp	r6, #0
 8007510:	d17e      	bne.n	8007610 <_dtoa_r+0x4d8>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1d0      	bne.n	80074b8 <_dtoa_r+0x380>
 8007516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007518:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 8084 	beq.w	800762a <_dtoa_r+0x4f2>
 8007522:	4b96      	ldr	r3, [pc, #600]	; (800777c <_dtoa_r+0x644>)
 8007524:	2200      	movs	r2, #0
 8007526:	4640      	mov	r0, r8
 8007528:	4649      	mov	r1, r9
 800752a:	f7f9 faef 	bl	8000b0c <__aeabi_dcmplt>
 800752e:	2800      	cmp	r0, #0
 8007530:	d07b      	beq.n	800762a <_dtoa_r+0x4f2>
 8007532:	9b04      	ldr	r3, [sp, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d078      	beq.n	800762a <_dtoa_r+0x4f2>
 8007538:	9b01      	ldr	r3, [sp, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	dd39      	ble.n	80075b2 <_dtoa_r+0x47a>
 800753e:	4b90      	ldr	r3, [pc, #576]	; (8007780 <_dtoa_r+0x648>)
 8007540:	2200      	movs	r2, #0
 8007542:	4640      	mov	r0, r8
 8007544:	4649      	mov	r1, r9
 8007546:	f7f9 f86f 	bl	8000628 <__aeabi_dmul>
 800754a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800754e:	9e01      	ldr	r6, [sp, #4]
 8007550:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007554:	3501      	adds	r5, #1
 8007556:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800755a:	4628      	mov	r0, r5
 800755c:	f7f8 fffa 	bl	8000554 <__aeabi_i2d>
 8007560:	4642      	mov	r2, r8
 8007562:	464b      	mov	r3, r9
 8007564:	f7f9 f860 	bl	8000628 <__aeabi_dmul>
 8007568:	4b86      	ldr	r3, [pc, #536]	; (8007784 <_dtoa_r+0x64c>)
 800756a:	2200      	movs	r2, #0
 800756c:	f7f8 fea6 	bl	80002bc <__adddf3>
 8007570:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007578:	9303      	str	r3, [sp, #12]
 800757a:	2e00      	cmp	r6, #0
 800757c:	d158      	bne.n	8007630 <_dtoa_r+0x4f8>
 800757e:	4b82      	ldr	r3, [pc, #520]	; (8007788 <_dtoa_r+0x650>)
 8007580:	2200      	movs	r2, #0
 8007582:	4640      	mov	r0, r8
 8007584:	4649      	mov	r1, r9
 8007586:	f7f8 fe97 	bl	80002b8 <__aeabi_dsub>
 800758a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800758e:	4680      	mov	r8, r0
 8007590:	4689      	mov	r9, r1
 8007592:	f7f9 fad9 	bl	8000b48 <__aeabi_dcmpgt>
 8007596:	2800      	cmp	r0, #0
 8007598:	f040 8296 	bne.w	8007ac8 <_dtoa_r+0x990>
 800759c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80075a0:	4640      	mov	r0, r8
 80075a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075a6:	4649      	mov	r1, r9
 80075a8:	f7f9 fab0 	bl	8000b0c <__aeabi_dcmplt>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	f040 8289 	bne.w	8007ac4 <_dtoa_r+0x98c>
 80075b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80075b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f2c0 814e 	blt.w	800785a <_dtoa_r+0x722>
 80075be:	f1bb 0f0e 	cmp.w	fp, #14
 80075c2:	f300 814a 	bgt.w	800785a <_dtoa_r+0x722>
 80075c6:	4b6b      	ldr	r3, [pc, #428]	; (8007774 <_dtoa_r+0x63c>)
 80075c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f280 80dc 	bge.w	8007790 <_dtoa_r+0x658>
 80075d8:	9b04      	ldr	r3, [sp, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f300 80d8 	bgt.w	8007790 <_dtoa_r+0x658>
 80075e0:	f040 826f 	bne.w	8007ac2 <_dtoa_r+0x98a>
 80075e4:	4b68      	ldr	r3, [pc, #416]	; (8007788 <_dtoa_r+0x650>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	4640      	mov	r0, r8
 80075ea:	4649      	mov	r1, r9
 80075ec:	f7f9 f81c 	bl	8000628 <__aeabi_dmul>
 80075f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075f4:	f7f9 fa9e 	bl	8000b34 <__aeabi_dcmpge>
 80075f8:	9e04      	ldr	r6, [sp, #16]
 80075fa:	4637      	mov	r7, r6
 80075fc:	2800      	cmp	r0, #0
 80075fe:	f040 8245 	bne.w	8007a8c <_dtoa_r+0x954>
 8007602:	9d00      	ldr	r5, [sp, #0]
 8007604:	2331      	movs	r3, #49	; 0x31
 8007606:	f805 3b01 	strb.w	r3, [r5], #1
 800760a:	f10b 0b01 	add.w	fp, fp, #1
 800760e:	e241      	b.n	8007a94 <_dtoa_r+0x95c>
 8007610:	07f2      	lsls	r2, r6, #31
 8007612:	d505      	bpl.n	8007620 <_dtoa_r+0x4e8>
 8007614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007618:	f7f9 f806 	bl	8000628 <__aeabi_dmul>
 800761c:	3501      	adds	r5, #1
 800761e:	2301      	movs	r3, #1
 8007620:	1076      	asrs	r6, r6, #1
 8007622:	3708      	adds	r7, #8
 8007624:	e773      	b.n	800750e <_dtoa_r+0x3d6>
 8007626:	2502      	movs	r5, #2
 8007628:	e775      	b.n	8007516 <_dtoa_r+0x3de>
 800762a:	9e04      	ldr	r6, [sp, #16]
 800762c:	465f      	mov	r7, fp
 800762e:	e792      	b.n	8007556 <_dtoa_r+0x41e>
 8007630:	9900      	ldr	r1, [sp, #0]
 8007632:	4b50      	ldr	r3, [pc, #320]	; (8007774 <_dtoa_r+0x63c>)
 8007634:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007638:	4431      	add	r1, r6
 800763a:	9102      	str	r1, [sp, #8]
 800763c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800763e:	eeb0 9a47 	vmov.f32	s18, s14
 8007642:	eef0 9a67 	vmov.f32	s19, s15
 8007646:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800764a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800764e:	2900      	cmp	r1, #0
 8007650:	d044      	beq.n	80076dc <_dtoa_r+0x5a4>
 8007652:	494e      	ldr	r1, [pc, #312]	; (800778c <_dtoa_r+0x654>)
 8007654:	2000      	movs	r0, #0
 8007656:	f7f9 f911 	bl	800087c <__aeabi_ddiv>
 800765a:	ec53 2b19 	vmov	r2, r3, d9
 800765e:	f7f8 fe2b 	bl	80002b8 <__aeabi_dsub>
 8007662:	9d00      	ldr	r5, [sp, #0]
 8007664:	ec41 0b19 	vmov	d9, r0, r1
 8007668:	4649      	mov	r1, r9
 800766a:	4640      	mov	r0, r8
 800766c:	f7f9 fa8c 	bl	8000b88 <__aeabi_d2iz>
 8007670:	4606      	mov	r6, r0
 8007672:	f7f8 ff6f 	bl	8000554 <__aeabi_i2d>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4640      	mov	r0, r8
 800767c:	4649      	mov	r1, r9
 800767e:	f7f8 fe1b 	bl	80002b8 <__aeabi_dsub>
 8007682:	3630      	adds	r6, #48	; 0x30
 8007684:	f805 6b01 	strb.w	r6, [r5], #1
 8007688:	ec53 2b19 	vmov	r2, r3, d9
 800768c:	4680      	mov	r8, r0
 800768e:	4689      	mov	r9, r1
 8007690:	f7f9 fa3c 	bl	8000b0c <__aeabi_dcmplt>
 8007694:	2800      	cmp	r0, #0
 8007696:	d164      	bne.n	8007762 <_dtoa_r+0x62a>
 8007698:	4642      	mov	r2, r8
 800769a:	464b      	mov	r3, r9
 800769c:	4937      	ldr	r1, [pc, #220]	; (800777c <_dtoa_r+0x644>)
 800769e:	2000      	movs	r0, #0
 80076a0:	f7f8 fe0a 	bl	80002b8 <__aeabi_dsub>
 80076a4:	ec53 2b19 	vmov	r2, r3, d9
 80076a8:	f7f9 fa30 	bl	8000b0c <__aeabi_dcmplt>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	f040 80b6 	bne.w	800781e <_dtoa_r+0x6e6>
 80076b2:	9b02      	ldr	r3, [sp, #8]
 80076b4:	429d      	cmp	r5, r3
 80076b6:	f43f af7c 	beq.w	80075b2 <_dtoa_r+0x47a>
 80076ba:	4b31      	ldr	r3, [pc, #196]	; (8007780 <_dtoa_r+0x648>)
 80076bc:	ec51 0b19 	vmov	r0, r1, d9
 80076c0:	2200      	movs	r2, #0
 80076c2:	f7f8 ffb1 	bl	8000628 <__aeabi_dmul>
 80076c6:	4b2e      	ldr	r3, [pc, #184]	; (8007780 <_dtoa_r+0x648>)
 80076c8:	ec41 0b19 	vmov	d9, r0, r1
 80076cc:	2200      	movs	r2, #0
 80076ce:	4640      	mov	r0, r8
 80076d0:	4649      	mov	r1, r9
 80076d2:	f7f8 ffa9 	bl	8000628 <__aeabi_dmul>
 80076d6:	4680      	mov	r8, r0
 80076d8:	4689      	mov	r9, r1
 80076da:	e7c5      	b.n	8007668 <_dtoa_r+0x530>
 80076dc:	ec51 0b17 	vmov	r0, r1, d7
 80076e0:	f7f8 ffa2 	bl	8000628 <__aeabi_dmul>
 80076e4:	9b02      	ldr	r3, [sp, #8]
 80076e6:	9d00      	ldr	r5, [sp, #0]
 80076e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80076ea:	ec41 0b19 	vmov	d9, r0, r1
 80076ee:	4649      	mov	r1, r9
 80076f0:	4640      	mov	r0, r8
 80076f2:	f7f9 fa49 	bl	8000b88 <__aeabi_d2iz>
 80076f6:	4606      	mov	r6, r0
 80076f8:	f7f8 ff2c 	bl	8000554 <__aeabi_i2d>
 80076fc:	3630      	adds	r6, #48	; 0x30
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	4640      	mov	r0, r8
 8007704:	4649      	mov	r1, r9
 8007706:	f7f8 fdd7 	bl	80002b8 <__aeabi_dsub>
 800770a:	f805 6b01 	strb.w	r6, [r5], #1
 800770e:	9b02      	ldr	r3, [sp, #8]
 8007710:	429d      	cmp	r5, r3
 8007712:	4680      	mov	r8, r0
 8007714:	4689      	mov	r9, r1
 8007716:	f04f 0200 	mov.w	r2, #0
 800771a:	d124      	bne.n	8007766 <_dtoa_r+0x62e>
 800771c:	4b1b      	ldr	r3, [pc, #108]	; (800778c <_dtoa_r+0x654>)
 800771e:	ec51 0b19 	vmov	r0, r1, d9
 8007722:	f7f8 fdcb 	bl	80002bc <__adddf3>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4640      	mov	r0, r8
 800772c:	4649      	mov	r1, r9
 800772e:	f7f9 fa0b 	bl	8000b48 <__aeabi_dcmpgt>
 8007732:	2800      	cmp	r0, #0
 8007734:	d173      	bne.n	800781e <_dtoa_r+0x6e6>
 8007736:	ec53 2b19 	vmov	r2, r3, d9
 800773a:	4914      	ldr	r1, [pc, #80]	; (800778c <_dtoa_r+0x654>)
 800773c:	2000      	movs	r0, #0
 800773e:	f7f8 fdbb 	bl	80002b8 <__aeabi_dsub>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4640      	mov	r0, r8
 8007748:	4649      	mov	r1, r9
 800774a:	f7f9 f9df 	bl	8000b0c <__aeabi_dcmplt>
 800774e:	2800      	cmp	r0, #0
 8007750:	f43f af2f 	beq.w	80075b2 <_dtoa_r+0x47a>
 8007754:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007756:	1e6b      	subs	r3, r5, #1
 8007758:	930f      	str	r3, [sp, #60]	; 0x3c
 800775a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800775e:	2b30      	cmp	r3, #48	; 0x30
 8007760:	d0f8      	beq.n	8007754 <_dtoa_r+0x61c>
 8007762:	46bb      	mov	fp, r7
 8007764:	e04a      	b.n	80077fc <_dtoa_r+0x6c4>
 8007766:	4b06      	ldr	r3, [pc, #24]	; (8007780 <_dtoa_r+0x648>)
 8007768:	f7f8 ff5e 	bl	8000628 <__aeabi_dmul>
 800776c:	4680      	mov	r8, r0
 800776e:	4689      	mov	r9, r1
 8007770:	e7bd      	b.n	80076ee <_dtoa_r+0x5b6>
 8007772:	bf00      	nop
 8007774:	0800ad50 	.word	0x0800ad50
 8007778:	0800ad28 	.word	0x0800ad28
 800777c:	3ff00000 	.word	0x3ff00000
 8007780:	40240000 	.word	0x40240000
 8007784:	401c0000 	.word	0x401c0000
 8007788:	40140000 	.word	0x40140000
 800778c:	3fe00000 	.word	0x3fe00000
 8007790:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007794:	9d00      	ldr	r5, [sp, #0]
 8007796:	4642      	mov	r2, r8
 8007798:	464b      	mov	r3, r9
 800779a:	4630      	mov	r0, r6
 800779c:	4639      	mov	r1, r7
 800779e:	f7f9 f86d 	bl	800087c <__aeabi_ddiv>
 80077a2:	f7f9 f9f1 	bl	8000b88 <__aeabi_d2iz>
 80077a6:	9001      	str	r0, [sp, #4]
 80077a8:	f7f8 fed4 	bl	8000554 <__aeabi_i2d>
 80077ac:	4642      	mov	r2, r8
 80077ae:	464b      	mov	r3, r9
 80077b0:	f7f8 ff3a 	bl	8000628 <__aeabi_dmul>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4630      	mov	r0, r6
 80077ba:	4639      	mov	r1, r7
 80077bc:	f7f8 fd7c 	bl	80002b8 <__aeabi_dsub>
 80077c0:	9e01      	ldr	r6, [sp, #4]
 80077c2:	9f04      	ldr	r7, [sp, #16]
 80077c4:	3630      	adds	r6, #48	; 0x30
 80077c6:	f805 6b01 	strb.w	r6, [r5], #1
 80077ca:	9e00      	ldr	r6, [sp, #0]
 80077cc:	1bae      	subs	r6, r5, r6
 80077ce:	42b7      	cmp	r7, r6
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	d134      	bne.n	8007840 <_dtoa_r+0x708>
 80077d6:	f7f8 fd71 	bl	80002bc <__adddf3>
 80077da:	4642      	mov	r2, r8
 80077dc:	464b      	mov	r3, r9
 80077de:	4606      	mov	r6, r0
 80077e0:	460f      	mov	r7, r1
 80077e2:	f7f9 f9b1 	bl	8000b48 <__aeabi_dcmpgt>
 80077e6:	b9c8      	cbnz	r0, 800781c <_dtoa_r+0x6e4>
 80077e8:	4642      	mov	r2, r8
 80077ea:	464b      	mov	r3, r9
 80077ec:	4630      	mov	r0, r6
 80077ee:	4639      	mov	r1, r7
 80077f0:	f7f9 f982 	bl	8000af8 <__aeabi_dcmpeq>
 80077f4:	b110      	cbz	r0, 80077fc <_dtoa_r+0x6c4>
 80077f6:	9b01      	ldr	r3, [sp, #4]
 80077f8:	07db      	lsls	r3, r3, #31
 80077fa:	d40f      	bmi.n	800781c <_dtoa_r+0x6e4>
 80077fc:	4651      	mov	r1, sl
 80077fe:	4620      	mov	r0, r4
 8007800:	f000 fbcc 	bl	8007f9c <_Bfree>
 8007804:	2300      	movs	r3, #0
 8007806:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007808:	702b      	strb	r3, [r5, #0]
 800780a:	f10b 0301 	add.w	r3, fp, #1
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007812:	2b00      	cmp	r3, #0
 8007814:	f43f ace2 	beq.w	80071dc <_dtoa_r+0xa4>
 8007818:	601d      	str	r5, [r3, #0]
 800781a:	e4df      	b.n	80071dc <_dtoa_r+0xa4>
 800781c:	465f      	mov	r7, fp
 800781e:	462b      	mov	r3, r5
 8007820:	461d      	mov	r5, r3
 8007822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007826:	2a39      	cmp	r2, #57	; 0x39
 8007828:	d106      	bne.n	8007838 <_dtoa_r+0x700>
 800782a:	9a00      	ldr	r2, [sp, #0]
 800782c:	429a      	cmp	r2, r3
 800782e:	d1f7      	bne.n	8007820 <_dtoa_r+0x6e8>
 8007830:	9900      	ldr	r1, [sp, #0]
 8007832:	2230      	movs	r2, #48	; 0x30
 8007834:	3701      	adds	r7, #1
 8007836:	700a      	strb	r2, [r1, #0]
 8007838:	781a      	ldrb	r2, [r3, #0]
 800783a:	3201      	adds	r2, #1
 800783c:	701a      	strb	r2, [r3, #0]
 800783e:	e790      	b.n	8007762 <_dtoa_r+0x62a>
 8007840:	4ba3      	ldr	r3, [pc, #652]	; (8007ad0 <_dtoa_r+0x998>)
 8007842:	2200      	movs	r2, #0
 8007844:	f7f8 fef0 	bl	8000628 <__aeabi_dmul>
 8007848:	2200      	movs	r2, #0
 800784a:	2300      	movs	r3, #0
 800784c:	4606      	mov	r6, r0
 800784e:	460f      	mov	r7, r1
 8007850:	f7f9 f952 	bl	8000af8 <__aeabi_dcmpeq>
 8007854:	2800      	cmp	r0, #0
 8007856:	d09e      	beq.n	8007796 <_dtoa_r+0x65e>
 8007858:	e7d0      	b.n	80077fc <_dtoa_r+0x6c4>
 800785a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800785c:	2a00      	cmp	r2, #0
 800785e:	f000 80ca 	beq.w	80079f6 <_dtoa_r+0x8be>
 8007862:	9a07      	ldr	r2, [sp, #28]
 8007864:	2a01      	cmp	r2, #1
 8007866:	f300 80ad 	bgt.w	80079c4 <_dtoa_r+0x88c>
 800786a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800786c:	2a00      	cmp	r2, #0
 800786e:	f000 80a5 	beq.w	80079bc <_dtoa_r+0x884>
 8007872:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007876:	9e08      	ldr	r6, [sp, #32]
 8007878:	9d05      	ldr	r5, [sp, #20]
 800787a:	9a05      	ldr	r2, [sp, #20]
 800787c:	441a      	add	r2, r3
 800787e:	9205      	str	r2, [sp, #20]
 8007880:	9a06      	ldr	r2, [sp, #24]
 8007882:	2101      	movs	r1, #1
 8007884:	441a      	add	r2, r3
 8007886:	4620      	mov	r0, r4
 8007888:	9206      	str	r2, [sp, #24]
 800788a:	f000 fc87 	bl	800819c <__i2b>
 800788e:	4607      	mov	r7, r0
 8007890:	b165      	cbz	r5, 80078ac <_dtoa_r+0x774>
 8007892:	9b06      	ldr	r3, [sp, #24]
 8007894:	2b00      	cmp	r3, #0
 8007896:	dd09      	ble.n	80078ac <_dtoa_r+0x774>
 8007898:	42ab      	cmp	r3, r5
 800789a:	9a05      	ldr	r2, [sp, #20]
 800789c:	bfa8      	it	ge
 800789e:	462b      	movge	r3, r5
 80078a0:	1ad2      	subs	r2, r2, r3
 80078a2:	9205      	str	r2, [sp, #20]
 80078a4:	9a06      	ldr	r2, [sp, #24]
 80078a6:	1aed      	subs	r5, r5, r3
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	9306      	str	r3, [sp, #24]
 80078ac:	9b08      	ldr	r3, [sp, #32]
 80078ae:	b1f3      	cbz	r3, 80078ee <_dtoa_r+0x7b6>
 80078b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 80a3 	beq.w	80079fe <_dtoa_r+0x8c6>
 80078b8:	2e00      	cmp	r6, #0
 80078ba:	dd10      	ble.n	80078de <_dtoa_r+0x7a6>
 80078bc:	4639      	mov	r1, r7
 80078be:	4632      	mov	r2, r6
 80078c0:	4620      	mov	r0, r4
 80078c2:	f000 fd2b 	bl	800831c <__pow5mult>
 80078c6:	4652      	mov	r2, sl
 80078c8:	4601      	mov	r1, r0
 80078ca:	4607      	mov	r7, r0
 80078cc:	4620      	mov	r0, r4
 80078ce:	f000 fc7b 	bl	80081c8 <__multiply>
 80078d2:	4651      	mov	r1, sl
 80078d4:	4680      	mov	r8, r0
 80078d6:	4620      	mov	r0, r4
 80078d8:	f000 fb60 	bl	8007f9c <_Bfree>
 80078dc:	46c2      	mov	sl, r8
 80078de:	9b08      	ldr	r3, [sp, #32]
 80078e0:	1b9a      	subs	r2, r3, r6
 80078e2:	d004      	beq.n	80078ee <_dtoa_r+0x7b6>
 80078e4:	4651      	mov	r1, sl
 80078e6:	4620      	mov	r0, r4
 80078e8:	f000 fd18 	bl	800831c <__pow5mult>
 80078ec:	4682      	mov	sl, r0
 80078ee:	2101      	movs	r1, #1
 80078f0:	4620      	mov	r0, r4
 80078f2:	f000 fc53 	bl	800819c <__i2b>
 80078f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	4606      	mov	r6, r0
 80078fc:	f340 8081 	ble.w	8007a02 <_dtoa_r+0x8ca>
 8007900:	461a      	mov	r2, r3
 8007902:	4601      	mov	r1, r0
 8007904:	4620      	mov	r0, r4
 8007906:	f000 fd09 	bl	800831c <__pow5mult>
 800790a:	9b07      	ldr	r3, [sp, #28]
 800790c:	2b01      	cmp	r3, #1
 800790e:	4606      	mov	r6, r0
 8007910:	dd7a      	ble.n	8007a08 <_dtoa_r+0x8d0>
 8007912:	f04f 0800 	mov.w	r8, #0
 8007916:	6933      	ldr	r3, [r6, #16]
 8007918:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800791c:	6918      	ldr	r0, [r3, #16]
 800791e:	f000 fbef 	bl	8008100 <__hi0bits>
 8007922:	f1c0 0020 	rsb	r0, r0, #32
 8007926:	9b06      	ldr	r3, [sp, #24]
 8007928:	4418      	add	r0, r3
 800792a:	f010 001f 	ands.w	r0, r0, #31
 800792e:	f000 8094 	beq.w	8007a5a <_dtoa_r+0x922>
 8007932:	f1c0 0320 	rsb	r3, r0, #32
 8007936:	2b04      	cmp	r3, #4
 8007938:	f340 8085 	ble.w	8007a46 <_dtoa_r+0x90e>
 800793c:	9b05      	ldr	r3, [sp, #20]
 800793e:	f1c0 001c 	rsb	r0, r0, #28
 8007942:	4403      	add	r3, r0
 8007944:	9305      	str	r3, [sp, #20]
 8007946:	9b06      	ldr	r3, [sp, #24]
 8007948:	4403      	add	r3, r0
 800794a:	4405      	add	r5, r0
 800794c:	9306      	str	r3, [sp, #24]
 800794e:	9b05      	ldr	r3, [sp, #20]
 8007950:	2b00      	cmp	r3, #0
 8007952:	dd05      	ble.n	8007960 <_dtoa_r+0x828>
 8007954:	4651      	mov	r1, sl
 8007956:	461a      	mov	r2, r3
 8007958:	4620      	mov	r0, r4
 800795a:	f000 fd39 	bl	80083d0 <__lshift>
 800795e:	4682      	mov	sl, r0
 8007960:	9b06      	ldr	r3, [sp, #24]
 8007962:	2b00      	cmp	r3, #0
 8007964:	dd05      	ble.n	8007972 <_dtoa_r+0x83a>
 8007966:	4631      	mov	r1, r6
 8007968:	461a      	mov	r2, r3
 800796a:	4620      	mov	r0, r4
 800796c:	f000 fd30 	bl	80083d0 <__lshift>
 8007970:	4606      	mov	r6, r0
 8007972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007974:	2b00      	cmp	r3, #0
 8007976:	d072      	beq.n	8007a5e <_dtoa_r+0x926>
 8007978:	4631      	mov	r1, r6
 800797a:	4650      	mov	r0, sl
 800797c:	f000 fd94 	bl	80084a8 <__mcmp>
 8007980:	2800      	cmp	r0, #0
 8007982:	da6c      	bge.n	8007a5e <_dtoa_r+0x926>
 8007984:	2300      	movs	r3, #0
 8007986:	4651      	mov	r1, sl
 8007988:	220a      	movs	r2, #10
 800798a:	4620      	mov	r0, r4
 800798c:	f000 fb28 	bl	8007fe0 <__multadd>
 8007990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007992:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007996:	4682      	mov	sl, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 81b0 	beq.w	8007cfe <_dtoa_r+0xbc6>
 800799e:	2300      	movs	r3, #0
 80079a0:	4639      	mov	r1, r7
 80079a2:	220a      	movs	r2, #10
 80079a4:	4620      	mov	r0, r4
 80079a6:	f000 fb1b 	bl	8007fe0 <__multadd>
 80079aa:	9b01      	ldr	r3, [sp, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	4607      	mov	r7, r0
 80079b0:	f300 8096 	bgt.w	8007ae0 <_dtoa_r+0x9a8>
 80079b4:	9b07      	ldr	r3, [sp, #28]
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	dc59      	bgt.n	8007a6e <_dtoa_r+0x936>
 80079ba:	e091      	b.n	8007ae0 <_dtoa_r+0x9a8>
 80079bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079c2:	e758      	b.n	8007876 <_dtoa_r+0x73e>
 80079c4:	9b04      	ldr	r3, [sp, #16]
 80079c6:	1e5e      	subs	r6, r3, #1
 80079c8:	9b08      	ldr	r3, [sp, #32]
 80079ca:	42b3      	cmp	r3, r6
 80079cc:	bfbf      	itttt	lt
 80079ce:	9b08      	ldrlt	r3, [sp, #32]
 80079d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80079d2:	9608      	strlt	r6, [sp, #32]
 80079d4:	1af3      	sublt	r3, r6, r3
 80079d6:	bfb4      	ite	lt
 80079d8:	18d2      	addlt	r2, r2, r3
 80079da:	1b9e      	subge	r6, r3, r6
 80079dc:	9b04      	ldr	r3, [sp, #16]
 80079de:	bfbc      	itt	lt
 80079e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80079e2:	2600      	movlt	r6, #0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	bfb7      	itett	lt
 80079e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80079ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80079f0:	1a9d      	sublt	r5, r3, r2
 80079f2:	2300      	movlt	r3, #0
 80079f4:	e741      	b.n	800787a <_dtoa_r+0x742>
 80079f6:	9e08      	ldr	r6, [sp, #32]
 80079f8:	9d05      	ldr	r5, [sp, #20]
 80079fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80079fc:	e748      	b.n	8007890 <_dtoa_r+0x758>
 80079fe:	9a08      	ldr	r2, [sp, #32]
 8007a00:	e770      	b.n	80078e4 <_dtoa_r+0x7ac>
 8007a02:	9b07      	ldr	r3, [sp, #28]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	dc19      	bgt.n	8007a3c <_dtoa_r+0x904>
 8007a08:	9b02      	ldr	r3, [sp, #8]
 8007a0a:	b9bb      	cbnz	r3, 8007a3c <_dtoa_r+0x904>
 8007a0c:	9b03      	ldr	r3, [sp, #12]
 8007a0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a12:	b99b      	cbnz	r3, 8007a3c <_dtoa_r+0x904>
 8007a14:	9b03      	ldr	r3, [sp, #12]
 8007a16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a1a:	0d1b      	lsrs	r3, r3, #20
 8007a1c:	051b      	lsls	r3, r3, #20
 8007a1e:	b183      	cbz	r3, 8007a42 <_dtoa_r+0x90a>
 8007a20:	9b05      	ldr	r3, [sp, #20]
 8007a22:	3301      	adds	r3, #1
 8007a24:	9305      	str	r3, [sp, #20]
 8007a26:	9b06      	ldr	r3, [sp, #24]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	9306      	str	r3, [sp, #24]
 8007a2c:	f04f 0801 	mov.w	r8, #1
 8007a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f47f af6f 	bne.w	8007916 <_dtoa_r+0x7de>
 8007a38:	2001      	movs	r0, #1
 8007a3a:	e774      	b.n	8007926 <_dtoa_r+0x7ee>
 8007a3c:	f04f 0800 	mov.w	r8, #0
 8007a40:	e7f6      	b.n	8007a30 <_dtoa_r+0x8f8>
 8007a42:	4698      	mov	r8, r3
 8007a44:	e7f4      	b.n	8007a30 <_dtoa_r+0x8f8>
 8007a46:	d082      	beq.n	800794e <_dtoa_r+0x816>
 8007a48:	9a05      	ldr	r2, [sp, #20]
 8007a4a:	331c      	adds	r3, #28
 8007a4c:	441a      	add	r2, r3
 8007a4e:	9205      	str	r2, [sp, #20]
 8007a50:	9a06      	ldr	r2, [sp, #24]
 8007a52:	441a      	add	r2, r3
 8007a54:	441d      	add	r5, r3
 8007a56:	9206      	str	r2, [sp, #24]
 8007a58:	e779      	b.n	800794e <_dtoa_r+0x816>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	e7f4      	b.n	8007a48 <_dtoa_r+0x910>
 8007a5e:	9b04      	ldr	r3, [sp, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	dc37      	bgt.n	8007ad4 <_dtoa_r+0x99c>
 8007a64:	9b07      	ldr	r3, [sp, #28]
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	dd34      	ble.n	8007ad4 <_dtoa_r+0x99c>
 8007a6a:	9b04      	ldr	r3, [sp, #16]
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	9b01      	ldr	r3, [sp, #4]
 8007a70:	b963      	cbnz	r3, 8007a8c <_dtoa_r+0x954>
 8007a72:	4631      	mov	r1, r6
 8007a74:	2205      	movs	r2, #5
 8007a76:	4620      	mov	r0, r4
 8007a78:	f000 fab2 	bl	8007fe0 <__multadd>
 8007a7c:	4601      	mov	r1, r0
 8007a7e:	4606      	mov	r6, r0
 8007a80:	4650      	mov	r0, sl
 8007a82:	f000 fd11 	bl	80084a8 <__mcmp>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	f73f adbb 	bgt.w	8007602 <_dtoa_r+0x4ca>
 8007a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a8e:	9d00      	ldr	r5, [sp, #0]
 8007a90:	ea6f 0b03 	mvn.w	fp, r3
 8007a94:	f04f 0800 	mov.w	r8, #0
 8007a98:	4631      	mov	r1, r6
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f000 fa7e 	bl	8007f9c <_Bfree>
 8007aa0:	2f00      	cmp	r7, #0
 8007aa2:	f43f aeab 	beq.w	80077fc <_dtoa_r+0x6c4>
 8007aa6:	f1b8 0f00 	cmp.w	r8, #0
 8007aaa:	d005      	beq.n	8007ab8 <_dtoa_r+0x980>
 8007aac:	45b8      	cmp	r8, r7
 8007aae:	d003      	beq.n	8007ab8 <_dtoa_r+0x980>
 8007ab0:	4641      	mov	r1, r8
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f000 fa72 	bl	8007f9c <_Bfree>
 8007ab8:	4639      	mov	r1, r7
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 fa6e 	bl	8007f9c <_Bfree>
 8007ac0:	e69c      	b.n	80077fc <_dtoa_r+0x6c4>
 8007ac2:	2600      	movs	r6, #0
 8007ac4:	4637      	mov	r7, r6
 8007ac6:	e7e1      	b.n	8007a8c <_dtoa_r+0x954>
 8007ac8:	46bb      	mov	fp, r7
 8007aca:	4637      	mov	r7, r6
 8007acc:	e599      	b.n	8007602 <_dtoa_r+0x4ca>
 8007ace:	bf00      	nop
 8007ad0:	40240000 	.word	0x40240000
 8007ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 80c8 	beq.w	8007c6c <_dtoa_r+0xb34>
 8007adc:	9b04      	ldr	r3, [sp, #16]
 8007ade:	9301      	str	r3, [sp, #4]
 8007ae0:	2d00      	cmp	r5, #0
 8007ae2:	dd05      	ble.n	8007af0 <_dtoa_r+0x9b8>
 8007ae4:	4639      	mov	r1, r7
 8007ae6:	462a      	mov	r2, r5
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f000 fc71 	bl	80083d0 <__lshift>
 8007aee:	4607      	mov	r7, r0
 8007af0:	f1b8 0f00 	cmp.w	r8, #0
 8007af4:	d05b      	beq.n	8007bae <_dtoa_r+0xa76>
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 fa0f 	bl	8007f1c <_Balloc>
 8007afe:	4605      	mov	r5, r0
 8007b00:	b928      	cbnz	r0, 8007b0e <_dtoa_r+0x9d6>
 8007b02:	4b83      	ldr	r3, [pc, #524]	; (8007d10 <_dtoa_r+0xbd8>)
 8007b04:	4602      	mov	r2, r0
 8007b06:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007b0a:	f7ff bb2e 	b.w	800716a <_dtoa_r+0x32>
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	3202      	adds	r2, #2
 8007b12:	0092      	lsls	r2, r2, #2
 8007b14:	f107 010c 	add.w	r1, r7, #12
 8007b18:	300c      	adds	r0, #12
 8007b1a:	f001 ff85 	bl	8009a28 <memcpy>
 8007b1e:	2201      	movs	r2, #1
 8007b20:	4629      	mov	r1, r5
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 fc54 	bl	80083d0 <__lshift>
 8007b28:	9b00      	ldr	r3, [sp, #0]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	9304      	str	r3, [sp, #16]
 8007b2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b32:	4413      	add	r3, r2
 8007b34:	9308      	str	r3, [sp, #32]
 8007b36:	9b02      	ldr	r3, [sp, #8]
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	46b8      	mov	r8, r7
 8007b3e:	9306      	str	r3, [sp, #24]
 8007b40:	4607      	mov	r7, r0
 8007b42:	9b04      	ldr	r3, [sp, #16]
 8007b44:	4631      	mov	r1, r6
 8007b46:	3b01      	subs	r3, #1
 8007b48:	4650      	mov	r0, sl
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	f7ff fa6a 	bl	8007024 <quorem>
 8007b50:	4641      	mov	r1, r8
 8007b52:	9002      	str	r0, [sp, #8]
 8007b54:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b58:	4650      	mov	r0, sl
 8007b5a:	f000 fca5 	bl	80084a8 <__mcmp>
 8007b5e:	463a      	mov	r2, r7
 8007b60:	9005      	str	r0, [sp, #20]
 8007b62:	4631      	mov	r1, r6
 8007b64:	4620      	mov	r0, r4
 8007b66:	f000 fcbb 	bl	80084e0 <__mdiff>
 8007b6a:	68c2      	ldr	r2, [r0, #12]
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	bb02      	cbnz	r2, 8007bb2 <_dtoa_r+0xa7a>
 8007b70:	4601      	mov	r1, r0
 8007b72:	4650      	mov	r0, sl
 8007b74:	f000 fc98 	bl	80084a8 <__mcmp>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b80:	f000 fa0c 	bl	8007f9c <_Bfree>
 8007b84:	9b07      	ldr	r3, [sp, #28]
 8007b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b88:	9d04      	ldr	r5, [sp, #16]
 8007b8a:	ea43 0102 	orr.w	r1, r3, r2
 8007b8e:	9b06      	ldr	r3, [sp, #24]
 8007b90:	4319      	orrs	r1, r3
 8007b92:	d110      	bne.n	8007bb6 <_dtoa_r+0xa7e>
 8007b94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b98:	d029      	beq.n	8007bee <_dtoa_r+0xab6>
 8007b9a:	9b05      	ldr	r3, [sp, #20]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	dd02      	ble.n	8007ba6 <_dtoa_r+0xa6e>
 8007ba0:	9b02      	ldr	r3, [sp, #8]
 8007ba2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007ba6:	9b01      	ldr	r3, [sp, #4]
 8007ba8:	f883 9000 	strb.w	r9, [r3]
 8007bac:	e774      	b.n	8007a98 <_dtoa_r+0x960>
 8007bae:	4638      	mov	r0, r7
 8007bb0:	e7ba      	b.n	8007b28 <_dtoa_r+0x9f0>
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	e7e1      	b.n	8007b7a <_dtoa_r+0xa42>
 8007bb6:	9b05      	ldr	r3, [sp, #20]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	db04      	blt.n	8007bc6 <_dtoa_r+0xa8e>
 8007bbc:	9907      	ldr	r1, [sp, #28]
 8007bbe:	430b      	orrs	r3, r1
 8007bc0:	9906      	ldr	r1, [sp, #24]
 8007bc2:	430b      	orrs	r3, r1
 8007bc4:	d120      	bne.n	8007c08 <_dtoa_r+0xad0>
 8007bc6:	2a00      	cmp	r2, #0
 8007bc8:	dded      	ble.n	8007ba6 <_dtoa_r+0xa6e>
 8007bca:	4651      	mov	r1, sl
 8007bcc:	2201      	movs	r2, #1
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f000 fbfe 	bl	80083d0 <__lshift>
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	4682      	mov	sl, r0
 8007bd8:	f000 fc66 	bl	80084a8 <__mcmp>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	dc03      	bgt.n	8007be8 <_dtoa_r+0xab0>
 8007be0:	d1e1      	bne.n	8007ba6 <_dtoa_r+0xa6e>
 8007be2:	f019 0f01 	tst.w	r9, #1
 8007be6:	d0de      	beq.n	8007ba6 <_dtoa_r+0xa6e>
 8007be8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bec:	d1d8      	bne.n	8007ba0 <_dtoa_r+0xa68>
 8007bee:	9a01      	ldr	r2, [sp, #4]
 8007bf0:	2339      	movs	r3, #57	; 0x39
 8007bf2:	7013      	strb	r3, [r2, #0]
 8007bf4:	462b      	mov	r3, r5
 8007bf6:	461d      	mov	r5, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007bfe:	2a39      	cmp	r2, #57	; 0x39
 8007c00:	d06c      	beq.n	8007cdc <_dtoa_r+0xba4>
 8007c02:	3201      	adds	r2, #1
 8007c04:	701a      	strb	r2, [r3, #0]
 8007c06:	e747      	b.n	8007a98 <_dtoa_r+0x960>
 8007c08:	2a00      	cmp	r2, #0
 8007c0a:	dd07      	ble.n	8007c1c <_dtoa_r+0xae4>
 8007c0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c10:	d0ed      	beq.n	8007bee <_dtoa_r+0xab6>
 8007c12:	9a01      	ldr	r2, [sp, #4]
 8007c14:	f109 0301 	add.w	r3, r9, #1
 8007c18:	7013      	strb	r3, [r2, #0]
 8007c1a:	e73d      	b.n	8007a98 <_dtoa_r+0x960>
 8007c1c:	9b04      	ldr	r3, [sp, #16]
 8007c1e:	9a08      	ldr	r2, [sp, #32]
 8007c20:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d043      	beq.n	8007cb0 <_dtoa_r+0xb78>
 8007c28:	4651      	mov	r1, sl
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	220a      	movs	r2, #10
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 f9d6 	bl	8007fe0 <__multadd>
 8007c34:	45b8      	cmp	r8, r7
 8007c36:	4682      	mov	sl, r0
 8007c38:	f04f 0300 	mov.w	r3, #0
 8007c3c:	f04f 020a 	mov.w	r2, #10
 8007c40:	4641      	mov	r1, r8
 8007c42:	4620      	mov	r0, r4
 8007c44:	d107      	bne.n	8007c56 <_dtoa_r+0xb1e>
 8007c46:	f000 f9cb 	bl	8007fe0 <__multadd>
 8007c4a:	4680      	mov	r8, r0
 8007c4c:	4607      	mov	r7, r0
 8007c4e:	9b04      	ldr	r3, [sp, #16]
 8007c50:	3301      	adds	r3, #1
 8007c52:	9304      	str	r3, [sp, #16]
 8007c54:	e775      	b.n	8007b42 <_dtoa_r+0xa0a>
 8007c56:	f000 f9c3 	bl	8007fe0 <__multadd>
 8007c5a:	4639      	mov	r1, r7
 8007c5c:	4680      	mov	r8, r0
 8007c5e:	2300      	movs	r3, #0
 8007c60:	220a      	movs	r2, #10
 8007c62:	4620      	mov	r0, r4
 8007c64:	f000 f9bc 	bl	8007fe0 <__multadd>
 8007c68:	4607      	mov	r7, r0
 8007c6a:	e7f0      	b.n	8007c4e <_dtoa_r+0xb16>
 8007c6c:	9b04      	ldr	r3, [sp, #16]
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	9d00      	ldr	r5, [sp, #0]
 8007c72:	4631      	mov	r1, r6
 8007c74:	4650      	mov	r0, sl
 8007c76:	f7ff f9d5 	bl	8007024 <quorem>
 8007c7a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c7e:	9b00      	ldr	r3, [sp, #0]
 8007c80:	f805 9b01 	strb.w	r9, [r5], #1
 8007c84:	1aea      	subs	r2, r5, r3
 8007c86:	9b01      	ldr	r3, [sp, #4]
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	dd07      	ble.n	8007c9c <_dtoa_r+0xb64>
 8007c8c:	4651      	mov	r1, sl
 8007c8e:	2300      	movs	r3, #0
 8007c90:	220a      	movs	r2, #10
 8007c92:	4620      	mov	r0, r4
 8007c94:	f000 f9a4 	bl	8007fe0 <__multadd>
 8007c98:	4682      	mov	sl, r0
 8007c9a:	e7ea      	b.n	8007c72 <_dtoa_r+0xb3a>
 8007c9c:	9b01      	ldr	r3, [sp, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	bfc8      	it	gt
 8007ca2:	461d      	movgt	r5, r3
 8007ca4:	9b00      	ldr	r3, [sp, #0]
 8007ca6:	bfd8      	it	le
 8007ca8:	2501      	movle	r5, #1
 8007caa:	441d      	add	r5, r3
 8007cac:	f04f 0800 	mov.w	r8, #0
 8007cb0:	4651      	mov	r1, sl
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f000 fb8b 	bl	80083d0 <__lshift>
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4682      	mov	sl, r0
 8007cbe:	f000 fbf3 	bl	80084a8 <__mcmp>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	dc96      	bgt.n	8007bf4 <_dtoa_r+0xabc>
 8007cc6:	d102      	bne.n	8007cce <_dtoa_r+0xb96>
 8007cc8:	f019 0f01 	tst.w	r9, #1
 8007ccc:	d192      	bne.n	8007bf4 <_dtoa_r+0xabc>
 8007cce:	462b      	mov	r3, r5
 8007cd0:	461d      	mov	r5, r3
 8007cd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cd6:	2a30      	cmp	r2, #48	; 0x30
 8007cd8:	d0fa      	beq.n	8007cd0 <_dtoa_r+0xb98>
 8007cda:	e6dd      	b.n	8007a98 <_dtoa_r+0x960>
 8007cdc:	9a00      	ldr	r2, [sp, #0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d189      	bne.n	8007bf6 <_dtoa_r+0xabe>
 8007ce2:	f10b 0b01 	add.w	fp, fp, #1
 8007ce6:	2331      	movs	r3, #49	; 0x31
 8007ce8:	e796      	b.n	8007c18 <_dtoa_r+0xae0>
 8007cea:	4b0a      	ldr	r3, [pc, #40]	; (8007d14 <_dtoa_r+0xbdc>)
 8007cec:	f7ff ba99 	b.w	8007222 <_dtoa_r+0xea>
 8007cf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f47f aa6d 	bne.w	80071d2 <_dtoa_r+0x9a>
 8007cf8:	4b07      	ldr	r3, [pc, #28]	; (8007d18 <_dtoa_r+0xbe0>)
 8007cfa:	f7ff ba92 	b.w	8007222 <_dtoa_r+0xea>
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	dcb5      	bgt.n	8007c70 <_dtoa_r+0xb38>
 8007d04:	9b07      	ldr	r3, [sp, #28]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	f73f aeb1 	bgt.w	8007a6e <_dtoa_r+0x936>
 8007d0c:	e7b0      	b.n	8007c70 <_dtoa_r+0xb38>
 8007d0e:	bf00      	nop
 8007d10:	0800acbd 	.word	0x0800acbd
 8007d14:	0800ac18 	.word	0x0800ac18
 8007d18:	0800ac41 	.word	0x0800ac41

08007d1c <_free_r>:
 8007d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d1e:	2900      	cmp	r1, #0
 8007d20:	d044      	beq.n	8007dac <_free_r+0x90>
 8007d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d26:	9001      	str	r0, [sp, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d2e:	bfb8      	it	lt
 8007d30:	18e4      	addlt	r4, r4, r3
 8007d32:	f000 f8e7 	bl	8007f04 <__malloc_lock>
 8007d36:	4a1e      	ldr	r2, [pc, #120]	; (8007db0 <_free_r+0x94>)
 8007d38:	9801      	ldr	r0, [sp, #4]
 8007d3a:	6813      	ldr	r3, [r2, #0]
 8007d3c:	b933      	cbnz	r3, 8007d4c <_free_r+0x30>
 8007d3e:	6063      	str	r3, [r4, #4]
 8007d40:	6014      	str	r4, [r2, #0]
 8007d42:	b003      	add	sp, #12
 8007d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d48:	f000 b8e2 	b.w	8007f10 <__malloc_unlock>
 8007d4c:	42a3      	cmp	r3, r4
 8007d4e:	d908      	bls.n	8007d62 <_free_r+0x46>
 8007d50:	6825      	ldr	r5, [r4, #0]
 8007d52:	1961      	adds	r1, r4, r5
 8007d54:	428b      	cmp	r3, r1
 8007d56:	bf01      	itttt	eq
 8007d58:	6819      	ldreq	r1, [r3, #0]
 8007d5a:	685b      	ldreq	r3, [r3, #4]
 8007d5c:	1949      	addeq	r1, r1, r5
 8007d5e:	6021      	streq	r1, [r4, #0]
 8007d60:	e7ed      	b.n	8007d3e <_free_r+0x22>
 8007d62:	461a      	mov	r2, r3
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	b10b      	cbz	r3, 8007d6c <_free_r+0x50>
 8007d68:	42a3      	cmp	r3, r4
 8007d6a:	d9fa      	bls.n	8007d62 <_free_r+0x46>
 8007d6c:	6811      	ldr	r1, [r2, #0]
 8007d6e:	1855      	adds	r5, r2, r1
 8007d70:	42a5      	cmp	r5, r4
 8007d72:	d10b      	bne.n	8007d8c <_free_r+0x70>
 8007d74:	6824      	ldr	r4, [r4, #0]
 8007d76:	4421      	add	r1, r4
 8007d78:	1854      	adds	r4, r2, r1
 8007d7a:	42a3      	cmp	r3, r4
 8007d7c:	6011      	str	r1, [r2, #0]
 8007d7e:	d1e0      	bne.n	8007d42 <_free_r+0x26>
 8007d80:	681c      	ldr	r4, [r3, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	6053      	str	r3, [r2, #4]
 8007d86:	440c      	add	r4, r1
 8007d88:	6014      	str	r4, [r2, #0]
 8007d8a:	e7da      	b.n	8007d42 <_free_r+0x26>
 8007d8c:	d902      	bls.n	8007d94 <_free_r+0x78>
 8007d8e:	230c      	movs	r3, #12
 8007d90:	6003      	str	r3, [r0, #0]
 8007d92:	e7d6      	b.n	8007d42 <_free_r+0x26>
 8007d94:	6825      	ldr	r5, [r4, #0]
 8007d96:	1961      	adds	r1, r4, r5
 8007d98:	428b      	cmp	r3, r1
 8007d9a:	bf04      	itt	eq
 8007d9c:	6819      	ldreq	r1, [r3, #0]
 8007d9e:	685b      	ldreq	r3, [r3, #4]
 8007da0:	6063      	str	r3, [r4, #4]
 8007da2:	bf04      	itt	eq
 8007da4:	1949      	addeq	r1, r1, r5
 8007da6:	6021      	streq	r1, [r4, #0]
 8007da8:	6054      	str	r4, [r2, #4]
 8007daa:	e7ca      	b.n	8007d42 <_free_r+0x26>
 8007dac:	b003      	add	sp, #12
 8007dae:	bd30      	pop	{r4, r5, pc}
 8007db0:	200007f0 	.word	0x200007f0

08007db4 <malloc>:
 8007db4:	4b02      	ldr	r3, [pc, #8]	; (8007dc0 <malloc+0xc>)
 8007db6:	4601      	mov	r1, r0
 8007db8:	6818      	ldr	r0, [r3, #0]
 8007dba:	f000 b823 	b.w	8007e04 <_malloc_r>
 8007dbe:	bf00      	nop
 8007dc0:	20000074 	.word	0x20000074

08007dc4 <sbrk_aligned>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	4e0e      	ldr	r6, [pc, #56]	; (8007e00 <sbrk_aligned+0x3c>)
 8007dc8:	460c      	mov	r4, r1
 8007dca:	6831      	ldr	r1, [r6, #0]
 8007dcc:	4605      	mov	r5, r0
 8007dce:	b911      	cbnz	r1, 8007dd6 <sbrk_aligned+0x12>
 8007dd0:	f001 fe1a 	bl	8009a08 <_sbrk_r>
 8007dd4:	6030      	str	r0, [r6, #0]
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f001 fe15 	bl	8009a08 <_sbrk_r>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d00a      	beq.n	8007df8 <sbrk_aligned+0x34>
 8007de2:	1cc4      	adds	r4, r0, #3
 8007de4:	f024 0403 	bic.w	r4, r4, #3
 8007de8:	42a0      	cmp	r0, r4
 8007dea:	d007      	beq.n	8007dfc <sbrk_aligned+0x38>
 8007dec:	1a21      	subs	r1, r4, r0
 8007dee:	4628      	mov	r0, r5
 8007df0:	f001 fe0a 	bl	8009a08 <_sbrk_r>
 8007df4:	3001      	adds	r0, #1
 8007df6:	d101      	bne.n	8007dfc <sbrk_aligned+0x38>
 8007df8:	f04f 34ff 	mov.w	r4, #4294967295
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	bd70      	pop	{r4, r5, r6, pc}
 8007e00:	200007f4 	.word	0x200007f4

08007e04 <_malloc_r>:
 8007e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e08:	1ccd      	adds	r5, r1, #3
 8007e0a:	f025 0503 	bic.w	r5, r5, #3
 8007e0e:	3508      	adds	r5, #8
 8007e10:	2d0c      	cmp	r5, #12
 8007e12:	bf38      	it	cc
 8007e14:	250c      	movcc	r5, #12
 8007e16:	2d00      	cmp	r5, #0
 8007e18:	4607      	mov	r7, r0
 8007e1a:	db01      	blt.n	8007e20 <_malloc_r+0x1c>
 8007e1c:	42a9      	cmp	r1, r5
 8007e1e:	d905      	bls.n	8007e2c <_malloc_r+0x28>
 8007e20:	230c      	movs	r3, #12
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	2600      	movs	r6, #0
 8007e26:	4630      	mov	r0, r6
 8007e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f00 <_malloc_r+0xfc>
 8007e30:	f000 f868 	bl	8007f04 <__malloc_lock>
 8007e34:	f8d8 3000 	ldr.w	r3, [r8]
 8007e38:	461c      	mov	r4, r3
 8007e3a:	bb5c      	cbnz	r4, 8007e94 <_malloc_r+0x90>
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	4638      	mov	r0, r7
 8007e40:	f7ff ffc0 	bl	8007dc4 <sbrk_aligned>
 8007e44:	1c43      	adds	r3, r0, #1
 8007e46:	4604      	mov	r4, r0
 8007e48:	d155      	bne.n	8007ef6 <_malloc_r+0xf2>
 8007e4a:	f8d8 4000 	ldr.w	r4, [r8]
 8007e4e:	4626      	mov	r6, r4
 8007e50:	2e00      	cmp	r6, #0
 8007e52:	d145      	bne.n	8007ee0 <_malloc_r+0xdc>
 8007e54:	2c00      	cmp	r4, #0
 8007e56:	d048      	beq.n	8007eea <_malloc_r+0xe6>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	eb04 0903 	add.w	r9, r4, r3
 8007e62:	f001 fdd1 	bl	8009a08 <_sbrk_r>
 8007e66:	4581      	cmp	r9, r0
 8007e68:	d13f      	bne.n	8007eea <_malloc_r+0xe6>
 8007e6a:	6821      	ldr	r1, [r4, #0]
 8007e6c:	1a6d      	subs	r5, r5, r1
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4638      	mov	r0, r7
 8007e72:	f7ff ffa7 	bl	8007dc4 <sbrk_aligned>
 8007e76:	3001      	adds	r0, #1
 8007e78:	d037      	beq.n	8007eea <_malloc_r+0xe6>
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	442b      	add	r3, r5
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	f8d8 3000 	ldr.w	r3, [r8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d038      	beq.n	8007efa <_malloc_r+0xf6>
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	42a2      	cmp	r2, r4
 8007e8c:	d12b      	bne.n	8007ee6 <_malloc_r+0xe2>
 8007e8e:	2200      	movs	r2, #0
 8007e90:	605a      	str	r2, [r3, #4]
 8007e92:	e00f      	b.n	8007eb4 <_malloc_r+0xb0>
 8007e94:	6822      	ldr	r2, [r4, #0]
 8007e96:	1b52      	subs	r2, r2, r5
 8007e98:	d41f      	bmi.n	8007eda <_malloc_r+0xd6>
 8007e9a:	2a0b      	cmp	r2, #11
 8007e9c:	d917      	bls.n	8007ece <_malloc_r+0xca>
 8007e9e:	1961      	adds	r1, r4, r5
 8007ea0:	42a3      	cmp	r3, r4
 8007ea2:	6025      	str	r5, [r4, #0]
 8007ea4:	bf18      	it	ne
 8007ea6:	6059      	strne	r1, [r3, #4]
 8007ea8:	6863      	ldr	r3, [r4, #4]
 8007eaa:	bf08      	it	eq
 8007eac:	f8c8 1000 	streq.w	r1, [r8]
 8007eb0:	5162      	str	r2, [r4, r5]
 8007eb2:	604b      	str	r3, [r1, #4]
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f104 060b 	add.w	r6, r4, #11
 8007eba:	f000 f829 	bl	8007f10 <__malloc_unlock>
 8007ebe:	f026 0607 	bic.w	r6, r6, #7
 8007ec2:	1d23      	adds	r3, r4, #4
 8007ec4:	1af2      	subs	r2, r6, r3
 8007ec6:	d0ae      	beq.n	8007e26 <_malloc_r+0x22>
 8007ec8:	1b9b      	subs	r3, r3, r6
 8007eca:	50a3      	str	r3, [r4, r2]
 8007ecc:	e7ab      	b.n	8007e26 <_malloc_r+0x22>
 8007ece:	42a3      	cmp	r3, r4
 8007ed0:	6862      	ldr	r2, [r4, #4]
 8007ed2:	d1dd      	bne.n	8007e90 <_malloc_r+0x8c>
 8007ed4:	f8c8 2000 	str.w	r2, [r8]
 8007ed8:	e7ec      	b.n	8007eb4 <_malloc_r+0xb0>
 8007eda:	4623      	mov	r3, r4
 8007edc:	6864      	ldr	r4, [r4, #4]
 8007ede:	e7ac      	b.n	8007e3a <_malloc_r+0x36>
 8007ee0:	4634      	mov	r4, r6
 8007ee2:	6876      	ldr	r6, [r6, #4]
 8007ee4:	e7b4      	b.n	8007e50 <_malloc_r+0x4c>
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	e7cc      	b.n	8007e84 <_malloc_r+0x80>
 8007eea:	230c      	movs	r3, #12
 8007eec:	603b      	str	r3, [r7, #0]
 8007eee:	4638      	mov	r0, r7
 8007ef0:	f000 f80e 	bl	8007f10 <__malloc_unlock>
 8007ef4:	e797      	b.n	8007e26 <_malloc_r+0x22>
 8007ef6:	6025      	str	r5, [r4, #0]
 8007ef8:	e7dc      	b.n	8007eb4 <_malloc_r+0xb0>
 8007efa:	605b      	str	r3, [r3, #4]
 8007efc:	deff      	udf	#255	; 0xff
 8007efe:	bf00      	nop
 8007f00:	200007f0 	.word	0x200007f0

08007f04 <__malloc_lock>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__malloc_lock+0x8>)
 8007f06:	f7ff b884 	b.w	8007012 <__retarget_lock_acquire_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	200007ec 	.word	0x200007ec

08007f10 <__malloc_unlock>:
 8007f10:	4801      	ldr	r0, [pc, #4]	; (8007f18 <__malloc_unlock+0x8>)
 8007f12:	f7ff b87f 	b.w	8007014 <__retarget_lock_release_recursive>
 8007f16:	bf00      	nop
 8007f18:	200007ec 	.word	0x200007ec

08007f1c <_Balloc>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	69c6      	ldr	r6, [r0, #28]
 8007f20:	4604      	mov	r4, r0
 8007f22:	460d      	mov	r5, r1
 8007f24:	b976      	cbnz	r6, 8007f44 <_Balloc+0x28>
 8007f26:	2010      	movs	r0, #16
 8007f28:	f7ff ff44 	bl	8007db4 <malloc>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	61e0      	str	r0, [r4, #28]
 8007f30:	b920      	cbnz	r0, 8007f3c <_Balloc+0x20>
 8007f32:	4b18      	ldr	r3, [pc, #96]	; (8007f94 <_Balloc+0x78>)
 8007f34:	4818      	ldr	r0, [pc, #96]	; (8007f98 <_Balloc+0x7c>)
 8007f36:	216b      	movs	r1, #107	; 0x6b
 8007f38:	f001 fd8e 	bl	8009a58 <__assert_func>
 8007f3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f40:	6006      	str	r6, [r0, #0]
 8007f42:	60c6      	str	r6, [r0, #12]
 8007f44:	69e6      	ldr	r6, [r4, #28]
 8007f46:	68f3      	ldr	r3, [r6, #12]
 8007f48:	b183      	cbz	r3, 8007f6c <_Balloc+0x50>
 8007f4a:	69e3      	ldr	r3, [r4, #28]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f52:	b9b8      	cbnz	r0, 8007f84 <_Balloc+0x68>
 8007f54:	2101      	movs	r1, #1
 8007f56:	fa01 f605 	lsl.w	r6, r1, r5
 8007f5a:	1d72      	adds	r2, r6, #5
 8007f5c:	0092      	lsls	r2, r2, #2
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f001 fd98 	bl	8009a94 <_calloc_r>
 8007f64:	b160      	cbz	r0, 8007f80 <_Balloc+0x64>
 8007f66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f6a:	e00e      	b.n	8007f8a <_Balloc+0x6e>
 8007f6c:	2221      	movs	r2, #33	; 0x21
 8007f6e:	2104      	movs	r1, #4
 8007f70:	4620      	mov	r0, r4
 8007f72:	f001 fd8f 	bl	8009a94 <_calloc_r>
 8007f76:	69e3      	ldr	r3, [r4, #28]
 8007f78:	60f0      	str	r0, [r6, #12]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e4      	bne.n	8007f4a <_Balloc+0x2e>
 8007f80:	2000      	movs	r0, #0
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
 8007f84:	6802      	ldr	r2, [r0, #0]
 8007f86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f90:	e7f7      	b.n	8007f82 <_Balloc+0x66>
 8007f92:	bf00      	nop
 8007f94:	0800ac4e 	.word	0x0800ac4e
 8007f98:	0800acce 	.word	0x0800acce

08007f9c <_Bfree>:
 8007f9c:	b570      	push	{r4, r5, r6, lr}
 8007f9e:	69c6      	ldr	r6, [r0, #28]
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	b976      	cbnz	r6, 8007fc4 <_Bfree+0x28>
 8007fa6:	2010      	movs	r0, #16
 8007fa8:	f7ff ff04 	bl	8007db4 <malloc>
 8007fac:	4602      	mov	r2, r0
 8007fae:	61e8      	str	r0, [r5, #28]
 8007fb0:	b920      	cbnz	r0, 8007fbc <_Bfree+0x20>
 8007fb2:	4b09      	ldr	r3, [pc, #36]	; (8007fd8 <_Bfree+0x3c>)
 8007fb4:	4809      	ldr	r0, [pc, #36]	; (8007fdc <_Bfree+0x40>)
 8007fb6:	218f      	movs	r1, #143	; 0x8f
 8007fb8:	f001 fd4e 	bl	8009a58 <__assert_func>
 8007fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fc0:	6006      	str	r6, [r0, #0]
 8007fc2:	60c6      	str	r6, [r0, #12]
 8007fc4:	b13c      	cbz	r4, 8007fd6 <_Bfree+0x3a>
 8007fc6:	69eb      	ldr	r3, [r5, #28]
 8007fc8:	6862      	ldr	r2, [r4, #4]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fd0:	6021      	str	r1, [r4, #0]
 8007fd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	0800ac4e 	.word	0x0800ac4e
 8007fdc:	0800acce 	.word	0x0800acce

08007fe0 <__multadd>:
 8007fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe4:	690d      	ldr	r5, [r1, #16]
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	460c      	mov	r4, r1
 8007fea:	461e      	mov	r6, r3
 8007fec:	f101 0c14 	add.w	ip, r1, #20
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	f8dc 3000 	ldr.w	r3, [ip]
 8007ff6:	b299      	uxth	r1, r3
 8007ff8:	fb02 6101 	mla	r1, r2, r1, r6
 8007ffc:	0c1e      	lsrs	r6, r3, #16
 8007ffe:	0c0b      	lsrs	r3, r1, #16
 8008000:	fb02 3306 	mla	r3, r2, r6, r3
 8008004:	b289      	uxth	r1, r1
 8008006:	3001      	adds	r0, #1
 8008008:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800800c:	4285      	cmp	r5, r0
 800800e:	f84c 1b04 	str.w	r1, [ip], #4
 8008012:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008016:	dcec      	bgt.n	8007ff2 <__multadd+0x12>
 8008018:	b30e      	cbz	r6, 800805e <__multadd+0x7e>
 800801a:	68a3      	ldr	r3, [r4, #8]
 800801c:	42ab      	cmp	r3, r5
 800801e:	dc19      	bgt.n	8008054 <__multadd+0x74>
 8008020:	6861      	ldr	r1, [r4, #4]
 8008022:	4638      	mov	r0, r7
 8008024:	3101      	adds	r1, #1
 8008026:	f7ff ff79 	bl	8007f1c <_Balloc>
 800802a:	4680      	mov	r8, r0
 800802c:	b928      	cbnz	r0, 800803a <__multadd+0x5a>
 800802e:	4602      	mov	r2, r0
 8008030:	4b0c      	ldr	r3, [pc, #48]	; (8008064 <__multadd+0x84>)
 8008032:	480d      	ldr	r0, [pc, #52]	; (8008068 <__multadd+0x88>)
 8008034:	21ba      	movs	r1, #186	; 0xba
 8008036:	f001 fd0f 	bl	8009a58 <__assert_func>
 800803a:	6922      	ldr	r2, [r4, #16]
 800803c:	3202      	adds	r2, #2
 800803e:	f104 010c 	add.w	r1, r4, #12
 8008042:	0092      	lsls	r2, r2, #2
 8008044:	300c      	adds	r0, #12
 8008046:	f001 fcef 	bl	8009a28 <memcpy>
 800804a:	4621      	mov	r1, r4
 800804c:	4638      	mov	r0, r7
 800804e:	f7ff ffa5 	bl	8007f9c <_Bfree>
 8008052:	4644      	mov	r4, r8
 8008054:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008058:	3501      	adds	r5, #1
 800805a:	615e      	str	r6, [r3, #20]
 800805c:	6125      	str	r5, [r4, #16]
 800805e:	4620      	mov	r0, r4
 8008060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008064:	0800acbd 	.word	0x0800acbd
 8008068:	0800acce 	.word	0x0800acce

0800806c <__s2b>:
 800806c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008070:	460c      	mov	r4, r1
 8008072:	4615      	mov	r5, r2
 8008074:	461f      	mov	r7, r3
 8008076:	2209      	movs	r2, #9
 8008078:	3308      	adds	r3, #8
 800807a:	4606      	mov	r6, r0
 800807c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008080:	2100      	movs	r1, #0
 8008082:	2201      	movs	r2, #1
 8008084:	429a      	cmp	r2, r3
 8008086:	db09      	blt.n	800809c <__s2b+0x30>
 8008088:	4630      	mov	r0, r6
 800808a:	f7ff ff47 	bl	8007f1c <_Balloc>
 800808e:	b940      	cbnz	r0, 80080a2 <__s2b+0x36>
 8008090:	4602      	mov	r2, r0
 8008092:	4b19      	ldr	r3, [pc, #100]	; (80080f8 <__s2b+0x8c>)
 8008094:	4819      	ldr	r0, [pc, #100]	; (80080fc <__s2b+0x90>)
 8008096:	21d3      	movs	r1, #211	; 0xd3
 8008098:	f001 fcde 	bl	8009a58 <__assert_func>
 800809c:	0052      	lsls	r2, r2, #1
 800809e:	3101      	adds	r1, #1
 80080a0:	e7f0      	b.n	8008084 <__s2b+0x18>
 80080a2:	9b08      	ldr	r3, [sp, #32]
 80080a4:	6143      	str	r3, [r0, #20]
 80080a6:	2d09      	cmp	r5, #9
 80080a8:	f04f 0301 	mov.w	r3, #1
 80080ac:	6103      	str	r3, [r0, #16]
 80080ae:	dd16      	ble.n	80080de <__s2b+0x72>
 80080b0:	f104 0909 	add.w	r9, r4, #9
 80080b4:	46c8      	mov	r8, r9
 80080b6:	442c      	add	r4, r5
 80080b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80080bc:	4601      	mov	r1, r0
 80080be:	3b30      	subs	r3, #48	; 0x30
 80080c0:	220a      	movs	r2, #10
 80080c2:	4630      	mov	r0, r6
 80080c4:	f7ff ff8c 	bl	8007fe0 <__multadd>
 80080c8:	45a0      	cmp	r8, r4
 80080ca:	d1f5      	bne.n	80080b8 <__s2b+0x4c>
 80080cc:	f1a5 0408 	sub.w	r4, r5, #8
 80080d0:	444c      	add	r4, r9
 80080d2:	1b2d      	subs	r5, r5, r4
 80080d4:	1963      	adds	r3, r4, r5
 80080d6:	42bb      	cmp	r3, r7
 80080d8:	db04      	blt.n	80080e4 <__s2b+0x78>
 80080da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080de:	340a      	adds	r4, #10
 80080e0:	2509      	movs	r5, #9
 80080e2:	e7f6      	b.n	80080d2 <__s2b+0x66>
 80080e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80080e8:	4601      	mov	r1, r0
 80080ea:	3b30      	subs	r3, #48	; 0x30
 80080ec:	220a      	movs	r2, #10
 80080ee:	4630      	mov	r0, r6
 80080f0:	f7ff ff76 	bl	8007fe0 <__multadd>
 80080f4:	e7ee      	b.n	80080d4 <__s2b+0x68>
 80080f6:	bf00      	nop
 80080f8:	0800acbd 	.word	0x0800acbd
 80080fc:	0800acce 	.word	0x0800acce

08008100 <__hi0bits>:
 8008100:	0c03      	lsrs	r3, r0, #16
 8008102:	041b      	lsls	r3, r3, #16
 8008104:	b9d3      	cbnz	r3, 800813c <__hi0bits+0x3c>
 8008106:	0400      	lsls	r0, r0, #16
 8008108:	2310      	movs	r3, #16
 800810a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800810e:	bf04      	itt	eq
 8008110:	0200      	lsleq	r0, r0, #8
 8008112:	3308      	addeq	r3, #8
 8008114:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008118:	bf04      	itt	eq
 800811a:	0100      	lsleq	r0, r0, #4
 800811c:	3304      	addeq	r3, #4
 800811e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008122:	bf04      	itt	eq
 8008124:	0080      	lsleq	r0, r0, #2
 8008126:	3302      	addeq	r3, #2
 8008128:	2800      	cmp	r0, #0
 800812a:	db05      	blt.n	8008138 <__hi0bits+0x38>
 800812c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008130:	f103 0301 	add.w	r3, r3, #1
 8008134:	bf08      	it	eq
 8008136:	2320      	moveq	r3, #32
 8008138:	4618      	mov	r0, r3
 800813a:	4770      	bx	lr
 800813c:	2300      	movs	r3, #0
 800813e:	e7e4      	b.n	800810a <__hi0bits+0xa>

08008140 <__lo0bits>:
 8008140:	6803      	ldr	r3, [r0, #0]
 8008142:	f013 0207 	ands.w	r2, r3, #7
 8008146:	d00c      	beq.n	8008162 <__lo0bits+0x22>
 8008148:	07d9      	lsls	r1, r3, #31
 800814a:	d422      	bmi.n	8008192 <__lo0bits+0x52>
 800814c:	079a      	lsls	r2, r3, #30
 800814e:	bf49      	itett	mi
 8008150:	085b      	lsrmi	r3, r3, #1
 8008152:	089b      	lsrpl	r3, r3, #2
 8008154:	6003      	strmi	r3, [r0, #0]
 8008156:	2201      	movmi	r2, #1
 8008158:	bf5c      	itt	pl
 800815a:	6003      	strpl	r3, [r0, #0]
 800815c:	2202      	movpl	r2, #2
 800815e:	4610      	mov	r0, r2
 8008160:	4770      	bx	lr
 8008162:	b299      	uxth	r1, r3
 8008164:	b909      	cbnz	r1, 800816a <__lo0bits+0x2a>
 8008166:	0c1b      	lsrs	r3, r3, #16
 8008168:	2210      	movs	r2, #16
 800816a:	b2d9      	uxtb	r1, r3
 800816c:	b909      	cbnz	r1, 8008172 <__lo0bits+0x32>
 800816e:	3208      	adds	r2, #8
 8008170:	0a1b      	lsrs	r3, r3, #8
 8008172:	0719      	lsls	r1, r3, #28
 8008174:	bf04      	itt	eq
 8008176:	091b      	lsreq	r3, r3, #4
 8008178:	3204      	addeq	r2, #4
 800817a:	0799      	lsls	r1, r3, #30
 800817c:	bf04      	itt	eq
 800817e:	089b      	lsreq	r3, r3, #2
 8008180:	3202      	addeq	r2, #2
 8008182:	07d9      	lsls	r1, r3, #31
 8008184:	d403      	bmi.n	800818e <__lo0bits+0x4e>
 8008186:	085b      	lsrs	r3, r3, #1
 8008188:	f102 0201 	add.w	r2, r2, #1
 800818c:	d003      	beq.n	8008196 <__lo0bits+0x56>
 800818e:	6003      	str	r3, [r0, #0]
 8008190:	e7e5      	b.n	800815e <__lo0bits+0x1e>
 8008192:	2200      	movs	r2, #0
 8008194:	e7e3      	b.n	800815e <__lo0bits+0x1e>
 8008196:	2220      	movs	r2, #32
 8008198:	e7e1      	b.n	800815e <__lo0bits+0x1e>
	...

0800819c <__i2b>:
 800819c:	b510      	push	{r4, lr}
 800819e:	460c      	mov	r4, r1
 80081a0:	2101      	movs	r1, #1
 80081a2:	f7ff febb 	bl	8007f1c <_Balloc>
 80081a6:	4602      	mov	r2, r0
 80081a8:	b928      	cbnz	r0, 80081b6 <__i2b+0x1a>
 80081aa:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <__i2b+0x24>)
 80081ac:	4805      	ldr	r0, [pc, #20]	; (80081c4 <__i2b+0x28>)
 80081ae:	f240 1145 	movw	r1, #325	; 0x145
 80081b2:	f001 fc51 	bl	8009a58 <__assert_func>
 80081b6:	2301      	movs	r3, #1
 80081b8:	6144      	str	r4, [r0, #20]
 80081ba:	6103      	str	r3, [r0, #16]
 80081bc:	bd10      	pop	{r4, pc}
 80081be:	bf00      	nop
 80081c0:	0800acbd 	.word	0x0800acbd
 80081c4:	0800acce 	.word	0x0800acce

080081c8 <__multiply>:
 80081c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	4691      	mov	r9, r2
 80081ce:	690a      	ldr	r2, [r1, #16]
 80081d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	bfb8      	it	lt
 80081d8:	460b      	movlt	r3, r1
 80081da:	460c      	mov	r4, r1
 80081dc:	bfbc      	itt	lt
 80081de:	464c      	movlt	r4, r9
 80081e0:	4699      	movlt	r9, r3
 80081e2:	6927      	ldr	r7, [r4, #16]
 80081e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081e8:	68a3      	ldr	r3, [r4, #8]
 80081ea:	6861      	ldr	r1, [r4, #4]
 80081ec:	eb07 060a 	add.w	r6, r7, sl
 80081f0:	42b3      	cmp	r3, r6
 80081f2:	b085      	sub	sp, #20
 80081f4:	bfb8      	it	lt
 80081f6:	3101      	addlt	r1, #1
 80081f8:	f7ff fe90 	bl	8007f1c <_Balloc>
 80081fc:	b930      	cbnz	r0, 800820c <__multiply+0x44>
 80081fe:	4602      	mov	r2, r0
 8008200:	4b44      	ldr	r3, [pc, #272]	; (8008314 <__multiply+0x14c>)
 8008202:	4845      	ldr	r0, [pc, #276]	; (8008318 <__multiply+0x150>)
 8008204:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008208:	f001 fc26 	bl	8009a58 <__assert_func>
 800820c:	f100 0514 	add.w	r5, r0, #20
 8008210:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008214:	462b      	mov	r3, r5
 8008216:	2200      	movs	r2, #0
 8008218:	4543      	cmp	r3, r8
 800821a:	d321      	bcc.n	8008260 <__multiply+0x98>
 800821c:	f104 0314 	add.w	r3, r4, #20
 8008220:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008224:	f109 0314 	add.w	r3, r9, #20
 8008228:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800822c:	9202      	str	r2, [sp, #8]
 800822e:	1b3a      	subs	r2, r7, r4
 8008230:	3a15      	subs	r2, #21
 8008232:	f022 0203 	bic.w	r2, r2, #3
 8008236:	3204      	adds	r2, #4
 8008238:	f104 0115 	add.w	r1, r4, #21
 800823c:	428f      	cmp	r7, r1
 800823e:	bf38      	it	cc
 8008240:	2204      	movcc	r2, #4
 8008242:	9201      	str	r2, [sp, #4]
 8008244:	9a02      	ldr	r2, [sp, #8]
 8008246:	9303      	str	r3, [sp, #12]
 8008248:	429a      	cmp	r2, r3
 800824a:	d80c      	bhi.n	8008266 <__multiply+0x9e>
 800824c:	2e00      	cmp	r6, #0
 800824e:	dd03      	ble.n	8008258 <__multiply+0x90>
 8008250:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008254:	2b00      	cmp	r3, #0
 8008256:	d05b      	beq.n	8008310 <__multiply+0x148>
 8008258:	6106      	str	r6, [r0, #16]
 800825a:	b005      	add	sp, #20
 800825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008260:	f843 2b04 	str.w	r2, [r3], #4
 8008264:	e7d8      	b.n	8008218 <__multiply+0x50>
 8008266:	f8b3 a000 	ldrh.w	sl, [r3]
 800826a:	f1ba 0f00 	cmp.w	sl, #0
 800826e:	d024      	beq.n	80082ba <__multiply+0xf2>
 8008270:	f104 0e14 	add.w	lr, r4, #20
 8008274:	46a9      	mov	r9, r5
 8008276:	f04f 0c00 	mov.w	ip, #0
 800827a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800827e:	f8d9 1000 	ldr.w	r1, [r9]
 8008282:	fa1f fb82 	uxth.w	fp, r2
 8008286:	b289      	uxth	r1, r1
 8008288:	fb0a 110b 	mla	r1, sl, fp, r1
 800828c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008290:	f8d9 2000 	ldr.w	r2, [r9]
 8008294:	4461      	add	r1, ip
 8008296:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800829a:	fb0a c20b 	mla	r2, sl, fp, ip
 800829e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80082a2:	b289      	uxth	r1, r1
 80082a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082a8:	4577      	cmp	r7, lr
 80082aa:	f849 1b04 	str.w	r1, [r9], #4
 80082ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082b2:	d8e2      	bhi.n	800827a <__multiply+0xb2>
 80082b4:	9a01      	ldr	r2, [sp, #4]
 80082b6:	f845 c002 	str.w	ip, [r5, r2]
 80082ba:	9a03      	ldr	r2, [sp, #12]
 80082bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082c0:	3304      	adds	r3, #4
 80082c2:	f1b9 0f00 	cmp.w	r9, #0
 80082c6:	d021      	beq.n	800830c <__multiply+0x144>
 80082c8:	6829      	ldr	r1, [r5, #0]
 80082ca:	f104 0c14 	add.w	ip, r4, #20
 80082ce:	46ae      	mov	lr, r5
 80082d0:	f04f 0a00 	mov.w	sl, #0
 80082d4:	f8bc b000 	ldrh.w	fp, [ip]
 80082d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80082dc:	fb09 220b 	mla	r2, r9, fp, r2
 80082e0:	4452      	add	r2, sl
 80082e2:	b289      	uxth	r1, r1
 80082e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082e8:	f84e 1b04 	str.w	r1, [lr], #4
 80082ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80082f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082f4:	f8be 1000 	ldrh.w	r1, [lr]
 80082f8:	fb09 110a 	mla	r1, r9, sl, r1
 80082fc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008300:	4567      	cmp	r7, ip
 8008302:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008306:	d8e5      	bhi.n	80082d4 <__multiply+0x10c>
 8008308:	9a01      	ldr	r2, [sp, #4]
 800830a:	50a9      	str	r1, [r5, r2]
 800830c:	3504      	adds	r5, #4
 800830e:	e799      	b.n	8008244 <__multiply+0x7c>
 8008310:	3e01      	subs	r6, #1
 8008312:	e79b      	b.n	800824c <__multiply+0x84>
 8008314:	0800acbd 	.word	0x0800acbd
 8008318:	0800acce 	.word	0x0800acce

0800831c <__pow5mult>:
 800831c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008320:	4615      	mov	r5, r2
 8008322:	f012 0203 	ands.w	r2, r2, #3
 8008326:	4606      	mov	r6, r0
 8008328:	460f      	mov	r7, r1
 800832a:	d007      	beq.n	800833c <__pow5mult+0x20>
 800832c:	4c25      	ldr	r4, [pc, #148]	; (80083c4 <__pow5mult+0xa8>)
 800832e:	3a01      	subs	r2, #1
 8008330:	2300      	movs	r3, #0
 8008332:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008336:	f7ff fe53 	bl	8007fe0 <__multadd>
 800833a:	4607      	mov	r7, r0
 800833c:	10ad      	asrs	r5, r5, #2
 800833e:	d03d      	beq.n	80083bc <__pow5mult+0xa0>
 8008340:	69f4      	ldr	r4, [r6, #28]
 8008342:	b97c      	cbnz	r4, 8008364 <__pow5mult+0x48>
 8008344:	2010      	movs	r0, #16
 8008346:	f7ff fd35 	bl	8007db4 <malloc>
 800834a:	4602      	mov	r2, r0
 800834c:	61f0      	str	r0, [r6, #28]
 800834e:	b928      	cbnz	r0, 800835c <__pow5mult+0x40>
 8008350:	4b1d      	ldr	r3, [pc, #116]	; (80083c8 <__pow5mult+0xac>)
 8008352:	481e      	ldr	r0, [pc, #120]	; (80083cc <__pow5mult+0xb0>)
 8008354:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008358:	f001 fb7e 	bl	8009a58 <__assert_func>
 800835c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008360:	6004      	str	r4, [r0, #0]
 8008362:	60c4      	str	r4, [r0, #12]
 8008364:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008368:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800836c:	b94c      	cbnz	r4, 8008382 <__pow5mult+0x66>
 800836e:	f240 2171 	movw	r1, #625	; 0x271
 8008372:	4630      	mov	r0, r6
 8008374:	f7ff ff12 	bl	800819c <__i2b>
 8008378:	2300      	movs	r3, #0
 800837a:	f8c8 0008 	str.w	r0, [r8, #8]
 800837e:	4604      	mov	r4, r0
 8008380:	6003      	str	r3, [r0, #0]
 8008382:	f04f 0900 	mov.w	r9, #0
 8008386:	07eb      	lsls	r3, r5, #31
 8008388:	d50a      	bpl.n	80083a0 <__pow5mult+0x84>
 800838a:	4639      	mov	r1, r7
 800838c:	4622      	mov	r2, r4
 800838e:	4630      	mov	r0, r6
 8008390:	f7ff ff1a 	bl	80081c8 <__multiply>
 8008394:	4639      	mov	r1, r7
 8008396:	4680      	mov	r8, r0
 8008398:	4630      	mov	r0, r6
 800839a:	f7ff fdff 	bl	8007f9c <_Bfree>
 800839e:	4647      	mov	r7, r8
 80083a0:	106d      	asrs	r5, r5, #1
 80083a2:	d00b      	beq.n	80083bc <__pow5mult+0xa0>
 80083a4:	6820      	ldr	r0, [r4, #0]
 80083a6:	b938      	cbnz	r0, 80083b8 <__pow5mult+0x9c>
 80083a8:	4622      	mov	r2, r4
 80083aa:	4621      	mov	r1, r4
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7ff ff0b 	bl	80081c8 <__multiply>
 80083b2:	6020      	str	r0, [r4, #0]
 80083b4:	f8c0 9000 	str.w	r9, [r0]
 80083b8:	4604      	mov	r4, r0
 80083ba:	e7e4      	b.n	8008386 <__pow5mult+0x6a>
 80083bc:	4638      	mov	r0, r7
 80083be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083c2:	bf00      	nop
 80083c4:	0800ae18 	.word	0x0800ae18
 80083c8:	0800ac4e 	.word	0x0800ac4e
 80083cc:	0800acce 	.word	0x0800acce

080083d0 <__lshift>:
 80083d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d4:	460c      	mov	r4, r1
 80083d6:	6849      	ldr	r1, [r1, #4]
 80083d8:	6923      	ldr	r3, [r4, #16]
 80083da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083de:	68a3      	ldr	r3, [r4, #8]
 80083e0:	4607      	mov	r7, r0
 80083e2:	4691      	mov	r9, r2
 80083e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083e8:	f108 0601 	add.w	r6, r8, #1
 80083ec:	42b3      	cmp	r3, r6
 80083ee:	db0b      	blt.n	8008408 <__lshift+0x38>
 80083f0:	4638      	mov	r0, r7
 80083f2:	f7ff fd93 	bl	8007f1c <_Balloc>
 80083f6:	4605      	mov	r5, r0
 80083f8:	b948      	cbnz	r0, 800840e <__lshift+0x3e>
 80083fa:	4602      	mov	r2, r0
 80083fc:	4b28      	ldr	r3, [pc, #160]	; (80084a0 <__lshift+0xd0>)
 80083fe:	4829      	ldr	r0, [pc, #164]	; (80084a4 <__lshift+0xd4>)
 8008400:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008404:	f001 fb28 	bl	8009a58 <__assert_func>
 8008408:	3101      	adds	r1, #1
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	e7ee      	b.n	80083ec <__lshift+0x1c>
 800840e:	2300      	movs	r3, #0
 8008410:	f100 0114 	add.w	r1, r0, #20
 8008414:	f100 0210 	add.w	r2, r0, #16
 8008418:	4618      	mov	r0, r3
 800841a:	4553      	cmp	r3, sl
 800841c:	db33      	blt.n	8008486 <__lshift+0xb6>
 800841e:	6920      	ldr	r0, [r4, #16]
 8008420:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008424:	f104 0314 	add.w	r3, r4, #20
 8008428:	f019 091f 	ands.w	r9, r9, #31
 800842c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008430:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008434:	d02b      	beq.n	800848e <__lshift+0xbe>
 8008436:	f1c9 0e20 	rsb	lr, r9, #32
 800843a:	468a      	mov	sl, r1
 800843c:	2200      	movs	r2, #0
 800843e:	6818      	ldr	r0, [r3, #0]
 8008440:	fa00 f009 	lsl.w	r0, r0, r9
 8008444:	4310      	orrs	r0, r2
 8008446:	f84a 0b04 	str.w	r0, [sl], #4
 800844a:	f853 2b04 	ldr.w	r2, [r3], #4
 800844e:	459c      	cmp	ip, r3
 8008450:	fa22 f20e 	lsr.w	r2, r2, lr
 8008454:	d8f3      	bhi.n	800843e <__lshift+0x6e>
 8008456:	ebac 0304 	sub.w	r3, ip, r4
 800845a:	3b15      	subs	r3, #21
 800845c:	f023 0303 	bic.w	r3, r3, #3
 8008460:	3304      	adds	r3, #4
 8008462:	f104 0015 	add.w	r0, r4, #21
 8008466:	4584      	cmp	ip, r0
 8008468:	bf38      	it	cc
 800846a:	2304      	movcc	r3, #4
 800846c:	50ca      	str	r2, [r1, r3]
 800846e:	b10a      	cbz	r2, 8008474 <__lshift+0xa4>
 8008470:	f108 0602 	add.w	r6, r8, #2
 8008474:	3e01      	subs	r6, #1
 8008476:	4638      	mov	r0, r7
 8008478:	612e      	str	r6, [r5, #16]
 800847a:	4621      	mov	r1, r4
 800847c:	f7ff fd8e 	bl	8007f9c <_Bfree>
 8008480:	4628      	mov	r0, r5
 8008482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008486:	f842 0f04 	str.w	r0, [r2, #4]!
 800848a:	3301      	adds	r3, #1
 800848c:	e7c5      	b.n	800841a <__lshift+0x4a>
 800848e:	3904      	subs	r1, #4
 8008490:	f853 2b04 	ldr.w	r2, [r3], #4
 8008494:	f841 2f04 	str.w	r2, [r1, #4]!
 8008498:	459c      	cmp	ip, r3
 800849a:	d8f9      	bhi.n	8008490 <__lshift+0xc0>
 800849c:	e7ea      	b.n	8008474 <__lshift+0xa4>
 800849e:	bf00      	nop
 80084a0:	0800acbd 	.word	0x0800acbd
 80084a4:	0800acce 	.word	0x0800acce

080084a8 <__mcmp>:
 80084a8:	b530      	push	{r4, r5, lr}
 80084aa:	6902      	ldr	r2, [r0, #16]
 80084ac:	690c      	ldr	r4, [r1, #16]
 80084ae:	1b12      	subs	r2, r2, r4
 80084b0:	d10e      	bne.n	80084d0 <__mcmp+0x28>
 80084b2:	f100 0314 	add.w	r3, r0, #20
 80084b6:	3114      	adds	r1, #20
 80084b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80084bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80084c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80084c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80084c8:	42a5      	cmp	r5, r4
 80084ca:	d003      	beq.n	80084d4 <__mcmp+0x2c>
 80084cc:	d305      	bcc.n	80084da <__mcmp+0x32>
 80084ce:	2201      	movs	r2, #1
 80084d0:	4610      	mov	r0, r2
 80084d2:	bd30      	pop	{r4, r5, pc}
 80084d4:	4283      	cmp	r3, r0
 80084d6:	d3f3      	bcc.n	80084c0 <__mcmp+0x18>
 80084d8:	e7fa      	b.n	80084d0 <__mcmp+0x28>
 80084da:	f04f 32ff 	mov.w	r2, #4294967295
 80084de:	e7f7      	b.n	80084d0 <__mcmp+0x28>

080084e0 <__mdiff>:
 80084e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	460c      	mov	r4, r1
 80084e6:	4606      	mov	r6, r0
 80084e8:	4611      	mov	r1, r2
 80084ea:	4620      	mov	r0, r4
 80084ec:	4690      	mov	r8, r2
 80084ee:	f7ff ffdb 	bl	80084a8 <__mcmp>
 80084f2:	1e05      	subs	r5, r0, #0
 80084f4:	d110      	bne.n	8008518 <__mdiff+0x38>
 80084f6:	4629      	mov	r1, r5
 80084f8:	4630      	mov	r0, r6
 80084fa:	f7ff fd0f 	bl	8007f1c <_Balloc>
 80084fe:	b930      	cbnz	r0, 800850e <__mdiff+0x2e>
 8008500:	4b3a      	ldr	r3, [pc, #232]	; (80085ec <__mdiff+0x10c>)
 8008502:	4602      	mov	r2, r0
 8008504:	f240 2137 	movw	r1, #567	; 0x237
 8008508:	4839      	ldr	r0, [pc, #228]	; (80085f0 <__mdiff+0x110>)
 800850a:	f001 faa5 	bl	8009a58 <__assert_func>
 800850e:	2301      	movs	r3, #1
 8008510:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008514:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008518:	bfa4      	itt	ge
 800851a:	4643      	movge	r3, r8
 800851c:	46a0      	movge	r8, r4
 800851e:	4630      	mov	r0, r6
 8008520:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008524:	bfa6      	itte	ge
 8008526:	461c      	movge	r4, r3
 8008528:	2500      	movge	r5, #0
 800852a:	2501      	movlt	r5, #1
 800852c:	f7ff fcf6 	bl	8007f1c <_Balloc>
 8008530:	b920      	cbnz	r0, 800853c <__mdiff+0x5c>
 8008532:	4b2e      	ldr	r3, [pc, #184]	; (80085ec <__mdiff+0x10c>)
 8008534:	4602      	mov	r2, r0
 8008536:	f240 2145 	movw	r1, #581	; 0x245
 800853a:	e7e5      	b.n	8008508 <__mdiff+0x28>
 800853c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008540:	6926      	ldr	r6, [r4, #16]
 8008542:	60c5      	str	r5, [r0, #12]
 8008544:	f104 0914 	add.w	r9, r4, #20
 8008548:	f108 0514 	add.w	r5, r8, #20
 800854c:	f100 0e14 	add.w	lr, r0, #20
 8008550:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008554:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008558:	f108 0210 	add.w	r2, r8, #16
 800855c:	46f2      	mov	sl, lr
 800855e:	2100      	movs	r1, #0
 8008560:	f859 3b04 	ldr.w	r3, [r9], #4
 8008564:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008568:	fa11 f88b 	uxtah	r8, r1, fp
 800856c:	b299      	uxth	r1, r3
 800856e:	0c1b      	lsrs	r3, r3, #16
 8008570:	eba8 0801 	sub.w	r8, r8, r1
 8008574:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008578:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800857c:	fa1f f888 	uxth.w	r8, r8
 8008580:	1419      	asrs	r1, r3, #16
 8008582:	454e      	cmp	r6, r9
 8008584:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008588:	f84a 3b04 	str.w	r3, [sl], #4
 800858c:	d8e8      	bhi.n	8008560 <__mdiff+0x80>
 800858e:	1b33      	subs	r3, r6, r4
 8008590:	3b15      	subs	r3, #21
 8008592:	f023 0303 	bic.w	r3, r3, #3
 8008596:	3304      	adds	r3, #4
 8008598:	3415      	adds	r4, #21
 800859a:	42a6      	cmp	r6, r4
 800859c:	bf38      	it	cc
 800859e:	2304      	movcc	r3, #4
 80085a0:	441d      	add	r5, r3
 80085a2:	4473      	add	r3, lr
 80085a4:	469e      	mov	lr, r3
 80085a6:	462e      	mov	r6, r5
 80085a8:	4566      	cmp	r6, ip
 80085aa:	d30e      	bcc.n	80085ca <__mdiff+0xea>
 80085ac:	f10c 0203 	add.w	r2, ip, #3
 80085b0:	1b52      	subs	r2, r2, r5
 80085b2:	f022 0203 	bic.w	r2, r2, #3
 80085b6:	3d03      	subs	r5, #3
 80085b8:	45ac      	cmp	ip, r5
 80085ba:	bf38      	it	cc
 80085bc:	2200      	movcc	r2, #0
 80085be:	4413      	add	r3, r2
 80085c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80085c4:	b17a      	cbz	r2, 80085e6 <__mdiff+0x106>
 80085c6:	6107      	str	r7, [r0, #16]
 80085c8:	e7a4      	b.n	8008514 <__mdiff+0x34>
 80085ca:	f856 8b04 	ldr.w	r8, [r6], #4
 80085ce:	fa11 f288 	uxtah	r2, r1, r8
 80085d2:	1414      	asrs	r4, r2, #16
 80085d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80085d8:	b292      	uxth	r2, r2
 80085da:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80085de:	f84e 2b04 	str.w	r2, [lr], #4
 80085e2:	1421      	asrs	r1, r4, #16
 80085e4:	e7e0      	b.n	80085a8 <__mdiff+0xc8>
 80085e6:	3f01      	subs	r7, #1
 80085e8:	e7ea      	b.n	80085c0 <__mdiff+0xe0>
 80085ea:	bf00      	nop
 80085ec:	0800acbd 	.word	0x0800acbd
 80085f0:	0800acce 	.word	0x0800acce

080085f4 <__ulp>:
 80085f4:	b082      	sub	sp, #8
 80085f6:	ed8d 0b00 	vstr	d0, [sp]
 80085fa:	9a01      	ldr	r2, [sp, #4]
 80085fc:	4b0f      	ldr	r3, [pc, #60]	; (800863c <__ulp+0x48>)
 80085fe:	4013      	ands	r3, r2
 8008600:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008604:	2b00      	cmp	r3, #0
 8008606:	dc08      	bgt.n	800861a <__ulp+0x26>
 8008608:	425b      	negs	r3, r3
 800860a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800860e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008612:	da04      	bge.n	800861e <__ulp+0x2a>
 8008614:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008618:	4113      	asrs	r3, r2
 800861a:	2200      	movs	r2, #0
 800861c:	e008      	b.n	8008630 <__ulp+0x3c>
 800861e:	f1a2 0314 	sub.w	r3, r2, #20
 8008622:	2b1e      	cmp	r3, #30
 8008624:	bfda      	itte	le
 8008626:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800862a:	40da      	lsrle	r2, r3
 800862c:	2201      	movgt	r2, #1
 800862e:	2300      	movs	r3, #0
 8008630:	4619      	mov	r1, r3
 8008632:	4610      	mov	r0, r2
 8008634:	ec41 0b10 	vmov	d0, r0, r1
 8008638:	b002      	add	sp, #8
 800863a:	4770      	bx	lr
 800863c:	7ff00000 	.word	0x7ff00000

08008640 <__b2d>:
 8008640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008644:	6906      	ldr	r6, [r0, #16]
 8008646:	f100 0814 	add.w	r8, r0, #20
 800864a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800864e:	1f37      	subs	r7, r6, #4
 8008650:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008654:	4610      	mov	r0, r2
 8008656:	f7ff fd53 	bl	8008100 <__hi0bits>
 800865a:	f1c0 0320 	rsb	r3, r0, #32
 800865e:	280a      	cmp	r0, #10
 8008660:	600b      	str	r3, [r1, #0]
 8008662:	491b      	ldr	r1, [pc, #108]	; (80086d0 <__b2d+0x90>)
 8008664:	dc15      	bgt.n	8008692 <__b2d+0x52>
 8008666:	f1c0 0c0b 	rsb	ip, r0, #11
 800866a:	fa22 f30c 	lsr.w	r3, r2, ip
 800866e:	45b8      	cmp	r8, r7
 8008670:	ea43 0501 	orr.w	r5, r3, r1
 8008674:	bf34      	ite	cc
 8008676:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800867a:	2300      	movcs	r3, #0
 800867c:	3015      	adds	r0, #21
 800867e:	fa02 f000 	lsl.w	r0, r2, r0
 8008682:	fa23 f30c 	lsr.w	r3, r3, ip
 8008686:	4303      	orrs	r3, r0
 8008688:	461c      	mov	r4, r3
 800868a:	ec45 4b10 	vmov	d0, r4, r5
 800868e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008692:	45b8      	cmp	r8, r7
 8008694:	bf3a      	itte	cc
 8008696:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800869a:	f1a6 0708 	subcc.w	r7, r6, #8
 800869e:	2300      	movcs	r3, #0
 80086a0:	380b      	subs	r0, #11
 80086a2:	d012      	beq.n	80086ca <__b2d+0x8a>
 80086a4:	f1c0 0120 	rsb	r1, r0, #32
 80086a8:	fa23 f401 	lsr.w	r4, r3, r1
 80086ac:	4082      	lsls	r2, r0
 80086ae:	4322      	orrs	r2, r4
 80086b0:	4547      	cmp	r7, r8
 80086b2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80086b6:	bf8c      	ite	hi
 80086b8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80086bc:	2200      	movls	r2, #0
 80086be:	4083      	lsls	r3, r0
 80086c0:	40ca      	lsrs	r2, r1
 80086c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80086c6:	4313      	orrs	r3, r2
 80086c8:	e7de      	b.n	8008688 <__b2d+0x48>
 80086ca:	ea42 0501 	orr.w	r5, r2, r1
 80086ce:	e7db      	b.n	8008688 <__b2d+0x48>
 80086d0:	3ff00000 	.word	0x3ff00000

080086d4 <__d2b>:
 80086d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086d8:	460f      	mov	r7, r1
 80086da:	2101      	movs	r1, #1
 80086dc:	ec59 8b10 	vmov	r8, r9, d0
 80086e0:	4616      	mov	r6, r2
 80086e2:	f7ff fc1b 	bl	8007f1c <_Balloc>
 80086e6:	4604      	mov	r4, r0
 80086e8:	b930      	cbnz	r0, 80086f8 <__d2b+0x24>
 80086ea:	4602      	mov	r2, r0
 80086ec:	4b24      	ldr	r3, [pc, #144]	; (8008780 <__d2b+0xac>)
 80086ee:	4825      	ldr	r0, [pc, #148]	; (8008784 <__d2b+0xb0>)
 80086f0:	f240 310f 	movw	r1, #783	; 0x30f
 80086f4:	f001 f9b0 	bl	8009a58 <__assert_func>
 80086f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008700:	bb2d      	cbnz	r5, 800874e <__d2b+0x7a>
 8008702:	9301      	str	r3, [sp, #4]
 8008704:	f1b8 0300 	subs.w	r3, r8, #0
 8008708:	d026      	beq.n	8008758 <__d2b+0x84>
 800870a:	4668      	mov	r0, sp
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	f7ff fd17 	bl	8008140 <__lo0bits>
 8008712:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008716:	b1e8      	cbz	r0, 8008754 <__d2b+0x80>
 8008718:	f1c0 0320 	rsb	r3, r0, #32
 800871c:	fa02 f303 	lsl.w	r3, r2, r3
 8008720:	430b      	orrs	r3, r1
 8008722:	40c2      	lsrs	r2, r0
 8008724:	6163      	str	r3, [r4, #20]
 8008726:	9201      	str	r2, [sp, #4]
 8008728:	9b01      	ldr	r3, [sp, #4]
 800872a:	61a3      	str	r3, [r4, #24]
 800872c:	2b00      	cmp	r3, #0
 800872e:	bf14      	ite	ne
 8008730:	2202      	movne	r2, #2
 8008732:	2201      	moveq	r2, #1
 8008734:	6122      	str	r2, [r4, #16]
 8008736:	b1bd      	cbz	r5, 8008768 <__d2b+0x94>
 8008738:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800873c:	4405      	add	r5, r0
 800873e:	603d      	str	r5, [r7, #0]
 8008740:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008744:	6030      	str	r0, [r6, #0]
 8008746:	4620      	mov	r0, r4
 8008748:	b003      	add	sp, #12
 800874a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800874e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008752:	e7d6      	b.n	8008702 <__d2b+0x2e>
 8008754:	6161      	str	r1, [r4, #20]
 8008756:	e7e7      	b.n	8008728 <__d2b+0x54>
 8008758:	a801      	add	r0, sp, #4
 800875a:	f7ff fcf1 	bl	8008140 <__lo0bits>
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	6163      	str	r3, [r4, #20]
 8008762:	3020      	adds	r0, #32
 8008764:	2201      	movs	r2, #1
 8008766:	e7e5      	b.n	8008734 <__d2b+0x60>
 8008768:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800876c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008770:	6038      	str	r0, [r7, #0]
 8008772:	6918      	ldr	r0, [r3, #16]
 8008774:	f7ff fcc4 	bl	8008100 <__hi0bits>
 8008778:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800877c:	e7e2      	b.n	8008744 <__d2b+0x70>
 800877e:	bf00      	nop
 8008780:	0800acbd 	.word	0x0800acbd
 8008784:	0800acce 	.word	0x0800acce

08008788 <__ratio>:
 8008788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	4688      	mov	r8, r1
 800878e:	4669      	mov	r1, sp
 8008790:	4681      	mov	r9, r0
 8008792:	f7ff ff55 	bl	8008640 <__b2d>
 8008796:	a901      	add	r1, sp, #4
 8008798:	4640      	mov	r0, r8
 800879a:	ec55 4b10 	vmov	r4, r5, d0
 800879e:	f7ff ff4f 	bl	8008640 <__b2d>
 80087a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80087aa:	eba3 0c02 	sub.w	ip, r3, r2
 80087ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80087b2:	1a9b      	subs	r3, r3, r2
 80087b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80087b8:	ec51 0b10 	vmov	r0, r1, d0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bfd6      	itet	le
 80087c0:	460a      	movle	r2, r1
 80087c2:	462a      	movgt	r2, r5
 80087c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087c8:	468b      	mov	fp, r1
 80087ca:	462f      	mov	r7, r5
 80087cc:	bfd4      	ite	le
 80087ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80087d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80087d6:	4620      	mov	r0, r4
 80087d8:	ee10 2a10 	vmov	r2, s0
 80087dc:	465b      	mov	r3, fp
 80087de:	4639      	mov	r1, r7
 80087e0:	f7f8 f84c 	bl	800087c <__aeabi_ddiv>
 80087e4:	ec41 0b10 	vmov	d0, r0, r1
 80087e8:	b003      	add	sp, #12
 80087ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087ee <__copybits>:
 80087ee:	3901      	subs	r1, #1
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	1149      	asrs	r1, r1, #5
 80087f4:	6914      	ldr	r4, [r2, #16]
 80087f6:	3101      	adds	r1, #1
 80087f8:	f102 0314 	add.w	r3, r2, #20
 80087fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008800:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008804:	1f05      	subs	r5, r0, #4
 8008806:	42a3      	cmp	r3, r4
 8008808:	d30c      	bcc.n	8008824 <__copybits+0x36>
 800880a:	1aa3      	subs	r3, r4, r2
 800880c:	3b11      	subs	r3, #17
 800880e:	f023 0303 	bic.w	r3, r3, #3
 8008812:	3211      	adds	r2, #17
 8008814:	42a2      	cmp	r2, r4
 8008816:	bf88      	it	hi
 8008818:	2300      	movhi	r3, #0
 800881a:	4418      	add	r0, r3
 800881c:	2300      	movs	r3, #0
 800881e:	4288      	cmp	r0, r1
 8008820:	d305      	bcc.n	800882e <__copybits+0x40>
 8008822:	bd70      	pop	{r4, r5, r6, pc}
 8008824:	f853 6b04 	ldr.w	r6, [r3], #4
 8008828:	f845 6f04 	str.w	r6, [r5, #4]!
 800882c:	e7eb      	b.n	8008806 <__copybits+0x18>
 800882e:	f840 3b04 	str.w	r3, [r0], #4
 8008832:	e7f4      	b.n	800881e <__copybits+0x30>

08008834 <__any_on>:
 8008834:	f100 0214 	add.w	r2, r0, #20
 8008838:	6900      	ldr	r0, [r0, #16]
 800883a:	114b      	asrs	r3, r1, #5
 800883c:	4298      	cmp	r0, r3
 800883e:	b510      	push	{r4, lr}
 8008840:	db11      	blt.n	8008866 <__any_on+0x32>
 8008842:	dd0a      	ble.n	800885a <__any_on+0x26>
 8008844:	f011 011f 	ands.w	r1, r1, #31
 8008848:	d007      	beq.n	800885a <__any_on+0x26>
 800884a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800884e:	fa24 f001 	lsr.w	r0, r4, r1
 8008852:	fa00 f101 	lsl.w	r1, r0, r1
 8008856:	428c      	cmp	r4, r1
 8008858:	d10b      	bne.n	8008872 <__any_on+0x3e>
 800885a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800885e:	4293      	cmp	r3, r2
 8008860:	d803      	bhi.n	800886a <__any_on+0x36>
 8008862:	2000      	movs	r0, #0
 8008864:	bd10      	pop	{r4, pc}
 8008866:	4603      	mov	r3, r0
 8008868:	e7f7      	b.n	800885a <__any_on+0x26>
 800886a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800886e:	2900      	cmp	r1, #0
 8008870:	d0f5      	beq.n	800885e <__any_on+0x2a>
 8008872:	2001      	movs	r0, #1
 8008874:	e7f6      	b.n	8008864 <__any_on+0x30>

08008876 <sulp>:
 8008876:	b570      	push	{r4, r5, r6, lr}
 8008878:	4604      	mov	r4, r0
 800887a:	460d      	mov	r5, r1
 800887c:	ec45 4b10 	vmov	d0, r4, r5
 8008880:	4616      	mov	r6, r2
 8008882:	f7ff feb7 	bl	80085f4 <__ulp>
 8008886:	ec51 0b10 	vmov	r0, r1, d0
 800888a:	b17e      	cbz	r6, 80088ac <sulp+0x36>
 800888c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008890:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008894:	2b00      	cmp	r3, #0
 8008896:	dd09      	ble.n	80088ac <sulp+0x36>
 8008898:	051b      	lsls	r3, r3, #20
 800889a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800889e:	2400      	movs	r4, #0
 80088a0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80088a4:	4622      	mov	r2, r4
 80088a6:	462b      	mov	r3, r5
 80088a8:	f7f7 febe 	bl	8000628 <__aeabi_dmul>
 80088ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080088b0 <_strtod_l>:
 80088b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	ed2d 8b02 	vpush	{d8}
 80088b8:	b09b      	sub	sp, #108	; 0x6c
 80088ba:	4604      	mov	r4, r0
 80088bc:	9213      	str	r2, [sp, #76]	; 0x4c
 80088be:	2200      	movs	r2, #0
 80088c0:	9216      	str	r2, [sp, #88]	; 0x58
 80088c2:	460d      	mov	r5, r1
 80088c4:	f04f 0800 	mov.w	r8, #0
 80088c8:	f04f 0900 	mov.w	r9, #0
 80088cc:	460a      	mov	r2, r1
 80088ce:	9215      	str	r2, [sp, #84]	; 0x54
 80088d0:	7811      	ldrb	r1, [r2, #0]
 80088d2:	292b      	cmp	r1, #43	; 0x2b
 80088d4:	d04c      	beq.n	8008970 <_strtod_l+0xc0>
 80088d6:	d83a      	bhi.n	800894e <_strtod_l+0x9e>
 80088d8:	290d      	cmp	r1, #13
 80088da:	d834      	bhi.n	8008946 <_strtod_l+0x96>
 80088dc:	2908      	cmp	r1, #8
 80088de:	d834      	bhi.n	800894a <_strtod_l+0x9a>
 80088e0:	2900      	cmp	r1, #0
 80088e2:	d03d      	beq.n	8008960 <_strtod_l+0xb0>
 80088e4:	2200      	movs	r2, #0
 80088e6:	920a      	str	r2, [sp, #40]	; 0x28
 80088e8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80088ea:	7832      	ldrb	r2, [r6, #0]
 80088ec:	2a30      	cmp	r2, #48	; 0x30
 80088ee:	f040 80b4 	bne.w	8008a5a <_strtod_l+0x1aa>
 80088f2:	7872      	ldrb	r2, [r6, #1]
 80088f4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80088f8:	2a58      	cmp	r2, #88	; 0x58
 80088fa:	d170      	bne.n	80089de <_strtod_l+0x12e>
 80088fc:	9302      	str	r3, [sp, #8]
 80088fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008900:	9301      	str	r3, [sp, #4]
 8008902:	ab16      	add	r3, sp, #88	; 0x58
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	4a8e      	ldr	r2, [pc, #568]	; (8008b40 <_strtod_l+0x290>)
 8008908:	ab17      	add	r3, sp, #92	; 0x5c
 800890a:	a915      	add	r1, sp, #84	; 0x54
 800890c:	4620      	mov	r0, r4
 800890e:	f001 f93f 	bl	8009b90 <__gethex>
 8008912:	f010 070f 	ands.w	r7, r0, #15
 8008916:	4605      	mov	r5, r0
 8008918:	d005      	beq.n	8008926 <_strtod_l+0x76>
 800891a:	2f06      	cmp	r7, #6
 800891c:	d12a      	bne.n	8008974 <_strtod_l+0xc4>
 800891e:	3601      	adds	r6, #1
 8008920:	2300      	movs	r3, #0
 8008922:	9615      	str	r6, [sp, #84]	; 0x54
 8008924:	930a      	str	r3, [sp, #40]	; 0x28
 8008926:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008928:	2b00      	cmp	r3, #0
 800892a:	f040 857f 	bne.w	800942c <_strtod_l+0xb7c>
 800892e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008930:	b1db      	cbz	r3, 800896a <_strtod_l+0xba>
 8008932:	4642      	mov	r2, r8
 8008934:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008938:	ec43 2b10 	vmov	d0, r2, r3
 800893c:	b01b      	add	sp, #108	; 0x6c
 800893e:	ecbd 8b02 	vpop	{d8}
 8008942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008946:	2920      	cmp	r1, #32
 8008948:	d1cc      	bne.n	80088e4 <_strtod_l+0x34>
 800894a:	3201      	adds	r2, #1
 800894c:	e7bf      	b.n	80088ce <_strtod_l+0x1e>
 800894e:	292d      	cmp	r1, #45	; 0x2d
 8008950:	d1c8      	bne.n	80088e4 <_strtod_l+0x34>
 8008952:	2101      	movs	r1, #1
 8008954:	910a      	str	r1, [sp, #40]	; 0x28
 8008956:	1c51      	adds	r1, r2, #1
 8008958:	9115      	str	r1, [sp, #84]	; 0x54
 800895a:	7852      	ldrb	r2, [r2, #1]
 800895c:	2a00      	cmp	r2, #0
 800895e:	d1c3      	bne.n	80088e8 <_strtod_l+0x38>
 8008960:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008962:	9515      	str	r5, [sp, #84]	; 0x54
 8008964:	2b00      	cmp	r3, #0
 8008966:	f040 855f 	bne.w	8009428 <_strtod_l+0xb78>
 800896a:	4642      	mov	r2, r8
 800896c:	464b      	mov	r3, r9
 800896e:	e7e3      	b.n	8008938 <_strtod_l+0x88>
 8008970:	2100      	movs	r1, #0
 8008972:	e7ef      	b.n	8008954 <_strtod_l+0xa4>
 8008974:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008976:	b13a      	cbz	r2, 8008988 <_strtod_l+0xd8>
 8008978:	2135      	movs	r1, #53	; 0x35
 800897a:	a818      	add	r0, sp, #96	; 0x60
 800897c:	f7ff ff37 	bl	80087ee <__copybits>
 8008980:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008982:	4620      	mov	r0, r4
 8008984:	f7ff fb0a 	bl	8007f9c <_Bfree>
 8008988:	3f01      	subs	r7, #1
 800898a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800898c:	2f04      	cmp	r7, #4
 800898e:	d806      	bhi.n	800899e <_strtod_l+0xee>
 8008990:	e8df f007 	tbb	[pc, r7]
 8008994:	201d0314 	.word	0x201d0314
 8008998:	14          	.byte	0x14
 8008999:	00          	.byte	0x00
 800899a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800899e:	05e9      	lsls	r1, r5, #23
 80089a0:	bf48      	it	mi
 80089a2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80089a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089aa:	0d1b      	lsrs	r3, r3, #20
 80089ac:	051b      	lsls	r3, r3, #20
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1b9      	bne.n	8008926 <_strtod_l+0x76>
 80089b2:	f7fe fb03 	bl	8006fbc <__errno>
 80089b6:	2322      	movs	r3, #34	; 0x22
 80089b8:	6003      	str	r3, [r0, #0]
 80089ba:	e7b4      	b.n	8008926 <_strtod_l+0x76>
 80089bc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80089c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80089c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80089c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80089cc:	e7e7      	b.n	800899e <_strtod_l+0xee>
 80089ce:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008b48 <_strtod_l+0x298>
 80089d2:	e7e4      	b.n	800899e <_strtod_l+0xee>
 80089d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80089d8:	f04f 38ff 	mov.w	r8, #4294967295
 80089dc:	e7df      	b.n	800899e <_strtod_l+0xee>
 80089de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	9215      	str	r2, [sp, #84]	; 0x54
 80089e4:	785b      	ldrb	r3, [r3, #1]
 80089e6:	2b30      	cmp	r3, #48	; 0x30
 80089e8:	d0f9      	beq.n	80089de <_strtod_l+0x12e>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d09b      	beq.n	8008926 <_strtod_l+0x76>
 80089ee:	2301      	movs	r3, #1
 80089f0:	f04f 0a00 	mov.w	sl, #0
 80089f4:	9304      	str	r3, [sp, #16]
 80089f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80089fa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80089fe:	46d3      	mov	fp, sl
 8008a00:	220a      	movs	r2, #10
 8008a02:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008a04:	7806      	ldrb	r6, [r0, #0]
 8008a06:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008a0a:	b2d9      	uxtb	r1, r3
 8008a0c:	2909      	cmp	r1, #9
 8008a0e:	d926      	bls.n	8008a5e <_strtod_l+0x1ae>
 8008a10:	494c      	ldr	r1, [pc, #304]	; (8008b44 <_strtod_l+0x294>)
 8008a12:	2201      	movs	r2, #1
 8008a14:	f000 ffe6 	bl	80099e4 <strncmp>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d030      	beq.n	8008a7e <_strtod_l+0x1ce>
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	4632      	mov	r2, r6
 8008a20:	9005      	str	r0, [sp, #20]
 8008a22:	465e      	mov	r6, fp
 8008a24:	4603      	mov	r3, r0
 8008a26:	2a65      	cmp	r2, #101	; 0x65
 8008a28:	d001      	beq.n	8008a2e <_strtod_l+0x17e>
 8008a2a:	2a45      	cmp	r2, #69	; 0x45
 8008a2c:	d113      	bne.n	8008a56 <_strtod_l+0x1a6>
 8008a2e:	b91e      	cbnz	r6, 8008a38 <_strtod_l+0x188>
 8008a30:	9a04      	ldr	r2, [sp, #16]
 8008a32:	4302      	orrs	r2, r0
 8008a34:	d094      	beq.n	8008960 <_strtod_l+0xb0>
 8008a36:	2600      	movs	r6, #0
 8008a38:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008a3a:	1c6a      	adds	r2, r5, #1
 8008a3c:	9215      	str	r2, [sp, #84]	; 0x54
 8008a3e:	786a      	ldrb	r2, [r5, #1]
 8008a40:	2a2b      	cmp	r2, #43	; 0x2b
 8008a42:	d074      	beq.n	8008b2e <_strtod_l+0x27e>
 8008a44:	2a2d      	cmp	r2, #45	; 0x2d
 8008a46:	d078      	beq.n	8008b3a <_strtod_l+0x28a>
 8008a48:	f04f 0c00 	mov.w	ip, #0
 8008a4c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008a50:	2909      	cmp	r1, #9
 8008a52:	d97f      	bls.n	8008b54 <_strtod_l+0x2a4>
 8008a54:	9515      	str	r5, [sp, #84]	; 0x54
 8008a56:	2700      	movs	r7, #0
 8008a58:	e09e      	b.n	8008b98 <_strtod_l+0x2e8>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e7c8      	b.n	80089f0 <_strtod_l+0x140>
 8008a5e:	f1bb 0f08 	cmp.w	fp, #8
 8008a62:	bfd8      	it	le
 8008a64:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008a66:	f100 0001 	add.w	r0, r0, #1
 8008a6a:	bfda      	itte	le
 8008a6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008a70:	9309      	strle	r3, [sp, #36]	; 0x24
 8008a72:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008a76:	f10b 0b01 	add.w	fp, fp, #1
 8008a7a:	9015      	str	r0, [sp, #84]	; 0x54
 8008a7c:	e7c1      	b.n	8008a02 <_strtod_l+0x152>
 8008a7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	9215      	str	r2, [sp, #84]	; 0x54
 8008a84:	785a      	ldrb	r2, [r3, #1]
 8008a86:	f1bb 0f00 	cmp.w	fp, #0
 8008a8a:	d037      	beq.n	8008afc <_strtod_l+0x24c>
 8008a8c:	9005      	str	r0, [sp, #20]
 8008a8e:	465e      	mov	r6, fp
 8008a90:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008a94:	2b09      	cmp	r3, #9
 8008a96:	d912      	bls.n	8008abe <_strtod_l+0x20e>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e7c4      	b.n	8008a26 <_strtod_l+0x176>
 8008a9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a9e:	1c5a      	adds	r2, r3, #1
 8008aa0:	9215      	str	r2, [sp, #84]	; 0x54
 8008aa2:	785a      	ldrb	r2, [r3, #1]
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	2a30      	cmp	r2, #48	; 0x30
 8008aa8:	d0f8      	beq.n	8008a9c <_strtod_l+0x1ec>
 8008aaa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008aae:	2b08      	cmp	r3, #8
 8008ab0:	f200 84c1 	bhi.w	8009436 <_strtod_l+0xb86>
 8008ab4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ab6:	9005      	str	r0, [sp, #20]
 8008ab8:	2000      	movs	r0, #0
 8008aba:	930b      	str	r3, [sp, #44]	; 0x2c
 8008abc:	4606      	mov	r6, r0
 8008abe:	3a30      	subs	r2, #48	; 0x30
 8008ac0:	f100 0301 	add.w	r3, r0, #1
 8008ac4:	d014      	beq.n	8008af0 <_strtod_l+0x240>
 8008ac6:	9905      	ldr	r1, [sp, #20]
 8008ac8:	4419      	add	r1, r3
 8008aca:	9105      	str	r1, [sp, #20]
 8008acc:	4633      	mov	r3, r6
 8008ace:	eb00 0c06 	add.w	ip, r0, r6
 8008ad2:	210a      	movs	r1, #10
 8008ad4:	4563      	cmp	r3, ip
 8008ad6:	d113      	bne.n	8008b00 <_strtod_l+0x250>
 8008ad8:	1833      	adds	r3, r6, r0
 8008ada:	2b08      	cmp	r3, #8
 8008adc:	f106 0601 	add.w	r6, r6, #1
 8008ae0:	4406      	add	r6, r0
 8008ae2:	dc1a      	bgt.n	8008b1a <_strtod_l+0x26a>
 8008ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ae6:	230a      	movs	r3, #10
 8008ae8:	fb03 2301 	mla	r3, r3, r1, r2
 8008aec:	9309      	str	r3, [sp, #36]	; 0x24
 8008aee:	2300      	movs	r3, #0
 8008af0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008af2:	1c51      	adds	r1, r2, #1
 8008af4:	9115      	str	r1, [sp, #84]	; 0x54
 8008af6:	7852      	ldrb	r2, [r2, #1]
 8008af8:	4618      	mov	r0, r3
 8008afa:	e7c9      	b.n	8008a90 <_strtod_l+0x1e0>
 8008afc:	4658      	mov	r0, fp
 8008afe:	e7d2      	b.n	8008aa6 <_strtod_l+0x1f6>
 8008b00:	2b08      	cmp	r3, #8
 8008b02:	f103 0301 	add.w	r3, r3, #1
 8008b06:	dc03      	bgt.n	8008b10 <_strtod_l+0x260>
 8008b08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b0a:	434f      	muls	r7, r1
 8008b0c:	9709      	str	r7, [sp, #36]	; 0x24
 8008b0e:	e7e1      	b.n	8008ad4 <_strtod_l+0x224>
 8008b10:	2b10      	cmp	r3, #16
 8008b12:	bfd8      	it	le
 8008b14:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008b18:	e7dc      	b.n	8008ad4 <_strtod_l+0x224>
 8008b1a:	2e10      	cmp	r6, #16
 8008b1c:	bfdc      	itt	le
 8008b1e:	230a      	movle	r3, #10
 8008b20:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008b24:	e7e3      	b.n	8008aee <_strtod_l+0x23e>
 8008b26:	2300      	movs	r3, #0
 8008b28:	9305      	str	r3, [sp, #20]
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e780      	b.n	8008a30 <_strtod_l+0x180>
 8008b2e:	f04f 0c00 	mov.w	ip, #0
 8008b32:	1caa      	adds	r2, r5, #2
 8008b34:	9215      	str	r2, [sp, #84]	; 0x54
 8008b36:	78aa      	ldrb	r2, [r5, #2]
 8008b38:	e788      	b.n	8008a4c <_strtod_l+0x19c>
 8008b3a:	f04f 0c01 	mov.w	ip, #1
 8008b3e:	e7f8      	b.n	8008b32 <_strtod_l+0x282>
 8008b40:	0800ae28 	.word	0x0800ae28
 8008b44:	0800ae24 	.word	0x0800ae24
 8008b48:	7ff00000 	.word	0x7ff00000
 8008b4c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b4e:	1c51      	adds	r1, r2, #1
 8008b50:	9115      	str	r1, [sp, #84]	; 0x54
 8008b52:	7852      	ldrb	r2, [r2, #1]
 8008b54:	2a30      	cmp	r2, #48	; 0x30
 8008b56:	d0f9      	beq.n	8008b4c <_strtod_l+0x29c>
 8008b58:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008b5c:	2908      	cmp	r1, #8
 8008b5e:	f63f af7a 	bhi.w	8008a56 <_strtod_l+0x1a6>
 8008b62:	3a30      	subs	r2, #48	; 0x30
 8008b64:	9208      	str	r2, [sp, #32]
 8008b66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b68:	920c      	str	r2, [sp, #48]	; 0x30
 8008b6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b6c:	1c57      	adds	r7, r2, #1
 8008b6e:	9715      	str	r7, [sp, #84]	; 0x54
 8008b70:	7852      	ldrb	r2, [r2, #1]
 8008b72:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008b76:	f1be 0f09 	cmp.w	lr, #9
 8008b7a:	d938      	bls.n	8008bee <_strtod_l+0x33e>
 8008b7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b7e:	1a7f      	subs	r7, r7, r1
 8008b80:	2f08      	cmp	r7, #8
 8008b82:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008b86:	dc03      	bgt.n	8008b90 <_strtod_l+0x2e0>
 8008b88:	9908      	ldr	r1, [sp, #32]
 8008b8a:	428f      	cmp	r7, r1
 8008b8c:	bfa8      	it	ge
 8008b8e:	460f      	movge	r7, r1
 8008b90:	f1bc 0f00 	cmp.w	ip, #0
 8008b94:	d000      	beq.n	8008b98 <_strtod_l+0x2e8>
 8008b96:	427f      	negs	r7, r7
 8008b98:	2e00      	cmp	r6, #0
 8008b9a:	d14f      	bne.n	8008c3c <_strtod_l+0x38c>
 8008b9c:	9904      	ldr	r1, [sp, #16]
 8008b9e:	4301      	orrs	r1, r0
 8008ba0:	f47f aec1 	bne.w	8008926 <_strtod_l+0x76>
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f47f aedb 	bne.w	8008960 <_strtod_l+0xb0>
 8008baa:	2a69      	cmp	r2, #105	; 0x69
 8008bac:	d029      	beq.n	8008c02 <_strtod_l+0x352>
 8008bae:	dc26      	bgt.n	8008bfe <_strtod_l+0x34e>
 8008bb0:	2a49      	cmp	r2, #73	; 0x49
 8008bb2:	d026      	beq.n	8008c02 <_strtod_l+0x352>
 8008bb4:	2a4e      	cmp	r2, #78	; 0x4e
 8008bb6:	f47f aed3 	bne.w	8008960 <_strtod_l+0xb0>
 8008bba:	499b      	ldr	r1, [pc, #620]	; (8008e28 <_strtod_l+0x578>)
 8008bbc:	a815      	add	r0, sp, #84	; 0x54
 8008bbe:	f001 fa27 	bl	800a010 <__match>
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	f43f aecc 	beq.w	8008960 <_strtod_l+0xb0>
 8008bc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b28      	cmp	r3, #40	; 0x28
 8008bce:	d12f      	bne.n	8008c30 <_strtod_l+0x380>
 8008bd0:	4996      	ldr	r1, [pc, #600]	; (8008e2c <_strtod_l+0x57c>)
 8008bd2:	aa18      	add	r2, sp, #96	; 0x60
 8008bd4:	a815      	add	r0, sp, #84	; 0x54
 8008bd6:	f001 fa2f 	bl	800a038 <__hexnan>
 8008bda:	2805      	cmp	r0, #5
 8008bdc:	d128      	bne.n	8008c30 <_strtod_l+0x380>
 8008bde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008be0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008be4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008be8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008bec:	e69b      	b.n	8008926 <_strtod_l+0x76>
 8008bee:	9f08      	ldr	r7, [sp, #32]
 8008bf0:	210a      	movs	r1, #10
 8008bf2:	fb01 2107 	mla	r1, r1, r7, r2
 8008bf6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008bfa:	9208      	str	r2, [sp, #32]
 8008bfc:	e7b5      	b.n	8008b6a <_strtod_l+0x2ba>
 8008bfe:	2a6e      	cmp	r2, #110	; 0x6e
 8008c00:	e7d9      	b.n	8008bb6 <_strtod_l+0x306>
 8008c02:	498b      	ldr	r1, [pc, #556]	; (8008e30 <_strtod_l+0x580>)
 8008c04:	a815      	add	r0, sp, #84	; 0x54
 8008c06:	f001 fa03 	bl	800a010 <__match>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f43f aea8 	beq.w	8008960 <_strtod_l+0xb0>
 8008c10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c12:	4988      	ldr	r1, [pc, #544]	; (8008e34 <_strtod_l+0x584>)
 8008c14:	3b01      	subs	r3, #1
 8008c16:	a815      	add	r0, sp, #84	; 0x54
 8008c18:	9315      	str	r3, [sp, #84]	; 0x54
 8008c1a:	f001 f9f9 	bl	800a010 <__match>
 8008c1e:	b910      	cbnz	r0, 8008c26 <_strtod_l+0x376>
 8008c20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c22:	3301      	adds	r3, #1
 8008c24:	9315      	str	r3, [sp, #84]	; 0x54
 8008c26:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008e44 <_strtod_l+0x594>
 8008c2a:	f04f 0800 	mov.w	r8, #0
 8008c2e:	e67a      	b.n	8008926 <_strtod_l+0x76>
 8008c30:	4881      	ldr	r0, [pc, #516]	; (8008e38 <_strtod_l+0x588>)
 8008c32:	f000 ff09 	bl	8009a48 <nan>
 8008c36:	ec59 8b10 	vmov	r8, r9, d0
 8008c3a:	e674      	b.n	8008926 <_strtod_l+0x76>
 8008c3c:	9b05      	ldr	r3, [sp, #20]
 8008c3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c40:	1afb      	subs	r3, r7, r3
 8008c42:	f1bb 0f00 	cmp.w	fp, #0
 8008c46:	bf08      	it	eq
 8008c48:	46b3      	moveq	fp, r6
 8008c4a:	2e10      	cmp	r6, #16
 8008c4c:	9308      	str	r3, [sp, #32]
 8008c4e:	4635      	mov	r5, r6
 8008c50:	bfa8      	it	ge
 8008c52:	2510      	movge	r5, #16
 8008c54:	f7f7 fc6e 	bl	8000534 <__aeabi_ui2d>
 8008c58:	2e09      	cmp	r6, #9
 8008c5a:	4680      	mov	r8, r0
 8008c5c:	4689      	mov	r9, r1
 8008c5e:	dd13      	ble.n	8008c88 <_strtod_l+0x3d8>
 8008c60:	4b76      	ldr	r3, [pc, #472]	; (8008e3c <_strtod_l+0x58c>)
 8008c62:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008c66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008c6a:	f7f7 fcdd 	bl	8000628 <__aeabi_dmul>
 8008c6e:	4680      	mov	r8, r0
 8008c70:	4650      	mov	r0, sl
 8008c72:	4689      	mov	r9, r1
 8008c74:	f7f7 fc5e 	bl	8000534 <__aeabi_ui2d>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4640      	mov	r0, r8
 8008c7e:	4649      	mov	r1, r9
 8008c80:	f7f7 fb1c 	bl	80002bc <__adddf3>
 8008c84:	4680      	mov	r8, r0
 8008c86:	4689      	mov	r9, r1
 8008c88:	2e0f      	cmp	r6, #15
 8008c8a:	dc38      	bgt.n	8008cfe <_strtod_l+0x44e>
 8008c8c:	9b08      	ldr	r3, [sp, #32]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f43f ae49 	beq.w	8008926 <_strtod_l+0x76>
 8008c94:	dd24      	ble.n	8008ce0 <_strtod_l+0x430>
 8008c96:	2b16      	cmp	r3, #22
 8008c98:	dc0b      	bgt.n	8008cb2 <_strtod_l+0x402>
 8008c9a:	4968      	ldr	r1, [pc, #416]	; (8008e3c <_strtod_l+0x58c>)
 8008c9c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ca4:	4642      	mov	r2, r8
 8008ca6:	464b      	mov	r3, r9
 8008ca8:	f7f7 fcbe 	bl	8000628 <__aeabi_dmul>
 8008cac:	4680      	mov	r8, r0
 8008cae:	4689      	mov	r9, r1
 8008cb0:	e639      	b.n	8008926 <_strtod_l+0x76>
 8008cb2:	9a08      	ldr	r2, [sp, #32]
 8008cb4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	db20      	blt.n	8008cfe <_strtod_l+0x44e>
 8008cbc:	4c5f      	ldr	r4, [pc, #380]	; (8008e3c <_strtod_l+0x58c>)
 8008cbe:	f1c6 060f 	rsb	r6, r6, #15
 8008cc2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008cc6:	4642      	mov	r2, r8
 8008cc8:	464b      	mov	r3, r9
 8008cca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cce:	f7f7 fcab 	bl	8000628 <__aeabi_dmul>
 8008cd2:	9b08      	ldr	r3, [sp, #32]
 8008cd4:	1b9e      	subs	r6, r3, r6
 8008cd6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008cda:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008cde:	e7e3      	b.n	8008ca8 <_strtod_l+0x3f8>
 8008ce0:	9b08      	ldr	r3, [sp, #32]
 8008ce2:	3316      	adds	r3, #22
 8008ce4:	db0b      	blt.n	8008cfe <_strtod_l+0x44e>
 8008ce6:	9b05      	ldr	r3, [sp, #20]
 8008ce8:	1bdf      	subs	r7, r3, r7
 8008cea:	4b54      	ldr	r3, [pc, #336]	; (8008e3c <_strtod_l+0x58c>)
 8008cec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cf4:	4640      	mov	r0, r8
 8008cf6:	4649      	mov	r1, r9
 8008cf8:	f7f7 fdc0 	bl	800087c <__aeabi_ddiv>
 8008cfc:	e7d6      	b.n	8008cac <_strtod_l+0x3fc>
 8008cfe:	9b08      	ldr	r3, [sp, #32]
 8008d00:	1b75      	subs	r5, r6, r5
 8008d02:	441d      	add	r5, r3
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	dd70      	ble.n	8008dea <_strtod_l+0x53a>
 8008d08:	f015 030f 	ands.w	r3, r5, #15
 8008d0c:	d00a      	beq.n	8008d24 <_strtod_l+0x474>
 8008d0e:	494b      	ldr	r1, [pc, #300]	; (8008e3c <_strtod_l+0x58c>)
 8008d10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d14:	4642      	mov	r2, r8
 8008d16:	464b      	mov	r3, r9
 8008d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d1c:	f7f7 fc84 	bl	8000628 <__aeabi_dmul>
 8008d20:	4680      	mov	r8, r0
 8008d22:	4689      	mov	r9, r1
 8008d24:	f035 050f 	bics.w	r5, r5, #15
 8008d28:	d04d      	beq.n	8008dc6 <_strtod_l+0x516>
 8008d2a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008d2e:	dd22      	ble.n	8008d76 <_strtod_l+0x4c6>
 8008d30:	2500      	movs	r5, #0
 8008d32:	46ab      	mov	fp, r5
 8008d34:	9509      	str	r5, [sp, #36]	; 0x24
 8008d36:	9505      	str	r5, [sp, #20]
 8008d38:	2322      	movs	r3, #34	; 0x22
 8008d3a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008e44 <_strtod_l+0x594>
 8008d3e:	6023      	str	r3, [r4, #0]
 8008d40:	f04f 0800 	mov.w	r8, #0
 8008d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f43f aded 	beq.w	8008926 <_strtod_l+0x76>
 8008d4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f7ff f924 	bl	8007f9c <_Bfree>
 8008d54:	9905      	ldr	r1, [sp, #20]
 8008d56:	4620      	mov	r0, r4
 8008d58:	f7ff f920 	bl	8007f9c <_Bfree>
 8008d5c:	4659      	mov	r1, fp
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f7ff f91c 	bl	8007f9c <_Bfree>
 8008d64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d66:	4620      	mov	r0, r4
 8008d68:	f7ff f918 	bl	8007f9c <_Bfree>
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f7ff f914 	bl	8007f9c <_Bfree>
 8008d74:	e5d7      	b.n	8008926 <_strtod_l+0x76>
 8008d76:	4b32      	ldr	r3, [pc, #200]	; (8008e40 <_strtod_l+0x590>)
 8008d78:	9304      	str	r3, [sp, #16]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	112d      	asrs	r5, r5, #4
 8008d7e:	4640      	mov	r0, r8
 8008d80:	4649      	mov	r1, r9
 8008d82:	469a      	mov	sl, r3
 8008d84:	2d01      	cmp	r5, #1
 8008d86:	dc21      	bgt.n	8008dcc <_strtod_l+0x51c>
 8008d88:	b10b      	cbz	r3, 8008d8e <_strtod_l+0x4de>
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	4689      	mov	r9, r1
 8008d8e:	492c      	ldr	r1, [pc, #176]	; (8008e40 <_strtod_l+0x590>)
 8008d90:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008d94:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008d98:	4642      	mov	r2, r8
 8008d9a:	464b      	mov	r3, r9
 8008d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008da0:	f7f7 fc42 	bl	8000628 <__aeabi_dmul>
 8008da4:	4b27      	ldr	r3, [pc, #156]	; (8008e44 <_strtod_l+0x594>)
 8008da6:	460a      	mov	r2, r1
 8008da8:	400b      	ands	r3, r1
 8008daa:	4927      	ldr	r1, [pc, #156]	; (8008e48 <_strtod_l+0x598>)
 8008dac:	428b      	cmp	r3, r1
 8008dae:	4680      	mov	r8, r0
 8008db0:	d8be      	bhi.n	8008d30 <_strtod_l+0x480>
 8008db2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008db6:	428b      	cmp	r3, r1
 8008db8:	bf86      	itte	hi
 8008dba:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008e4c <_strtod_l+0x59c>
 8008dbe:	f04f 38ff 	movhi.w	r8, #4294967295
 8008dc2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	9304      	str	r3, [sp, #16]
 8008dca:	e07b      	b.n	8008ec4 <_strtod_l+0x614>
 8008dcc:	07ea      	lsls	r2, r5, #31
 8008dce:	d505      	bpl.n	8008ddc <_strtod_l+0x52c>
 8008dd0:	9b04      	ldr	r3, [sp, #16]
 8008dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd6:	f7f7 fc27 	bl	8000628 <__aeabi_dmul>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	9a04      	ldr	r2, [sp, #16]
 8008dde:	3208      	adds	r2, #8
 8008de0:	f10a 0a01 	add.w	sl, sl, #1
 8008de4:	106d      	asrs	r5, r5, #1
 8008de6:	9204      	str	r2, [sp, #16]
 8008de8:	e7cc      	b.n	8008d84 <_strtod_l+0x4d4>
 8008dea:	d0ec      	beq.n	8008dc6 <_strtod_l+0x516>
 8008dec:	426d      	negs	r5, r5
 8008dee:	f015 020f 	ands.w	r2, r5, #15
 8008df2:	d00a      	beq.n	8008e0a <_strtod_l+0x55a>
 8008df4:	4b11      	ldr	r3, [pc, #68]	; (8008e3c <_strtod_l+0x58c>)
 8008df6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	4649      	mov	r1, r9
 8008dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e02:	f7f7 fd3b 	bl	800087c <__aeabi_ddiv>
 8008e06:	4680      	mov	r8, r0
 8008e08:	4689      	mov	r9, r1
 8008e0a:	112d      	asrs	r5, r5, #4
 8008e0c:	d0db      	beq.n	8008dc6 <_strtod_l+0x516>
 8008e0e:	2d1f      	cmp	r5, #31
 8008e10:	dd1e      	ble.n	8008e50 <_strtod_l+0x5a0>
 8008e12:	2500      	movs	r5, #0
 8008e14:	46ab      	mov	fp, r5
 8008e16:	9509      	str	r5, [sp, #36]	; 0x24
 8008e18:	9505      	str	r5, [sp, #20]
 8008e1a:	2322      	movs	r3, #34	; 0x22
 8008e1c:	f04f 0800 	mov.w	r8, #0
 8008e20:	f04f 0900 	mov.w	r9, #0
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	e78d      	b.n	8008d44 <_strtod_l+0x494>
 8008e28:	0800ac15 	.word	0x0800ac15
 8008e2c:	0800ae3c 	.word	0x0800ae3c
 8008e30:	0800ac0d 	.word	0x0800ac0d
 8008e34:	0800ac44 	.word	0x0800ac44
 8008e38:	0800afcd 	.word	0x0800afcd
 8008e3c:	0800ad50 	.word	0x0800ad50
 8008e40:	0800ad28 	.word	0x0800ad28
 8008e44:	7ff00000 	.word	0x7ff00000
 8008e48:	7ca00000 	.word	0x7ca00000
 8008e4c:	7fefffff 	.word	0x7fefffff
 8008e50:	f015 0310 	ands.w	r3, r5, #16
 8008e54:	bf18      	it	ne
 8008e56:	236a      	movne	r3, #106	; 0x6a
 8008e58:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80091fc <_strtod_l+0x94c>
 8008e5c:	9304      	str	r3, [sp, #16]
 8008e5e:	4640      	mov	r0, r8
 8008e60:	4649      	mov	r1, r9
 8008e62:	2300      	movs	r3, #0
 8008e64:	07ea      	lsls	r2, r5, #31
 8008e66:	d504      	bpl.n	8008e72 <_strtod_l+0x5c2>
 8008e68:	e9da 2300 	ldrd	r2, r3, [sl]
 8008e6c:	f7f7 fbdc 	bl	8000628 <__aeabi_dmul>
 8008e70:	2301      	movs	r3, #1
 8008e72:	106d      	asrs	r5, r5, #1
 8008e74:	f10a 0a08 	add.w	sl, sl, #8
 8008e78:	d1f4      	bne.n	8008e64 <_strtod_l+0x5b4>
 8008e7a:	b10b      	cbz	r3, 8008e80 <_strtod_l+0x5d0>
 8008e7c:	4680      	mov	r8, r0
 8008e7e:	4689      	mov	r9, r1
 8008e80:	9b04      	ldr	r3, [sp, #16]
 8008e82:	b1bb      	cbz	r3, 8008eb4 <_strtod_l+0x604>
 8008e84:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008e88:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	4649      	mov	r1, r9
 8008e90:	dd10      	ble.n	8008eb4 <_strtod_l+0x604>
 8008e92:	2b1f      	cmp	r3, #31
 8008e94:	f340 811e 	ble.w	80090d4 <_strtod_l+0x824>
 8008e98:	2b34      	cmp	r3, #52	; 0x34
 8008e9a:	bfde      	ittt	le
 8008e9c:	f04f 33ff 	movle.w	r3, #4294967295
 8008ea0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008ea4:	4093      	lslle	r3, r2
 8008ea6:	f04f 0800 	mov.w	r8, #0
 8008eaa:	bfcc      	ite	gt
 8008eac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008eb0:	ea03 0901 	andle.w	r9, r3, r1
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	4640      	mov	r0, r8
 8008eba:	4649      	mov	r1, r9
 8008ebc:	f7f7 fe1c 	bl	8000af8 <__aeabi_dcmpeq>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d1a6      	bne.n	8008e12 <_strtod_l+0x562>
 8008ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eca:	4633      	mov	r3, r6
 8008ecc:	465a      	mov	r2, fp
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f7ff f8cc 	bl	800806c <__s2b>
 8008ed4:	9009      	str	r0, [sp, #36]	; 0x24
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	f43f af2a 	beq.w	8008d30 <_strtod_l+0x480>
 8008edc:	9a08      	ldr	r2, [sp, #32]
 8008ede:	9b05      	ldr	r3, [sp, #20]
 8008ee0:	2a00      	cmp	r2, #0
 8008ee2:	eba3 0307 	sub.w	r3, r3, r7
 8008ee6:	bfa8      	it	ge
 8008ee8:	2300      	movge	r3, #0
 8008eea:	930c      	str	r3, [sp, #48]	; 0x30
 8008eec:	2500      	movs	r5, #0
 8008eee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008ef2:	9312      	str	r3, [sp, #72]	; 0x48
 8008ef4:	46ab      	mov	fp, r5
 8008ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef8:	4620      	mov	r0, r4
 8008efa:	6859      	ldr	r1, [r3, #4]
 8008efc:	f7ff f80e 	bl	8007f1c <_Balloc>
 8008f00:	9005      	str	r0, [sp, #20]
 8008f02:	2800      	cmp	r0, #0
 8008f04:	f43f af18 	beq.w	8008d38 <_strtod_l+0x488>
 8008f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f0a:	691a      	ldr	r2, [r3, #16]
 8008f0c:	3202      	adds	r2, #2
 8008f0e:	f103 010c 	add.w	r1, r3, #12
 8008f12:	0092      	lsls	r2, r2, #2
 8008f14:	300c      	adds	r0, #12
 8008f16:	f000 fd87 	bl	8009a28 <memcpy>
 8008f1a:	ec49 8b10 	vmov	d0, r8, r9
 8008f1e:	aa18      	add	r2, sp, #96	; 0x60
 8008f20:	a917      	add	r1, sp, #92	; 0x5c
 8008f22:	4620      	mov	r0, r4
 8008f24:	f7ff fbd6 	bl	80086d4 <__d2b>
 8008f28:	ec49 8b18 	vmov	d8, r8, r9
 8008f2c:	9016      	str	r0, [sp, #88]	; 0x58
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f43f af02 	beq.w	8008d38 <_strtod_l+0x488>
 8008f34:	2101      	movs	r1, #1
 8008f36:	4620      	mov	r0, r4
 8008f38:	f7ff f930 	bl	800819c <__i2b>
 8008f3c:	4683      	mov	fp, r0
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	f43f aefa 	beq.w	8008d38 <_strtod_l+0x488>
 8008f44:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008f46:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008f48:	2e00      	cmp	r6, #0
 8008f4a:	bfab      	itete	ge
 8008f4c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008f4e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008f50:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008f52:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008f56:	bfac      	ite	ge
 8008f58:	eb06 0a03 	addge.w	sl, r6, r3
 8008f5c:	1b9f      	sublt	r7, r3, r6
 8008f5e:	9b04      	ldr	r3, [sp, #16]
 8008f60:	1af6      	subs	r6, r6, r3
 8008f62:	4416      	add	r6, r2
 8008f64:	4ba0      	ldr	r3, [pc, #640]	; (80091e8 <_strtod_l+0x938>)
 8008f66:	3e01      	subs	r6, #1
 8008f68:	429e      	cmp	r6, r3
 8008f6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008f6e:	f280 80c4 	bge.w	80090fa <_strtod_l+0x84a>
 8008f72:	1b9b      	subs	r3, r3, r6
 8008f74:	2b1f      	cmp	r3, #31
 8008f76:	eba2 0203 	sub.w	r2, r2, r3
 8008f7a:	f04f 0101 	mov.w	r1, #1
 8008f7e:	f300 80b0 	bgt.w	80090e2 <_strtod_l+0x832>
 8008f82:	fa01 f303 	lsl.w	r3, r1, r3
 8008f86:	930e      	str	r3, [sp, #56]	; 0x38
 8008f88:	2300      	movs	r3, #0
 8008f8a:	930d      	str	r3, [sp, #52]	; 0x34
 8008f8c:	eb0a 0602 	add.w	r6, sl, r2
 8008f90:	9b04      	ldr	r3, [sp, #16]
 8008f92:	45b2      	cmp	sl, r6
 8008f94:	4417      	add	r7, r2
 8008f96:	441f      	add	r7, r3
 8008f98:	4653      	mov	r3, sl
 8008f9a:	bfa8      	it	ge
 8008f9c:	4633      	movge	r3, r6
 8008f9e:	42bb      	cmp	r3, r7
 8008fa0:	bfa8      	it	ge
 8008fa2:	463b      	movge	r3, r7
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	bfc2      	ittt	gt
 8008fa8:	1af6      	subgt	r6, r6, r3
 8008faa:	1aff      	subgt	r7, r7, r3
 8008fac:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dd17      	ble.n	8008fe6 <_strtod_l+0x736>
 8008fb6:	4659      	mov	r1, fp
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f7ff f9ae 	bl	800831c <__pow5mult>
 8008fc0:	4683      	mov	fp, r0
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	f43f aeb8 	beq.w	8008d38 <_strtod_l+0x488>
 8008fc8:	4601      	mov	r1, r0
 8008fca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f7ff f8fb 	bl	80081c8 <__multiply>
 8008fd2:	900b      	str	r0, [sp, #44]	; 0x2c
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	f43f aeaf 	beq.w	8008d38 <_strtod_l+0x488>
 8008fda:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f7fe ffdd 	bl	8007f9c <_Bfree>
 8008fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fe4:	9316      	str	r3, [sp, #88]	; 0x58
 8008fe6:	2e00      	cmp	r6, #0
 8008fe8:	f300 808c 	bgt.w	8009104 <_strtod_l+0x854>
 8008fec:	9b08      	ldr	r3, [sp, #32]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	dd08      	ble.n	8009004 <_strtod_l+0x754>
 8008ff2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ff4:	9905      	ldr	r1, [sp, #20]
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f7ff f990 	bl	800831c <__pow5mult>
 8008ffc:	9005      	str	r0, [sp, #20]
 8008ffe:	2800      	cmp	r0, #0
 8009000:	f43f ae9a 	beq.w	8008d38 <_strtod_l+0x488>
 8009004:	2f00      	cmp	r7, #0
 8009006:	dd08      	ble.n	800901a <_strtod_l+0x76a>
 8009008:	9905      	ldr	r1, [sp, #20]
 800900a:	463a      	mov	r2, r7
 800900c:	4620      	mov	r0, r4
 800900e:	f7ff f9df 	bl	80083d0 <__lshift>
 8009012:	9005      	str	r0, [sp, #20]
 8009014:	2800      	cmp	r0, #0
 8009016:	f43f ae8f 	beq.w	8008d38 <_strtod_l+0x488>
 800901a:	f1ba 0f00 	cmp.w	sl, #0
 800901e:	dd08      	ble.n	8009032 <_strtod_l+0x782>
 8009020:	4659      	mov	r1, fp
 8009022:	4652      	mov	r2, sl
 8009024:	4620      	mov	r0, r4
 8009026:	f7ff f9d3 	bl	80083d0 <__lshift>
 800902a:	4683      	mov	fp, r0
 800902c:	2800      	cmp	r0, #0
 800902e:	f43f ae83 	beq.w	8008d38 <_strtod_l+0x488>
 8009032:	9a05      	ldr	r2, [sp, #20]
 8009034:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009036:	4620      	mov	r0, r4
 8009038:	f7ff fa52 	bl	80084e0 <__mdiff>
 800903c:	4605      	mov	r5, r0
 800903e:	2800      	cmp	r0, #0
 8009040:	f43f ae7a 	beq.w	8008d38 <_strtod_l+0x488>
 8009044:	68c3      	ldr	r3, [r0, #12]
 8009046:	930b      	str	r3, [sp, #44]	; 0x2c
 8009048:	2300      	movs	r3, #0
 800904a:	60c3      	str	r3, [r0, #12]
 800904c:	4659      	mov	r1, fp
 800904e:	f7ff fa2b 	bl	80084a8 <__mcmp>
 8009052:	2800      	cmp	r0, #0
 8009054:	da60      	bge.n	8009118 <_strtod_l+0x868>
 8009056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009058:	ea53 0308 	orrs.w	r3, r3, r8
 800905c:	f040 8084 	bne.w	8009168 <_strtod_l+0x8b8>
 8009060:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009064:	2b00      	cmp	r3, #0
 8009066:	d17f      	bne.n	8009168 <_strtod_l+0x8b8>
 8009068:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800906c:	0d1b      	lsrs	r3, r3, #20
 800906e:	051b      	lsls	r3, r3, #20
 8009070:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009074:	d978      	bls.n	8009168 <_strtod_l+0x8b8>
 8009076:	696b      	ldr	r3, [r5, #20]
 8009078:	b913      	cbnz	r3, 8009080 <_strtod_l+0x7d0>
 800907a:	692b      	ldr	r3, [r5, #16]
 800907c:	2b01      	cmp	r3, #1
 800907e:	dd73      	ble.n	8009168 <_strtod_l+0x8b8>
 8009080:	4629      	mov	r1, r5
 8009082:	2201      	movs	r2, #1
 8009084:	4620      	mov	r0, r4
 8009086:	f7ff f9a3 	bl	80083d0 <__lshift>
 800908a:	4659      	mov	r1, fp
 800908c:	4605      	mov	r5, r0
 800908e:	f7ff fa0b 	bl	80084a8 <__mcmp>
 8009092:	2800      	cmp	r0, #0
 8009094:	dd68      	ble.n	8009168 <_strtod_l+0x8b8>
 8009096:	9904      	ldr	r1, [sp, #16]
 8009098:	4a54      	ldr	r2, [pc, #336]	; (80091ec <_strtod_l+0x93c>)
 800909a:	464b      	mov	r3, r9
 800909c:	2900      	cmp	r1, #0
 800909e:	f000 8084 	beq.w	80091aa <_strtod_l+0x8fa>
 80090a2:	ea02 0109 	and.w	r1, r2, r9
 80090a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80090aa:	dc7e      	bgt.n	80091aa <_strtod_l+0x8fa>
 80090ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80090b0:	f77f aeb3 	ble.w	8008e1a <_strtod_l+0x56a>
 80090b4:	4b4e      	ldr	r3, [pc, #312]	; (80091f0 <_strtod_l+0x940>)
 80090b6:	4640      	mov	r0, r8
 80090b8:	4649      	mov	r1, r9
 80090ba:	2200      	movs	r2, #0
 80090bc:	f7f7 fab4 	bl	8000628 <__aeabi_dmul>
 80090c0:	4b4a      	ldr	r3, [pc, #296]	; (80091ec <_strtod_l+0x93c>)
 80090c2:	400b      	ands	r3, r1
 80090c4:	4680      	mov	r8, r0
 80090c6:	4689      	mov	r9, r1
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f47f ae3f 	bne.w	8008d4c <_strtod_l+0x49c>
 80090ce:	2322      	movs	r3, #34	; 0x22
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	e63b      	b.n	8008d4c <_strtod_l+0x49c>
 80090d4:	f04f 32ff 	mov.w	r2, #4294967295
 80090d8:	fa02 f303 	lsl.w	r3, r2, r3
 80090dc:	ea03 0808 	and.w	r8, r3, r8
 80090e0:	e6e8      	b.n	8008eb4 <_strtod_l+0x604>
 80090e2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80090e6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80090ea:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80090ee:	36e2      	adds	r6, #226	; 0xe2
 80090f0:	fa01 f306 	lsl.w	r3, r1, r6
 80090f4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80090f8:	e748      	b.n	8008f8c <_strtod_l+0x6dc>
 80090fa:	2100      	movs	r1, #0
 80090fc:	2301      	movs	r3, #1
 80090fe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009102:	e743      	b.n	8008f8c <_strtod_l+0x6dc>
 8009104:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009106:	4632      	mov	r2, r6
 8009108:	4620      	mov	r0, r4
 800910a:	f7ff f961 	bl	80083d0 <__lshift>
 800910e:	9016      	str	r0, [sp, #88]	; 0x58
 8009110:	2800      	cmp	r0, #0
 8009112:	f47f af6b 	bne.w	8008fec <_strtod_l+0x73c>
 8009116:	e60f      	b.n	8008d38 <_strtod_l+0x488>
 8009118:	46ca      	mov	sl, r9
 800911a:	d171      	bne.n	8009200 <_strtod_l+0x950>
 800911c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800911e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009122:	b352      	cbz	r2, 800917a <_strtod_l+0x8ca>
 8009124:	4a33      	ldr	r2, [pc, #204]	; (80091f4 <_strtod_l+0x944>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d12a      	bne.n	8009180 <_strtod_l+0x8d0>
 800912a:	9b04      	ldr	r3, [sp, #16]
 800912c:	4641      	mov	r1, r8
 800912e:	b1fb      	cbz	r3, 8009170 <_strtod_l+0x8c0>
 8009130:	4b2e      	ldr	r3, [pc, #184]	; (80091ec <_strtod_l+0x93c>)
 8009132:	ea09 0303 	and.w	r3, r9, r3
 8009136:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800913a:	f04f 32ff 	mov.w	r2, #4294967295
 800913e:	d81a      	bhi.n	8009176 <_strtod_l+0x8c6>
 8009140:	0d1b      	lsrs	r3, r3, #20
 8009142:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009146:	fa02 f303 	lsl.w	r3, r2, r3
 800914a:	4299      	cmp	r1, r3
 800914c:	d118      	bne.n	8009180 <_strtod_l+0x8d0>
 800914e:	4b2a      	ldr	r3, [pc, #168]	; (80091f8 <_strtod_l+0x948>)
 8009150:	459a      	cmp	sl, r3
 8009152:	d102      	bne.n	800915a <_strtod_l+0x8aa>
 8009154:	3101      	adds	r1, #1
 8009156:	f43f adef 	beq.w	8008d38 <_strtod_l+0x488>
 800915a:	4b24      	ldr	r3, [pc, #144]	; (80091ec <_strtod_l+0x93c>)
 800915c:	ea0a 0303 	and.w	r3, sl, r3
 8009160:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009164:	f04f 0800 	mov.w	r8, #0
 8009168:	9b04      	ldr	r3, [sp, #16]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1a2      	bne.n	80090b4 <_strtod_l+0x804>
 800916e:	e5ed      	b.n	8008d4c <_strtod_l+0x49c>
 8009170:	f04f 33ff 	mov.w	r3, #4294967295
 8009174:	e7e9      	b.n	800914a <_strtod_l+0x89a>
 8009176:	4613      	mov	r3, r2
 8009178:	e7e7      	b.n	800914a <_strtod_l+0x89a>
 800917a:	ea53 0308 	orrs.w	r3, r3, r8
 800917e:	d08a      	beq.n	8009096 <_strtod_l+0x7e6>
 8009180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009182:	b1e3      	cbz	r3, 80091be <_strtod_l+0x90e>
 8009184:	ea13 0f0a 	tst.w	r3, sl
 8009188:	d0ee      	beq.n	8009168 <_strtod_l+0x8b8>
 800918a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800918c:	9a04      	ldr	r2, [sp, #16]
 800918e:	4640      	mov	r0, r8
 8009190:	4649      	mov	r1, r9
 8009192:	b1c3      	cbz	r3, 80091c6 <_strtod_l+0x916>
 8009194:	f7ff fb6f 	bl	8008876 <sulp>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	ec51 0b18 	vmov	r0, r1, d8
 80091a0:	f7f7 f88c 	bl	80002bc <__adddf3>
 80091a4:	4680      	mov	r8, r0
 80091a6:	4689      	mov	r9, r1
 80091a8:	e7de      	b.n	8009168 <_strtod_l+0x8b8>
 80091aa:	4013      	ands	r3, r2
 80091ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80091b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80091b4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80091b8:	f04f 38ff 	mov.w	r8, #4294967295
 80091bc:	e7d4      	b.n	8009168 <_strtod_l+0x8b8>
 80091be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091c0:	ea13 0f08 	tst.w	r3, r8
 80091c4:	e7e0      	b.n	8009188 <_strtod_l+0x8d8>
 80091c6:	f7ff fb56 	bl	8008876 <sulp>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	ec51 0b18 	vmov	r0, r1, d8
 80091d2:	f7f7 f871 	bl	80002b8 <__aeabi_dsub>
 80091d6:	2200      	movs	r2, #0
 80091d8:	2300      	movs	r3, #0
 80091da:	4680      	mov	r8, r0
 80091dc:	4689      	mov	r9, r1
 80091de:	f7f7 fc8b 	bl	8000af8 <__aeabi_dcmpeq>
 80091e2:	2800      	cmp	r0, #0
 80091e4:	d0c0      	beq.n	8009168 <_strtod_l+0x8b8>
 80091e6:	e618      	b.n	8008e1a <_strtod_l+0x56a>
 80091e8:	fffffc02 	.word	0xfffffc02
 80091ec:	7ff00000 	.word	0x7ff00000
 80091f0:	39500000 	.word	0x39500000
 80091f4:	000fffff 	.word	0x000fffff
 80091f8:	7fefffff 	.word	0x7fefffff
 80091fc:	0800ae50 	.word	0x0800ae50
 8009200:	4659      	mov	r1, fp
 8009202:	4628      	mov	r0, r5
 8009204:	f7ff fac0 	bl	8008788 <__ratio>
 8009208:	ec57 6b10 	vmov	r6, r7, d0
 800920c:	ee10 0a10 	vmov	r0, s0
 8009210:	2200      	movs	r2, #0
 8009212:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009216:	4639      	mov	r1, r7
 8009218:	f7f7 fc82 	bl	8000b20 <__aeabi_dcmple>
 800921c:	2800      	cmp	r0, #0
 800921e:	d071      	beq.n	8009304 <_strtod_l+0xa54>
 8009220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009222:	2b00      	cmp	r3, #0
 8009224:	d17c      	bne.n	8009320 <_strtod_l+0xa70>
 8009226:	f1b8 0f00 	cmp.w	r8, #0
 800922a:	d15a      	bne.n	80092e2 <_strtod_l+0xa32>
 800922c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009230:	2b00      	cmp	r3, #0
 8009232:	d15d      	bne.n	80092f0 <_strtod_l+0xa40>
 8009234:	4b90      	ldr	r3, [pc, #576]	; (8009478 <_strtod_l+0xbc8>)
 8009236:	2200      	movs	r2, #0
 8009238:	4630      	mov	r0, r6
 800923a:	4639      	mov	r1, r7
 800923c:	f7f7 fc66 	bl	8000b0c <__aeabi_dcmplt>
 8009240:	2800      	cmp	r0, #0
 8009242:	d15c      	bne.n	80092fe <_strtod_l+0xa4e>
 8009244:	4630      	mov	r0, r6
 8009246:	4639      	mov	r1, r7
 8009248:	4b8c      	ldr	r3, [pc, #560]	; (800947c <_strtod_l+0xbcc>)
 800924a:	2200      	movs	r2, #0
 800924c:	f7f7 f9ec 	bl	8000628 <__aeabi_dmul>
 8009250:	4606      	mov	r6, r0
 8009252:	460f      	mov	r7, r1
 8009254:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009258:	9606      	str	r6, [sp, #24]
 800925a:	9307      	str	r3, [sp, #28]
 800925c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009260:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009264:	4b86      	ldr	r3, [pc, #536]	; (8009480 <_strtod_l+0xbd0>)
 8009266:	ea0a 0303 	and.w	r3, sl, r3
 800926a:	930d      	str	r3, [sp, #52]	; 0x34
 800926c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800926e:	4b85      	ldr	r3, [pc, #532]	; (8009484 <_strtod_l+0xbd4>)
 8009270:	429a      	cmp	r2, r3
 8009272:	f040 8090 	bne.w	8009396 <_strtod_l+0xae6>
 8009276:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800927a:	ec49 8b10 	vmov	d0, r8, r9
 800927e:	f7ff f9b9 	bl	80085f4 <__ulp>
 8009282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009286:	ec51 0b10 	vmov	r0, r1, d0
 800928a:	f7f7 f9cd 	bl	8000628 <__aeabi_dmul>
 800928e:	4642      	mov	r2, r8
 8009290:	464b      	mov	r3, r9
 8009292:	f7f7 f813 	bl	80002bc <__adddf3>
 8009296:	460b      	mov	r3, r1
 8009298:	4979      	ldr	r1, [pc, #484]	; (8009480 <_strtod_l+0xbd0>)
 800929a:	4a7b      	ldr	r2, [pc, #492]	; (8009488 <_strtod_l+0xbd8>)
 800929c:	4019      	ands	r1, r3
 800929e:	4291      	cmp	r1, r2
 80092a0:	4680      	mov	r8, r0
 80092a2:	d944      	bls.n	800932e <_strtod_l+0xa7e>
 80092a4:	ee18 2a90 	vmov	r2, s17
 80092a8:	4b78      	ldr	r3, [pc, #480]	; (800948c <_strtod_l+0xbdc>)
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d104      	bne.n	80092b8 <_strtod_l+0xa08>
 80092ae:	ee18 3a10 	vmov	r3, s16
 80092b2:	3301      	adds	r3, #1
 80092b4:	f43f ad40 	beq.w	8008d38 <_strtod_l+0x488>
 80092b8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800948c <_strtod_l+0xbdc>
 80092bc:	f04f 38ff 	mov.w	r8, #4294967295
 80092c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80092c2:	4620      	mov	r0, r4
 80092c4:	f7fe fe6a 	bl	8007f9c <_Bfree>
 80092c8:	9905      	ldr	r1, [sp, #20]
 80092ca:	4620      	mov	r0, r4
 80092cc:	f7fe fe66 	bl	8007f9c <_Bfree>
 80092d0:	4659      	mov	r1, fp
 80092d2:	4620      	mov	r0, r4
 80092d4:	f7fe fe62 	bl	8007f9c <_Bfree>
 80092d8:	4629      	mov	r1, r5
 80092da:	4620      	mov	r0, r4
 80092dc:	f7fe fe5e 	bl	8007f9c <_Bfree>
 80092e0:	e609      	b.n	8008ef6 <_strtod_l+0x646>
 80092e2:	f1b8 0f01 	cmp.w	r8, #1
 80092e6:	d103      	bne.n	80092f0 <_strtod_l+0xa40>
 80092e8:	f1b9 0f00 	cmp.w	r9, #0
 80092ec:	f43f ad95 	beq.w	8008e1a <_strtod_l+0x56a>
 80092f0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009448 <_strtod_l+0xb98>
 80092f4:	4f60      	ldr	r7, [pc, #384]	; (8009478 <_strtod_l+0xbc8>)
 80092f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80092fa:	2600      	movs	r6, #0
 80092fc:	e7ae      	b.n	800925c <_strtod_l+0x9ac>
 80092fe:	4f5f      	ldr	r7, [pc, #380]	; (800947c <_strtod_l+0xbcc>)
 8009300:	2600      	movs	r6, #0
 8009302:	e7a7      	b.n	8009254 <_strtod_l+0x9a4>
 8009304:	4b5d      	ldr	r3, [pc, #372]	; (800947c <_strtod_l+0xbcc>)
 8009306:	4630      	mov	r0, r6
 8009308:	4639      	mov	r1, r7
 800930a:	2200      	movs	r2, #0
 800930c:	f7f7 f98c 	bl	8000628 <__aeabi_dmul>
 8009310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009312:	4606      	mov	r6, r0
 8009314:	460f      	mov	r7, r1
 8009316:	2b00      	cmp	r3, #0
 8009318:	d09c      	beq.n	8009254 <_strtod_l+0x9a4>
 800931a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800931e:	e79d      	b.n	800925c <_strtod_l+0x9ac>
 8009320:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009450 <_strtod_l+0xba0>
 8009324:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009328:	ec57 6b17 	vmov	r6, r7, d7
 800932c:	e796      	b.n	800925c <_strtod_l+0x9ac>
 800932e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009332:	9b04      	ldr	r3, [sp, #16]
 8009334:	46ca      	mov	sl, r9
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1c2      	bne.n	80092c0 <_strtod_l+0xa10>
 800933a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800933e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009340:	0d1b      	lsrs	r3, r3, #20
 8009342:	051b      	lsls	r3, r3, #20
 8009344:	429a      	cmp	r2, r3
 8009346:	d1bb      	bne.n	80092c0 <_strtod_l+0xa10>
 8009348:	4630      	mov	r0, r6
 800934a:	4639      	mov	r1, r7
 800934c:	f7f7 fdda 	bl	8000f04 <__aeabi_d2lz>
 8009350:	f7f7 f93c 	bl	80005cc <__aeabi_l2d>
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	4630      	mov	r0, r6
 800935a:	4639      	mov	r1, r7
 800935c:	f7f6 ffac 	bl	80002b8 <__aeabi_dsub>
 8009360:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009362:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009366:	ea43 0308 	orr.w	r3, r3, r8
 800936a:	4313      	orrs	r3, r2
 800936c:	4606      	mov	r6, r0
 800936e:	460f      	mov	r7, r1
 8009370:	d054      	beq.n	800941c <_strtod_l+0xb6c>
 8009372:	a339      	add	r3, pc, #228	; (adr r3, 8009458 <_strtod_l+0xba8>)
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	f7f7 fbc8 	bl	8000b0c <__aeabi_dcmplt>
 800937c:	2800      	cmp	r0, #0
 800937e:	f47f ace5 	bne.w	8008d4c <_strtod_l+0x49c>
 8009382:	a337      	add	r3, pc, #220	; (adr r3, 8009460 <_strtod_l+0xbb0>)
 8009384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009388:	4630      	mov	r0, r6
 800938a:	4639      	mov	r1, r7
 800938c:	f7f7 fbdc 	bl	8000b48 <__aeabi_dcmpgt>
 8009390:	2800      	cmp	r0, #0
 8009392:	d095      	beq.n	80092c0 <_strtod_l+0xa10>
 8009394:	e4da      	b.n	8008d4c <_strtod_l+0x49c>
 8009396:	9b04      	ldr	r3, [sp, #16]
 8009398:	b333      	cbz	r3, 80093e8 <_strtod_l+0xb38>
 800939a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800939c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80093a0:	d822      	bhi.n	80093e8 <_strtod_l+0xb38>
 80093a2:	a331      	add	r3, pc, #196	; (adr r3, 8009468 <_strtod_l+0xbb8>)
 80093a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a8:	4630      	mov	r0, r6
 80093aa:	4639      	mov	r1, r7
 80093ac:	f7f7 fbb8 	bl	8000b20 <__aeabi_dcmple>
 80093b0:	b1a0      	cbz	r0, 80093dc <_strtod_l+0xb2c>
 80093b2:	4639      	mov	r1, r7
 80093b4:	4630      	mov	r0, r6
 80093b6:	f7f7 fc0f 	bl	8000bd8 <__aeabi_d2uiz>
 80093ba:	2801      	cmp	r0, #1
 80093bc:	bf38      	it	cc
 80093be:	2001      	movcc	r0, #1
 80093c0:	f7f7 f8b8 	bl	8000534 <__aeabi_ui2d>
 80093c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093c6:	4606      	mov	r6, r0
 80093c8:	460f      	mov	r7, r1
 80093ca:	bb23      	cbnz	r3, 8009416 <_strtod_l+0xb66>
 80093cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093d0:	9010      	str	r0, [sp, #64]	; 0x40
 80093d2:	9311      	str	r3, [sp, #68]	; 0x44
 80093d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80093d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80093dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80093e4:	1a9b      	subs	r3, r3, r2
 80093e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80093e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80093ec:	eeb0 0a48 	vmov.f32	s0, s16
 80093f0:	eef0 0a68 	vmov.f32	s1, s17
 80093f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80093f8:	f7ff f8fc 	bl	80085f4 <__ulp>
 80093fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009400:	ec53 2b10 	vmov	r2, r3, d0
 8009404:	f7f7 f910 	bl	8000628 <__aeabi_dmul>
 8009408:	ec53 2b18 	vmov	r2, r3, d8
 800940c:	f7f6 ff56 	bl	80002bc <__adddf3>
 8009410:	4680      	mov	r8, r0
 8009412:	4689      	mov	r9, r1
 8009414:	e78d      	b.n	8009332 <_strtod_l+0xa82>
 8009416:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800941a:	e7db      	b.n	80093d4 <_strtod_l+0xb24>
 800941c:	a314      	add	r3, pc, #80	; (adr r3, 8009470 <_strtod_l+0xbc0>)
 800941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009422:	f7f7 fb73 	bl	8000b0c <__aeabi_dcmplt>
 8009426:	e7b3      	b.n	8009390 <_strtod_l+0xae0>
 8009428:	2300      	movs	r3, #0
 800942a:	930a      	str	r3, [sp, #40]	; 0x28
 800942c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800942e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009430:	6013      	str	r3, [r2, #0]
 8009432:	f7ff ba7c 	b.w	800892e <_strtod_l+0x7e>
 8009436:	2a65      	cmp	r2, #101	; 0x65
 8009438:	f43f ab75 	beq.w	8008b26 <_strtod_l+0x276>
 800943c:	2a45      	cmp	r2, #69	; 0x45
 800943e:	f43f ab72 	beq.w	8008b26 <_strtod_l+0x276>
 8009442:	2301      	movs	r3, #1
 8009444:	f7ff bbaa 	b.w	8008b9c <_strtod_l+0x2ec>
 8009448:	00000000 	.word	0x00000000
 800944c:	bff00000 	.word	0xbff00000
 8009450:	00000000 	.word	0x00000000
 8009454:	3ff00000 	.word	0x3ff00000
 8009458:	94a03595 	.word	0x94a03595
 800945c:	3fdfffff 	.word	0x3fdfffff
 8009460:	35afe535 	.word	0x35afe535
 8009464:	3fe00000 	.word	0x3fe00000
 8009468:	ffc00000 	.word	0xffc00000
 800946c:	41dfffff 	.word	0x41dfffff
 8009470:	94a03595 	.word	0x94a03595
 8009474:	3fcfffff 	.word	0x3fcfffff
 8009478:	3ff00000 	.word	0x3ff00000
 800947c:	3fe00000 	.word	0x3fe00000
 8009480:	7ff00000 	.word	0x7ff00000
 8009484:	7fe00000 	.word	0x7fe00000
 8009488:	7c9fffff 	.word	0x7c9fffff
 800948c:	7fefffff 	.word	0x7fefffff

08009490 <_strtod_r>:
 8009490:	4b01      	ldr	r3, [pc, #4]	; (8009498 <_strtod_r+0x8>)
 8009492:	f7ff ba0d 	b.w	80088b0 <_strtod_l>
 8009496:	bf00      	nop
 8009498:	20000078 	.word	0x20000078

0800949c <_strtol_l.constprop.0>:
 800949c:	2b01      	cmp	r3, #1
 800949e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a2:	d001      	beq.n	80094a8 <_strtol_l.constprop.0+0xc>
 80094a4:	2b24      	cmp	r3, #36	; 0x24
 80094a6:	d906      	bls.n	80094b6 <_strtol_l.constprop.0+0x1a>
 80094a8:	f7fd fd88 	bl	8006fbc <__errno>
 80094ac:	2316      	movs	r3, #22
 80094ae:	6003      	str	r3, [r0, #0]
 80094b0:	2000      	movs	r0, #0
 80094b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800959c <_strtol_l.constprop.0+0x100>
 80094ba:	460d      	mov	r5, r1
 80094bc:	462e      	mov	r6, r5
 80094be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094c2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80094c6:	f017 0708 	ands.w	r7, r7, #8
 80094ca:	d1f7      	bne.n	80094bc <_strtol_l.constprop.0+0x20>
 80094cc:	2c2d      	cmp	r4, #45	; 0x2d
 80094ce:	d132      	bne.n	8009536 <_strtol_l.constprop.0+0x9a>
 80094d0:	782c      	ldrb	r4, [r5, #0]
 80094d2:	2701      	movs	r7, #1
 80094d4:	1cb5      	adds	r5, r6, #2
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d05b      	beq.n	8009592 <_strtol_l.constprop.0+0xf6>
 80094da:	2b10      	cmp	r3, #16
 80094dc:	d109      	bne.n	80094f2 <_strtol_l.constprop.0+0x56>
 80094de:	2c30      	cmp	r4, #48	; 0x30
 80094e0:	d107      	bne.n	80094f2 <_strtol_l.constprop.0+0x56>
 80094e2:	782c      	ldrb	r4, [r5, #0]
 80094e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80094e8:	2c58      	cmp	r4, #88	; 0x58
 80094ea:	d14d      	bne.n	8009588 <_strtol_l.constprop.0+0xec>
 80094ec:	786c      	ldrb	r4, [r5, #1]
 80094ee:	2310      	movs	r3, #16
 80094f0:	3502      	adds	r5, #2
 80094f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80094f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80094fa:	f04f 0e00 	mov.w	lr, #0
 80094fe:	fbb8 f9f3 	udiv	r9, r8, r3
 8009502:	4676      	mov	r6, lr
 8009504:	fb03 8a19 	mls	sl, r3, r9, r8
 8009508:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800950c:	f1bc 0f09 	cmp.w	ip, #9
 8009510:	d816      	bhi.n	8009540 <_strtol_l.constprop.0+0xa4>
 8009512:	4664      	mov	r4, ip
 8009514:	42a3      	cmp	r3, r4
 8009516:	dd24      	ble.n	8009562 <_strtol_l.constprop.0+0xc6>
 8009518:	f1be 3fff 	cmp.w	lr, #4294967295
 800951c:	d008      	beq.n	8009530 <_strtol_l.constprop.0+0x94>
 800951e:	45b1      	cmp	r9, r6
 8009520:	d31c      	bcc.n	800955c <_strtol_l.constprop.0+0xc0>
 8009522:	d101      	bne.n	8009528 <_strtol_l.constprop.0+0x8c>
 8009524:	45a2      	cmp	sl, r4
 8009526:	db19      	blt.n	800955c <_strtol_l.constprop.0+0xc0>
 8009528:	fb06 4603 	mla	r6, r6, r3, r4
 800952c:	f04f 0e01 	mov.w	lr, #1
 8009530:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009534:	e7e8      	b.n	8009508 <_strtol_l.constprop.0+0x6c>
 8009536:	2c2b      	cmp	r4, #43	; 0x2b
 8009538:	bf04      	itt	eq
 800953a:	782c      	ldrbeq	r4, [r5, #0]
 800953c:	1cb5      	addeq	r5, r6, #2
 800953e:	e7ca      	b.n	80094d6 <_strtol_l.constprop.0+0x3a>
 8009540:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009544:	f1bc 0f19 	cmp.w	ip, #25
 8009548:	d801      	bhi.n	800954e <_strtol_l.constprop.0+0xb2>
 800954a:	3c37      	subs	r4, #55	; 0x37
 800954c:	e7e2      	b.n	8009514 <_strtol_l.constprop.0+0x78>
 800954e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009552:	f1bc 0f19 	cmp.w	ip, #25
 8009556:	d804      	bhi.n	8009562 <_strtol_l.constprop.0+0xc6>
 8009558:	3c57      	subs	r4, #87	; 0x57
 800955a:	e7db      	b.n	8009514 <_strtol_l.constprop.0+0x78>
 800955c:	f04f 3eff 	mov.w	lr, #4294967295
 8009560:	e7e6      	b.n	8009530 <_strtol_l.constprop.0+0x94>
 8009562:	f1be 3fff 	cmp.w	lr, #4294967295
 8009566:	d105      	bne.n	8009574 <_strtol_l.constprop.0+0xd8>
 8009568:	2322      	movs	r3, #34	; 0x22
 800956a:	6003      	str	r3, [r0, #0]
 800956c:	4646      	mov	r6, r8
 800956e:	b942      	cbnz	r2, 8009582 <_strtol_l.constprop.0+0xe6>
 8009570:	4630      	mov	r0, r6
 8009572:	e79e      	b.n	80094b2 <_strtol_l.constprop.0+0x16>
 8009574:	b107      	cbz	r7, 8009578 <_strtol_l.constprop.0+0xdc>
 8009576:	4276      	negs	r6, r6
 8009578:	2a00      	cmp	r2, #0
 800957a:	d0f9      	beq.n	8009570 <_strtol_l.constprop.0+0xd4>
 800957c:	f1be 0f00 	cmp.w	lr, #0
 8009580:	d000      	beq.n	8009584 <_strtol_l.constprop.0+0xe8>
 8009582:	1e69      	subs	r1, r5, #1
 8009584:	6011      	str	r1, [r2, #0]
 8009586:	e7f3      	b.n	8009570 <_strtol_l.constprop.0+0xd4>
 8009588:	2430      	movs	r4, #48	; 0x30
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1b1      	bne.n	80094f2 <_strtol_l.constprop.0+0x56>
 800958e:	2308      	movs	r3, #8
 8009590:	e7af      	b.n	80094f2 <_strtol_l.constprop.0+0x56>
 8009592:	2c30      	cmp	r4, #48	; 0x30
 8009594:	d0a5      	beq.n	80094e2 <_strtol_l.constprop.0+0x46>
 8009596:	230a      	movs	r3, #10
 8009598:	e7ab      	b.n	80094f2 <_strtol_l.constprop.0+0x56>
 800959a:	bf00      	nop
 800959c:	0800ae79 	.word	0x0800ae79

080095a0 <_strtol_r>:
 80095a0:	f7ff bf7c 	b.w	800949c <_strtol_l.constprop.0>

080095a4 <__ssputs_r>:
 80095a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095a8:	688e      	ldr	r6, [r1, #8]
 80095aa:	461f      	mov	r7, r3
 80095ac:	42be      	cmp	r6, r7
 80095ae:	680b      	ldr	r3, [r1, #0]
 80095b0:	4682      	mov	sl, r0
 80095b2:	460c      	mov	r4, r1
 80095b4:	4690      	mov	r8, r2
 80095b6:	d82c      	bhi.n	8009612 <__ssputs_r+0x6e>
 80095b8:	898a      	ldrh	r2, [r1, #12]
 80095ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095be:	d026      	beq.n	800960e <__ssputs_r+0x6a>
 80095c0:	6965      	ldr	r5, [r4, #20]
 80095c2:	6909      	ldr	r1, [r1, #16]
 80095c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095c8:	eba3 0901 	sub.w	r9, r3, r1
 80095cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095d0:	1c7b      	adds	r3, r7, #1
 80095d2:	444b      	add	r3, r9
 80095d4:	106d      	asrs	r5, r5, #1
 80095d6:	429d      	cmp	r5, r3
 80095d8:	bf38      	it	cc
 80095da:	461d      	movcc	r5, r3
 80095dc:	0553      	lsls	r3, r2, #21
 80095de:	d527      	bpl.n	8009630 <__ssputs_r+0x8c>
 80095e0:	4629      	mov	r1, r5
 80095e2:	f7fe fc0f 	bl	8007e04 <_malloc_r>
 80095e6:	4606      	mov	r6, r0
 80095e8:	b360      	cbz	r0, 8009644 <__ssputs_r+0xa0>
 80095ea:	6921      	ldr	r1, [r4, #16]
 80095ec:	464a      	mov	r2, r9
 80095ee:	f000 fa1b 	bl	8009a28 <memcpy>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095fc:	81a3      	strh	r3, [r4, #12]
 80095fe:	6126      	str	r6, [r4, #16]
 8009600:	6165      	str	r5, [r4, #20]
 8009602:	444e      	add	r6, r9
 8009604:	eba5 0509 	sub.w	r5, r5, r9
 8009608:	6026      	str	r6, [r4, #0]
 800960a:	60a5      	str	r5, [r4, #8]
 800960c:	463e      	mov	r6, r7
 800960e:	42be      	cmp	r6, r7
 8009610:	d900      	bls.n	8009614 <__ssputs_r+0x70>
 8009612:	463e      	mov	r6, r7
 8009614:	6820      	ldr	r0, [r4, #0]
 8009616:	4632      	mov	r2, r6
 8009618:	4641      	mov	r1, r8
 800961a:	f000 f9c9 	bl	80099b0 <memmove>
 800961e:	68a3      	ldr	r3, [r4, #8]
 8009620:	1b9b      	subs	r3, r3, r6
 8009622:	60a3      	str	r3, [r4, #8]
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	4433      	add	r3, r6
 8009628:	6023      	str	r3, [r4, #0]
 800962a:	2000      	movs	r0, #0
 800962c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009630:	462a      	mov	r2, r5
 8009632:	f000 fdae 	bl	800a192 <_realloc_r>
 8009636:	4606      	mov	r6, r0
 8009638:	2800      	cmp	r0, #0
 800963a:	d1e0      	bne.n	80095fe <__ssputs_r+0x5a>
 800963c:	6921      	ldr	r1, [r4, #16]
 800963e:	4650      	mov	r0, sl
 8009640:	f7fe fb6c 	bl	8007d1c <_free_r>
 8009644:	230c      	movs	r3, #12
 8009646:	f8ca 3000 	str.w	r3, [sl]
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009650:	81a3      	strh	r3, [r4, #12]
 8009652:	f04f 30ff 	mov.w	r0, #4294967295
 8009656:	e7e9      	b.n	800962c <__ssputs_r+0x88>

08009658 <_svfiprintf_r>:
 8009658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965c:	4698      	mov	r8, r3
 800965e:	898b      	ldrh	r3, [r1, #12]
 8009660:	061b      	lsls	r3, r3, #24
 8009662:	b09d      	sub	sp, #116	; 0x74
 8009664:	4607      	mov	r7, r0
 8009666:	460d      	mov	r5, r1
 8009668:	4614      	mov	r4, r2
 800966a:	d50e      	bpl.n	800968a <_svfiprintf_r+0x32>
 800966c:	690b      	ldr	r3, [r1, #16]
 800966e:	b963      	cbnz	r3, 800968a <_svfiprintf_r+0x32>
 8009670:	2140      	movs	r1, #64	; 0x40
 8009672:	f7fe fbc7 	bl	8007e04 <_malloc_r>
 8009676:	6028      	str	r0, [r5, #0]
 8009678:	6128      	str	r0, [r5, #16]
 800967a:	b920      	cbnz	r0, 8009686 <_svfiprintf_r+0x2e>
 800967c:	230c      	movs	r3, #12
 800967e:	603b      	str	r3, [r7, #0]
 8009680:	f04f 30ff 	mov.w	r0, #4294967295
 8009684:	e0d0      	b.n	8009828 <_svfiprintf_r+0x1d0>
 8009686:	2340      	movs	r3, #64	; 0x40
 8009688:	616b      	str	r3, [r5, #20]
 800968a:	2300      	movs	r3, #0
 800968c:	9309      	str	r3, [sp, #36]	; 0x24
 800968e:	2320      	movs	r3, #32
 8009690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009694:	f8cd 800c 	str.w	r8, [sp, #12]
 8009698:	2330      	movs	r3, #48	; 0x30
 800969a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009840 <_svfiprintf_r+0x1e8>
 800969e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096a2:	f04f 0901 	mov.w	r9, #1
 80096a6:	4623      	mov	r3, r4
 80096a8:	469a      	mov	sl, r3
 80096aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ae:	b10a      	cbz	r2, 80096b4 <_svfiprintf_r+0x5c>
 80096b0:	2a25      	cmp	r2, #37	; 0x25
 80096b2:	d1f9      	bne.n	80096a8 <_svfiprintf_r+0x50>
 80096b4:	ebba 0b04 	subs.w	fp, sl, r4
 80096b8:	d00b      	beq.n	80096d2 <_svfiprintf_r+0x7a>
 80096ba:	465b      	mov	r3, fp
 80096bc:	4622      	mov	r2, r4
 80096be:	4629      	mov	r1, r5
 80096c0:	4638      	mov	r0, r7
 80096c2:	f7ff ff6f 	bl	80095a4 <__ssputs_r>
 80096c6:	3001      	adds	r0, #1
 80096c8:	f000 80a9 	beq.w	800981e <_svfiprintf_r+0x1c6>
 80096cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096ce:	445a      	add	r2, fp
 80096d0:	9209      	str	r2, [sp, #36]	; 0x24
 80096d2:	f89a 3000 	ldrb.w	r3, [sl]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f000 80a1 	beq.w	800981e <_svfiprintf_r+0x1c6>
 80096dc:	2300      	movs	r3, #0
 80096de:	f04f 32ff 	mov.w	r2, #4294967295
 80096e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096e6:	f10a 0a01 	add.w	sl, sl, #1
 80096ea:	9304      	str	r3, [sp, #16]
 80096ec:	9307      	str	r3, [sp, #28]
 80096ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096f2:	931a      	str	r3, [sp, #104]	; 0x68
 80096f4:	4654      	mov	r4, sl
 80096f6:	2205      	movs	r2, #5
 80096f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096fc:	4850      	ldr	r0, [pc, #320]	; (8009840 <_svfiprintf_r+0x1e8>)
 80096fe:	f7f6 fd7f 	bl	8000200 <memchr>
 8009702:	9a04      	ldr	r2, [sp, #16]
 8009704:	b9d8      	cbnz	r0, 800973e <_svfiprintf_r+0xe6>
 8009706:	06d0      	lsls	r0, r2, #27
 8009708:	bf44      	itt	mi
 800970a:	2320      	movmi	r3, #32
 800970c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009710:	0711      	lsls	r1, r2, #28
 8009712:	bf44      	itt	mi
 8009714:	232b      	movmi	r3, #43	; 0x2b
 8009716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800971a:	f89a 3000 	ldrb.w	r3, [sl]
 800971e:	2b2a      	cmp	r3, #42	; 0x2a
 8009720:	d015      	beq.n	800974e <_svfiprintf_r+0xf6>
 8009722:	9a07      	ldr	r2, [sp, #28]
 8009724:	4654      	mov	r4, sl
 8009726:	2000      	movs	r0, #0
 8009728:	f04f 0c0a 	mov.w	ip, #10
 800972c:	4621      	mov	r1, r4
 800972e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009732:	3b30      	subs	r3, #48	; 0x30
 8009734:	2b09      	cmp	r3, #9
 8009736:	d94d      	bls.n	80097d4 <_svfiprintf_r+0x17c>
 8009738:	b1b0      	cbz	r0, 8009768 <_svfiprintf_r+0x110>
 800973a:	9207      	str	r2, [sp, #28]
 800973c:	e014      	b.n	8009768 <_svfiprintf_r+0x110>
 800973e:	eba0 0308 	sub.w	r3, r0, r8
 8009742:	fa09 f303 	lsl.w	r3, r9, r3
 8009746:	4313      	orrs	r3, r2
 8009748:	9304      	str	r3, [sp, #16]
 800974a:	46a2      	mov	sl, r4
 800974c:	e7d2      	b.n	80096f4 <_svfiprintf_r+0x9c>
 800974e:	9b03      	ldr	r3, [sp, #12]
 8009750:	1d19      	adds	r1, r3, #4
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	9103      	str	r1, [sp, #12]
 8009756:	2b00      	cmp	r3, #0
 8009758:	bfbb      	ittet	lt
 800975a:	425b      	neglt	r3, r3
 800975c:	f042 0202 	orrlt.w	r2, r2, #2
 8009760:	9307      	strge	r3, [sp, #28]
 8009762:	9307      	strlt	r3, [sp, #28]
 8009764:	bfb8      	it	lt
 8009766:	9204      	strlt	r2, [sp, #16]
 8009768:	7823      	ldrb	r3, [r4, #0]
 800976a:	2b2e      	cmp	r3, #46	; 0x2e
 800976c:	d10c      	bne.n	8009788 <_svfiprintf_r+0x130>
 800976e:	7863      	ldrb	r3, [r4, #1]
 8009770:	2b2a      	cmp	r3, #42	; 0x2a
 8009772:	d134      	bne.n	80097de <_svfiprintf_r+0x186>
 8009774:	9b03      	ldr	r3, [sp, #12]
 8009776:	1d1a      	adds	r2, r3, #4
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	9203      	str	r2, [sp, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	bfb8      	it	lt
 8009780:	f04f 33ff 	movlt.w	r3, #4294967295
 8009784:	3402      	adds	r4, #2
 8009786:	9305      	str	r3, [sp, #20]
 8009788:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009850 <_svfiprintf_r+0x1f8>
 800978c:	7821      	ldrb	r1, [r4, #0]
 800978e:	2203      	movs	r2, #3
 8009790:	4650      	mov	r0, sl
 8009792:	f7f6 fd35 	bl	8000200 <memchr>
 8009796:	b138      	cbz	r0, 80097a8 <_svfiprintf_r+0x150>
 8009798:	9b04      	ldr	r3, [sp, #16]
 800979a:	eba0 000a 	sub.w	r0, r0, sl
 800979e:	2240      	movs	r2, #64	; 0x40
 80097a0:	4082      	lsls	r2, r0
 80097a2:	4313      	orrs	r3, r2
 80097a4:	3401      	adds	r4, #1
 80097a6:	9304      	str	r3, [sp, #16]
 80097a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ac:	4825      	ldr	r0, [pc, #148]	; (8009844 <_svfiprintf_r+0x1ec>)
 80097ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097b2:	2206      	movs	r2, #6
 80097b4:	f7f6 fd24 	bl	8000200 <memchr>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d038      	beq.n	800982e <_svfiprintf_r+0x1d6>
 80097bc:	4b22      	ldr	r3, [pc, #136]	; (8009848 <_svfiprintf_r+0x1f0>)
 80097be:	bb1b      	cbnz	r3, 8009808 <_svfiprintf_r+0x1b0>
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	3307      	adds	r3, #7
 80097c4:	f023 0307 	bic.w	r3, r3, #7
 80097c8:	3308      	adds	r3, #8
 80097ca:	9303      	str	r3, [sp, #12]
 80097cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ce:	4433      	add	r3, r6
 80097d0:	9309      	str	r3, [sp, #36]	; 0x24
 80097d2:	e768      	b.n	80096a6 <_svfiprintf_r+0x4e>
 80097d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80097d8:	460c      	mov	r4, r1
 80097da:	2001      	movs	r0, #1
 80097dc:	e7a6      	b.n	800972c <_svfiprintf_r+0xd4>
 80097de:	2300      	movs	r3, #0
 80097e0:	3401      	adds	r4, #1
 80097e2:	9305      	str	r3, [sp, #20]
 80097e4:	4619      	mov	r1, r3
 80097e6:	f04f 0c0a 	mov.w	ip, #10
 80097ea:	4620      	mov	r0, r4
 80097ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097f0:	3a30      	subs	r2, #48	; 0x30
 80097f2:	2a09      	cmp	r2, #9
 80097f4:	d903      	bls.n	80097fe <_svfiprintf_r+0x1a6>
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d0c6      	beq.n	8009788 <_svfiprintf_r+0x130>
 80097fa:	9105      	str	r1, [sp, #20]
 80097fc:	e7c4      	b.n	8009788 <_svfiprintf_r+0x130>
 80097fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009802:	4604      	mov	r4, r0
 8009804:	2301      	movs	r3, #1
 8009806:	e7f0      	b.n	80097ea <_svfiprintf_r+0x192>
 8009808:	ab03      	add	r3, sp, #12
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	462a      	mov	r2, r5
 800980e:	4b0f      	ldr	r3, [pc, #60]	; (800984c <_svfiprintf_r+0x1f4>)
 8009810:	a904      	add	r1, sp, #16
 8009812:	4638      	mov	r0, r7
 8009814:	f7fc fc84 	bl	8006120 <_printf_float>
 8009818:	1c42      	adds	r2, r0, #1
 800981a:	4606      	mov	r6, r0
 800981c:	d1d6      	bne.n	80097cc <_svfiprintf_r+0x174>
 800981e:	89ab      	ldrh	r3, [r5, #12]
 8009820:	065b      	lsls	r3, r3, #25
 8009822:	f53f af2d 	bmi.w	8009680 <_svfiprintf_r+0x28>
 8009826:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009828:	b01d      	add	sp, #116	; 0x74
 800982a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982e:	ab03      	add	r3, sp, #12
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	462a      	mov	r2, r5
 8009834:	4b05      	ldr	r3, [pc, #20]	; (800984c <_svfiprintf_r+0x1f4>)
 8009836:	a904      	add	r1, sp, #16
 8009838:	4638      	mov	r0, r7
 800983a:	f7fc ff15 	bl	8006668 <_printf_i>
 800983e:	e7eb      	b.n	8009818 <_svfiprintf_r+0x1c0>
 8009840:	0800af79 	.word	0x0800af79
 8009844:	0800af83 	.word	0x0800af83
 8009848:	08006121 	.word	0x08006121
 800984c:	080095a5 	.word	0x080095a5
 8009850:	0800af7f 	.word	0x0800af7f

08009854 <__sflush_r>:
 8009854:	898a      	ldrh	r2, [r1, #12]
 8009856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800985a:	4605      	mov	r5, r0
 800985c:	0710      	lsls	r0, r2, #28
 800985e:	460c      	mov	r4, r1
 8009860:	d458      	bmi.n	8009914 <__sflush_r+0xc0>
 8009862:	684b      	ldr	r3, [r1, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	dc05      	bgt.n	8009874 <__sflush_r+0x20>
 8009868:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800986a:	2b00      	cmp	r3, #0
 800986c:	dc02      	bgt.n	8009874 <__sflush_r+0x20>
 800986e:	2000      	movs	r0, #0
 8009870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009876:	2e00      	cmp	r6, #0
 8009878:	d0f9      	beq.n	800986e <__sflush_r+0x1a>
 800987a:	2300      	movs	r3, #0
 800987c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009880:	682f      	ldr	r7, [r5, #0]
 8009882:	6a21      	ldr	r1, [r4, #32]
 8009884:	602b      	str	r3, [r5, #0]
 8009886:	d032      	beq.n	80098ee <__sflush_r+0x9a>
 8009888:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	075a      	lsls	r2, r3, #29
 800988e:	d505      	bpl.n	800989c <__sflush_r+0x48>
 8009890:	6863      	ldr	r3, [r4, #4]
 8009892:	1ac0      	subs	r0, r0, r3
 8009894:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009896:	b10b      	cbz	r3, 800989c <__sflush_r+0x48>
 8009898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800989a:	1ac0      	subs	r0, r0, r3
 800989c:	2300      	movs	r3, #0
 800989e:	4602      	mov	r2, r0
 80098a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098a2:	6a21      	ldr	r1, [r4, #32]
 80098a4:	4628      	mov	r0, r5
 80098a6:	47b0      	blx	r6
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	d106      	bne.n	80098bc <__sflush_r+0x68>
 80098ae:	6829      	ldr	r1, [r5, #0]
 80098b0:	291d      	cmp	r1, #29
 80098b2:	d82b      	bhi.n	800990c <__sflush_r+0xb8>
 80098b4:	4a29      	ldr	r2, [pc, #164]	; (800995c <__sflush_r+0x108>)
 80098b6:	410a      	asrs	r2, r1
 80098b8:	07d6      	lsls	r6, r2, #31
 80098ba:	d427      	bmi.n	800990c <__sflush_r+0xb8>
 80098bc:	2200      	movs	r2, #0
 80098be:	6062      	str	r2, [r4, #4]
 80098c0:	04d9      	lsls	r1, r3, #19
 80098c2:	6922      	ldr	r2, [r4, #16]
 80098c4:	6022      	str	r2, [r4, #0]
 80098c6:	d504      	bpl.n	80098d2 <__sflush_r+0x7e>
 80098c8:	1c42      	adds	r2, r0, #1
 80098ca:	d101      	bne.n	80098d0 <__sflush_r+0x7c>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	b903      	cbnz	r3, 80098d2 <__sflush_r+0x7e>
 80098d0:	6560      	str	r0, [r4, #84]	; 0x54
 80098d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098d4:	602f      	str	r7, [r5, #0]
 80098d6:	2900      	cmp	r1, #0
 80098d8:	d0c9      	beq.n	800986e <__sflush_r+0x1a>
 80098da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098de:	4299      	cmp	r1, r3
 80098e0:	d002      	beq.n	80098e8 <__sflush_r+0x94>
 80098e2:	4628      	mov	r0, r5
 80098e4:	f7fe fa1a 	bl	8007d1c <_free_r>
 80098e8:	2000      	movs	r0, #0
 80098ea:	6360      	str	r0, [r4, #52]	; 0x34
 80098ec:	e7c0      	b.n	8009870 <__sflush_r+0x1c>
 80098ee:	2301      	movs	r3, #1
 80098f0:	4628      	mov	r0, r5
 80098f2:	47b0      	blx	r6
 80098f4:	1c41      	adds	r1, r0, #1
 80098f6:	d1c8      	bne.n	800988a <__sflush_r+0x36>
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d0c5      	beq.n	800988a <__sflush_r+0x36>
 80098fe:	2b1d      	cmp	r3, #29
 8009900:	d001      	beq.n	8009906 <__sflush_r+0xb2>
 8009902:	2b16      	cmp	r3, #22
 8009904:	d101      	bne.n	800990a <__sflush_r+0xb6>
 8009906:	602f      	str	r7, [r5, #0]
 8009908:	e7b1      	b.n	800986e <__sflush_r+0x1a>
 800990a:	89a3      	ldrh	r3, [r4, #12]
 800990c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009910:	81a3      	strh	r3, [r4, #12]
 8009912:	e7ad      	b.n	8009870 <__sflush_r+0x1c>
 8009914:	690f      	ldr	r7, [r1, #16]
 8009916:	2f00      	cmp	r7, #0
 8009918:	d0a9      	beq.n	800986e <__sflush_r+0x1a>
 800991a:	0793      	lsls	r3, r2, #30
 800991c:	680e      	ldr	r6, [r1, #0]
 800991e:	bf08      	it	eq
 8009920:	694b      	ldreq	r3, [r1, #20]
 8009922:	600f      	str	r7, [r1, #0]
 8009924:	bf18      	it	ne
 8009926:	2300      	movne	r3, #0
 8009928:	eba6 0807 	sub.w	r8, r6, r7
 800992c:	608b      	str	r3, [r1, #8]
 800992e:	f1b8 0f00 	cmp.w	r8, #0
 8009932:	dd9c      	ble.n	800986e <__sflush_r+0x1a>
 8009934:	6a21      	ldr	r1, [r4, #32]
 8009936:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009938:	4643      	mov	r3, r8
 800993a:	463a      	mov	r2, r7
 800993c:	4628      	mov	r0, r5
 800993e:	47b0      	blx	r6
 8009940:	2800      	cmp	r0, #0
 8009942:	dc06      	bgt.n	8009952 <__sflush_r+0xfe>
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800994a:	81a3      	strh	r3, [r4, #12]
 800994c:	f04f 30ff 	mov.w	r0, #4294967295
 8009950:	e78e      	b.n	8009870 <__sflush_r+0x1c>
 8009952:	4407      	add	r7, r0
 8009954:	eba8 0800 	sub.w	r8, r8, r0
 8009958:	e7e9      	b.n	800992e <__sflush_r+0xda>
 800995a:	bf00      	nop
 800995c:	dfbffffe 	.word	0xdfbffffe

08009960 <_fflush_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	690b      	ldr	r3, [r1, #16]
 8009964:	4605      	mov	r5, r0
 8009966:	460c      	mov	r4, r1
 8009968:	b913      	cbnz	r3, 8009970 <_fflush_r+0x10>
 800996a:	2500      	movs	r5, #0
 800996c:	4628      	mov	r0, r5
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	b118      	cbz	r0, 800997a <_fflush_r+0x1a>
 8009972:	6a03      	ldr	r3, [r0, #32]
 8009974:	b90b      	cbnz	r3, 800997a <_fflush_r+0x1a>
 8009976:	f7fd fa35 	bl	8006de4 <__sinit>
 800997a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d0f3      	beq.n	800996a <_fflush_r+0xa>
 8009982:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009984:	07d0      	lsls	r0, r2, #31
 8009986:	d404      	bmi.n	8009992 <_fflush_r+0x32>
 8009988:	0599      	lsls	r1, r3, #22
 800998a:	d402      	bmi.n	8009992 <_fflush_r+0x32>
 800998c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800998e:	f7fd fb40 	bl	8007012 <__retarget_lock_acquire_recursive>
 8009992:	4628      	mov	r0, r5
 8009994:	4621      	mov	r1, r4
 8009996:	f7ff ff5d 	bl	8009854 <__sflush_r>
 800999a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800999c:	07da      	lsls	r2, r3, #31
 800999e:	4605      	mov	r5, r0
 80099a0:	d4e4      	bmi.n	800996c <_fflush_r+0xc>
 80099a2:	89a3      	ldrh	r3, [r4, #12]
 80099a4:	059b      	lsls	r3, r3, #22
 80099a6:	d4e1      	bmi.n	800996c <_fflush_r+0xc>
 80099a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099aa:	f7fd fb33 	bl	8007014 <__retarget_lock_release_recursive>
 80099ae:	e7dd      	b.n	800996c <_fflush_r+0xc>

080099b0 <memmove>:
 80099b0:	4288      	cmp	r0, r1
 80099b2:	b510      	push	{r4, lr}
 80099b4:	eb01 0402 	add.w	r4, r1, r2
 80099b8:	d902      	bls.n	80099c0 <memmove+0x10>
 80099ba:	4284      	cmp	r4, r0
 80099bc:	4623      	mov	r3, r4
 80099be:	d807      	bhi.n	80099d0 <memmove+0x20>
 80099c0:	1e43      	subs	r3, r0, #1
 80099c2:	42a1      	cmp	r1, r4
 80099c4:	d008      	beq.n	80099d8 <memmove+0x28>
 80099c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099ce:	e7f8      	b.n	80099c2 <memmove+0x12>
 80099d0:	4402      	add	r2, r0
 80099d2:	4601      	mov	r1, r0
 80099d4:	428a      	cmp	r2, r1
 80099d6:	d100      	bne.n	80099da <memmove+0x2a>
 80099d8:	bd10      	pop	{r4, pc}
 80099da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099e2:	e7f7      	b.n	80099d4 <memmove+0x24>

080099e4 <strncmp>:
 80099e4:	b510      	push	{r4, lr}
 80099e6:	b16a      	cbz	r2, 8009a04 <strncmp+0x20>
 80099e8:	3901      	subs	r1, #1
 80099ea:	1884      	adds	r4, r0, r2
 80099ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d103      	bne.n	8009a00 <strncmp+0x1c>
 80099f8:	42a0      	cmp	r0, r4
 80099fa:	d001      	beq.n	8009a00 <strncmp+0x1c>
 80099fc:	2a00      	cmp	r2, #0
 80099fe:	d1f5      	bne.n	80099ec <strncmp+0x8>
 8009a00:	1ad0      	subs	r0, r2, r3
 8009a02:	bd10      	pop	{r4, pc}
 8009a04:	4610      	mov	r0, r2
 8009a06:	e7fc      	b.n	8009a02 <strncmp+0x1e>

08009a08 <_sbrk_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4d06      	ldr	r5, [pc, #24]	; (8009a24 <_sbrk_r+0x1c>)
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	4604      	mov	r4, r0
 8009a10:	4608      	mov	r0, r1
 8009a12:	602b      	str	r3, [r5, #0]
 8009a14:	f7f8 fc98 	bl	8002348 <_sbrk>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	d102      	bne.n	8009a22 <_sbrk_r+0x1a>
 8009a1c:	682b      	ldr	r3, [r5, #0]
 8009a1e:	b103      	cbz	r3, 8009a22 <_sbrk_r+0x1a>
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	bd38      	pop	{r3, r4, r5, pc}
 8009a24:	200007e8 	.word	0x200007e8

08009a28 <memcpy>:
 8009a28:	440a      	add	r2, r1
 8009a2a:	4291      	cmp	r1, r2
 8009a2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a30:	d100      	bne.n	8009a34 <memcpy+0xc>
 8009a32:	4770      	bx	lr
 8009a34:	b510      	push	{r4, lr}
 8009a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a3e:	4291      	cmp	r1, r2
 8009a40:	d1f9      	bne.n	8009a36 <memcpy+0xe>
 8009a42:	bd10      	pop	{r4, pc}
 8009a44:	0000      	movs	r0, r0
	...

08009a48 <nan>:
 8009a48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009a50 <nan+0x8>
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	00000000 	.word	0x00000000
 8009a54:	7ff80000 	.word	0x7ff80000

08009a58 <__assert_func>:
 8009a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a5a:	4614      	mov	r4, r2
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	4b09      	ldr	r3, [pc, #36]	; (8009a84 <__assert_func+0x2c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4605      	mov	r5, r0
 8009a64:	68d8      	ldr	r0, [r3, #12]
 8009a66:	b14c      	cbz	r4, 8009a7c <__assert_func+0x24>
 8009a68:	4b07      	ldr	r3, [pc, #28]	; (8009a88 <__assert_func+0x30>)
 8009a6a:	9100      	str	r1, [sp, #0]
 8009a6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a70:	4906      	ldr	r1, [pc, #24]	; (8009a8c <__assert_func+0x34>)
 8009a72:	462b      	mov	r3, r5
 8009a74:	f000 fbca 	bl	800a20c <fiprintf>
 8009a78:	f000 fbda 	bl	800a230 <abort>
 8009a7c:	4b04      	ldr	r3, [pc, #16]	; (8009a90 <__assert_func+0x38>)
 8009a7e:	461c      	mov	r4, r3
 8009a80:	e7f3      	b.n	8009a6a <__assert_func+0x12>
 8009a82:	bf00      	nop
 8009a84:	20000074 	.word	0x20000074
 8009a88:	0800af92 	.word	0x0800af92
 8009a8c:	0800af9f 	.word	0x0800af9f
 8009a90:	0800afcd 	.word	0x0800afcd

08009a94 <_calloc_r>:
 8009a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a96:	fba1 2402 	umull	r2, r4, r1, r2
 8009a9a:	b94c      	cbnz	r4, 8009ab0 <_calloc_r+0x1c>
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	9201      	str	r2, [sp, #4]
 8009aa0:	f7fe f9b0 	bl	8007e04 <_malloc_r>
 8009aa4:	9a01      	ldr	r2, [sp, #4]
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	b930      	cbnz	r0, 8009ab8 <_calloc_r+0x24>
 8009aaa:	4628      	mov	r0, r5
 8009aac:	b003      	add	sp, #12
 8009aae:	bd30      	pop	{r4, r5, pc}
 8009ab0:	220c      	movs	r2, #12
 8009ab2:	6002      	str	r2, [r0, #0]
 8009ab4:	2500      	movs	r5, #0
 8009ab6:	e7f8      	b.n	8009aaa <_calloc_r+0x16>
 8009ab8:	4621      	mov	r1, r4
 8009aba:	f7fd fa2c 	bl	8006f16 <memset>
 8009abe:	e7f4      	b.n	8009aaa <_calloc_r+0x16>

08009ac0 <rshift>:
 8009ac0:	6903      	ldr	r3, [r0, #16]
 8009ac2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ac6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009aca:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ace:	f100 0414 	add.w	r4, r0, #20
 8009ad2:	dd45      	ble.n	8009b60 <rshift+0xa0>
 8009ad4:	f011 011f 	ands.w	r1, r1, #31
 8009ad8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009adc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ae0:	d10c      	bne.n	8009afc <rshift+0x3c>
 8009ae2:	f100 0710 	add.w	r7, r0, #16
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	42b1      	cmp	r1, r6
 8009aea:	d334      	bcc.n	8009b56 <rshift+0x96>
 8009aec:	1a9b      	subs	r3, r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	1eea      	subs	r2, r5, #3
 8009af2:	4296      	cmp	r6, r2
 8009af4:	bf38      	it	cc
 8009af6:	2300      	movcc	r3, #0
 8009af8:	4423      	add	r3, r4
 8009afa:	e015      	b.n	8009b28 <rshift+0x68>
 8009afc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b00:	f1c1 0820 	rsb	r8, r1, #32
 8009b04:	40cf      	lsrs	r7, r1
 8009b06:	f105 0e04 	add.w	lr, r5, #4
 8009b0a:	46a1      	mov	r9, r4
 8009b0c:	4576      	cmp	r6, lr
 8009b0e:	46f4      	mov	ip, lr
 8009b10:	d815      	bhi.n	8009b3e <rshift+0x7e>
 8009b12:	1a9a      	subs	r2, r3, r2
 8009b14:	0092      	lsls	r2, r2, #2
 8009b16:	3a04      	subs	r2, #4
 8009b18:	3501      	adds	r5, #1
 8009b1a:	42ae      	cmp	r6, r5
 8009b1c:	bf38      	it	cc
 8009b1e:	2200      	movcc	r2, #0
 8009b20:	18a3      	adds	r3, r4, r2
 8009b22:	50a7      	str	r7, [r4, r2]
 8009b24:	b107      	cbz	r7, 8009b28 <rshift+0x68>
 8009b26:	3304      	adds	r3, #4
 8009b28:	1b1a      	subs	r2, r3, r4
 8009b2a:	42a3      	cmp	r3, r4
 8009b2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b30:	bf08      	it	eq
 8009b32:	2300      	moveq	r3, #0
 8009b34:	6102      	str	r2, [r0, #16]
 8009b36:	bf08      	it	eq
 8009b38:	6143      	streq	r3, [r0, #20]
 8009b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b3e:	f8dc c000 	ldr.w	ip, [ip]
 8009b42:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b46:	ea4c 0707 	orr.w	r7, ip, r7
 8009b4a:	f849 7b04 	str.w	r7, [r9], #4
 8009b4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b52:	40cf      	lsrs	r7, r1
 8009b54:	e7da      	b.n	8009b0c <rshift+0x4c>
 8009b56:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b5a:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b5e:	e7c3      	b.n	8009ae8 <rshift+0x28>
 8009b60:	4623      	mov	r3, r4
 8009b62:	e7e1      	b.n	8009b28 <rshift+0x68>

08009b64 <__hexdig_fun>:
 8009b64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b68:	2b09      	cmp	r3, #9
 8009b6a:	d802      	bhi.n	8009b72 <__hexdig_fun+0xe>
 8009b6c:	3820      	subs	r0, #32
 8009b6e:	b2c0      	uxtb	r0, r0
 8009b70:	4770      	bx	lr
 8009b72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b76:	2b05      	cmp	r3, #5
 8009b78:	d801      	bhi.n	8009b7e <__hexdig_fun+0x1a>
 8009b7a:	3847      	subs	r0, #71	; 0x47
 8009b7c:	e7f7      	b.n	8009b6e <__hexdig_fun+0xa>
 8009b7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b82:	2b05      	cmp	r3, #5
 8009b84:	d801      	bhi.n	8009b8a <__hexdig_fun+0x26>
 8009b86:	3827      	subs	r0, #39	; 0x27
 8009b88:	e7f1      	b.n	8009b6e <__hexdig_fun+0xa>
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	4770      	bx	lr
	...

08009b90 <__gethex>:
 8009b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b94:	4617      	mov	r7, r2
 8009b96:	680a      	ldr	r2, [r1, #0]
 8009b98:	b085      	sub	sp, #20
 8009b9a:	f102 0b02 	add.w	fp, r2, #2
 8009b9e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009ba2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009ba6:	4681      	mov	r9, r0
 8009ba8:	468a      	mov	sl, r1
 8009baa:	9302      	str	r3, [sp, #8]
 8009bac:	32fe      	adds	r2, #254	; 0xfe
 8009bae:	eb02 030b 	add.w	r3, r2, fp
 8009bb2:	46d8      	mov	r8, fp
 8009bb4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009bb8:	9301      	str	r3, [sp, #4]
 8009bba:	2830      	cmp	r0, #48	; 0x30
 8009bbc:	d0f7      	beq.n	8009bae <__gethex+0x1e>
 8009bbe:	f7ff ffd1 	bl	8009b64 <__hexdig_fun>
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d138      	bne.n	8009c3a <__gethex+0xaa>
 8009bc8:	49a7      	ldr	r1, [pc, #668]	; (8009e68 <__gethex+0x2d8>)
 8009bca:	2201      	movs	r2, #1
 8009bcc:	4640      	mov	r0, r8
 8009bce:	f7ff ff09 	bl	80099e4 <strncmp>
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	d169      	bne.n	8009cac <__gethex+0x11c>
 8009bd8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009bdc:	465d      	mov	r5, fp
 8009bde:	f7ff ffc1 	bl	8009b64 <__hexdig_fun>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	d064      	beq.n	8009cb0 <__gethex+0x120>
 8009be6:	465a      	mov	r2, fp
 8009be8:	7810      	ldrb	r0, [r2, #0]
 8009bea:	2830      	cmp	r0, #48	; 0x30
 8009bec:	4690      	mov	r8, r2
 8009bee:	f102 0201 	add.w	r2, r2, #1
 8009bf2:	d0f9      	beq.n	8009be8 <__gethex+0x58>
 8009bf4:	f7ff ffb6 	bl	8009b64 <__hexdig_fun>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	fab0 f480 	clz	r4, r0
 8009bfe:	0964      	lsrs	r4, r4, #5
 8009c00:	465e      	mov	r6, fp
 8009c02:	9301      	str	r3, [sp, #4]
 8009c04:	4642      	mov	r2, r8
 8009c06:	4615      	mov	r5, r2
 8009c08:	3201      	adds	r2, #1
 8009c0a:	7828      	ldrb	r0, [r5, #0]
 8009c0c:	f7ff ffaa 	bl	8009b64 <__hexdig_fun>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d1f8      	bne.n	8009c06 <__gethex+0x76>
 8009c14:	4994      	ldr	r1, [pc, #592]	; (8009e68 <__gethex+0x2d8>)
 8009c16:	2201      	movs	r2, #1
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f7ff fee3 	bl	80099e4 <strncmp>
 8009c1e:	b978      	cbnz	r0, 8009c40 <__gethex+0xb0>
 8009c20:	b946      	cbnz	r6, 8009c34 <__gethex+0xa4>
 8009c22:	1c6e      	adds	r6, r5, #1
 8009c24:	4632      	mov	r2, r6
 8009c26:	4615      	mov	r5, r2
 8009c28:	3201      	adds	r2, #1
 8009c2a:	7828      	ldrb	r0, [r5, #0]
 8009c2c:	f7ff ff9a 	bl	8009b64 <__hexdig_fun>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d1f8      	bne.n	8009c26 <__gethex+0x96>
 8009c34:	1b73      	subs	r3, r6, r5
 8009c36:	009e      	lsls	r6, r3, #2
 8009c38:	e004      	b.n	8009c44 <__gethex+0xb4>
 8009c3a:	2400      	movs	r4, #0
 8009c3c:	4626      	mov	r6, r4
 8009c3e:	e7e1      	b.n	8009c04 <__gethex+0x74>
 8009c40:	2e00      	cmp	r6, #0
 8009c42:	d1f7      	bne.n	8009c34 <__gethex+0xa4>
 8009c44:	782b      	ldrb	r3, [r5, #0]
 8009c46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c4a:	2b50      	cmp	r3, #80	; 0x50
 8009c4c:	d13d      	bne.n	8009cca <__gethex+0x13a>
 8009c4e:	786b      	ldrb	r3, [r5, #1]
 8009c50:	2b2b      	cmp	r3, #43	; 0x2b
 8009c52:	d02f      	beq.n	8009cb4 <__gethex+0x124>
 8009c54:	2b2d      	cmp	r3, #45	; 0x2d
 8009c56:	d031      	beq.n	8009cbc <__gethex+0x12c>
 8009c58:	1c69      	adds	r1, r5, #1
 8009c5a:	f04f 0b00 	mov.w	fp, #0
 8009c5e:	7808      	ldrb	r0, [r1, #0]
 8009c60:	f7ff ff80 	bl	8009b64 <__hexdig_fun>
 8009c64:	1e42      	subs	r2, r0, #1
 8009c66:	b2d2      	uxtb	r2, r2
 8009c68:	2a18      	cmp	r2, #24
 8009c6a:	d82e      	bhi.n	8009cca <__gethex+0x13a>
 8009c6c:	f1a0 0210 	sub.w	r2, r0, #16
 8009c70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c74:	f7ff ff76 	bl	8009b64 <__hexdig_fun>
 8009c78:	f100 3cff 	add.w	ip, r0, #4294967295
 8009c7c:	fa5f fc8c 	uxtb.w	ip, ip
 8009c80:	f1bc 0f18 	cmp.w	ip, #24
 8009c84:	d91d      	bls.n	8009cc2 <__gethex+0x132>
 8009c86:	f1bb 0f00 	cmp.w	fp, #0
 8009c8a:	d000      	beq.n	8009c8e <__gethex+0xfe>
 8009c8c:	4252      	negs	r2, r2
 8009c8e:	4416      	add	r6, r2
 8009c90:	f8ca 1000 	str.w	r1, [sl]
 8009c94:	b1dc      	cbz	r4, 8009cce <__gethex+0x13e>
 8009c96:	9b01      	ldr	r3, [sp, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	bf14      	ite	ne
 8009c9c:	f04f 0800 	movne.w	r8, #0
 8009ca0:	f04f 0806 	moveq.w	r8, #6
 8009ca4:	4640      	mov	r0, r8
 8009ca6:	b005      	add	sp, #20
 8009ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cac:	4645      	mov	r5, r8
 8009cae:	4626      	mov	r6, r4
 8009cb0:	2401      	movs	r4, #1
 8009cb2:	e7c7      	b.n	8009c44 <__gethex+0xb4>
 8009cb4:	f04f 0b00 	mov.w	fp, #0
 8009cb8:	1ca9      	adds	r1, r5, #2
 8009cba:	e7d0      	b.n	8009c5e <__gethex+0xce>
 8009cbc:	f04f 0b01 	mov.w	fp, #1
 8009cc0:	e7fa      	b.n	8009cb8 <__gethex+0x128>
 8009cc2:	230a      	movs	r3, #10
 8009cc4:	fb03 0002 	mla	r0, r3, r2, r0
 8009cc8:	e7d0      	b.n	8009c6c <__gethex+0xdc>
 8009cca:	4629      	mov	r1, r5
 8009ccc:	e7e0      	b.n	8009c90 <__gethex+0x100>
 8009cce:	eba5 0308 	sub.w	r3, r5, r8
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	2b07      	cmp	r3, #7
 8009cd8:	dc0a      	bgt.n	8009cf0 <__gethex+0x160>
 8009cda:	4648      	mov	r0, r9
 8009cdc:	f7fe f91e 	bl	8007f1c <_Balloc>
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	b940      	cbnz	r0, 8009cf6 <__gethex+0x166>
 8009ce4:	4b61      	ldr	r3, [pc, #388]	; (8009e6c <__gethex+0x2dc>)
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	21e4      	movs	r1, #228	; 0xe4
 8009cea:	4861      	ldr	r0, [pc, #388]	; (8009e70 <__gethex+0x2e0>)
 8009cec:	f7ff feb4 	bl	8009a58 <__assert_func>
 8009cf0:	3101      	adds	r1, #1
 8009cf2:	105b      	asrs	r3, r3, #1
 8009cf4:	e7ef      	b.n	8009cd6 <__gethex+0x146>
 8009cf6:	f100 0a14 	add.w	sl, r0, #20
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	495a      	ldr	r1, [pc, #360]	; (8009e68 <__gethex+0x2d8>)
 8009cfe:	f8cd a004 	str.w	sl, [sp, #4]
 8009d02:	469b      	mov	fp, r3
 8009d04:	45a8      	cmp	r8, r5
 8009d06:	d342      	bcc.n	8009d8e <__gethex+0x1fe>
 8009d08:	9801      	ldr	r0, [sp, #4]
 8009d0a:	f840 bb04 	str.w	fp, [r0], #4
 8009d0e:	eba0 000a 	sub.w	r0, r0, sl
 8009d12:	1080      	asrs	r0, r0, #2
 8009d14:	6120      	str	r0, [r4, #16]
 8009d16:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009d1a:	4658      	mov	r0, fp
 8009d1c:	f7fe f9f0 	bl	8008100 <__hi0bits>
 8009d20:	683d      	ldr	r5, [r7, #0]
 8009d22:	eba8 0000 	sub.w	r0, r8, r0
 8009d26:	42a8      	cmp	r0, r5
 8009d28:	dd59      	ble.n	8009dde <__gethex+0x24e>
 8009d2a:	eba0 0805 	sub.w	r8, r0, r5
 8009d2e:	4641      	mov	r1, r8
 8009d30:	4620      	mov	r0, r4
 8009d32:	f7fe fd7f 	bl	8008834 <__any_on>
 8009d36:	4683      	mov	fp, r0
 8009d38:	b1b8      	cbz	r0, 8009d6a <__gethex+0x1da>
 8009d3a:	f108 33ff 	add.w	r3, r8, #4294967295
 8009d3e:	1159      	asrs	r1, r3, #5
 8009d40:	f003 021f 	and.w	r2, r3, #31
 8009d44:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009d48:	f04f 0b01 	mov.w	fp, #1
 8009d4c:	fa0b f202 	lsl.w	r2, fp, r2
 8009d50:	420a      	tst	r2, r1
 8009d52:	d00a      	beq.n	8009d6a <__gethex+0x1da>
 8009d54:	455b      	cmp	r3, fp
 8009d56:	dd06      	ble.n	8009d66 <__gethex+0x1d6>
 8009d58:	f1a8 0102 	sub.w	r1, r8, #2
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f7fe fd69 	bl	8008834 <__any_on>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d138      	bne.n	8009dd8 <__gethex+0x248>
 8009d66:	f04f 0b02 	mov.w	fp, #2
 8009d6a:	4641      	mov	r1, r8
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f7ff fea7 	bl	8009ac0 <rshift>
 8009d72:	4446      	add	r6, r8
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	42b3      	cmp	r3, r6
 8009d78:	da41      	bge.n	8009dfe <__gethex+0x26e>
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	4648      	mov	r0, r9
 8009d7e:	f7fe f90d 	bl	8007f9c <_Bfree>
 8009d82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d84:	2300      	movs	r3, #0
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009d8c:	e78a      	b.n	8009ca4 <__gethex+0x114>
 8009d8e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009d92:	2a2e      	cmp	r2, #46	; 0x2e
 8009d94:	d014      	beq.n	8009dc0 <__gethex+0x230>
 8009d96:	2b20      	cmp	r3, #32
 8009d98:	d106      	bne.n	8009da8 <__gethex+0x218>
 8009d9a:	9b01      	ldr	r3, [sp, #4]
 8009d9c:	f843 bb04 	str.w	fp, [r3], #4
 8009da0:	f04f 0b00 	mov.w	fp, #0
 8009da4:	9301      	str	r3, [sp, #4]
 8009da6:	465b      	mov	r3, fp
 8009da8:	7828      	ldrb	r0, [r5, #0]
 8009daa:	9303      	str	r3, [sp, #12]
 8009dac:	f7ff feda 	bl	8009b64 <__hexdig_fun>
 8009db0:	9b03      	ldr	r3, [sp, #12]
 8009db2:	f000 000f 	and.w	r0, r0, #15
 8009db6:	4098      	lsls	r0, r3
 8009db8:	ea4b 0b00 	orr.w	fp, fp, r0
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	e7a1      	b.n	8009d04 <__gethex+0x174>
 8009dc0:	45a8      	cmp	r8, r5
 8009dc2:	d8e8      	bhi.n	8009d96 <__gethex+0x206>
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	9303      	str	r3, [sp, #12]
 8009dca:	f7ff fe0b 	bl	80099e4 <strncmp>
 8009dce:	4926      	ldr	r1, [pc, #152]	; (8009e68 <__gethex+0x2d8>)
 8009dd0:	9b03      	ldr	r3, [sp, #12]
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d1df      	bne.n	8009d96 <__gethex+0x206>
 8009dd6:	e795      	b.n	8009d04 <__gethex+0x174>
 8009dd8:	f04f 0b03 	mov.w	fp, #3
 8009ddc:	e7c5      	b.n	8009d6a <__gethex+0x1da>
 8009dde:	da0b      	bge.n	8009df8 <__gethex+0x268>
 8009de0:	eba5 0800 	sub.w	r8, r5, r0
 8009de4:	4621      	mov	r1, r4
 8009de6:	4642      	mov	r2, r8
 8009de8:	4648      	mov	r0, r9
 8009dea:	f7fe faf1 	bl	80083d0 <__lshift>
 8009dee:	eba6 0608 	sub.w	r6, r6, r8
 8009df2:	4604      	mov	r4, r0
 8009df4:	f100 0a14 	add.w	sl, r0, #20
 8009df8:	f04f 0b00 	mov.w	fp, #0
 8009dfc:	e7ba      	b.n	8009d74 <__gethex+0x1e4>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	42b3      	cmp	r3, r6
 8009e02:	dd73      	ble.n	8009eec <__gethex+0x35c>
 8009e04:	1b9e      	subs	r6, r3, r6
 8009e06:	42b5      	cmp	r5, r6
 8009e08:	dc34      	bgt.n	8009e74 <__gethex+0x2e4>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d023      	beq.n	8009e58 <__gethex+0x2c8>
 8009e10:	2b03      	cmp	r3, #3
 8009e12:	d025      	beq.n	8009e60 <__gethex+0x2d0>
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d115      	bne.n	8009e44 <__gethex+0x2b4>
 8009e18:	42b5      	cmp	r5, r6
 8009e1a:	d113      	bne.n	8009e44 <__gethex+0x2b4>
 8009e1c:	2d01      	cmp	r5, #1
 8009e1e:	d10b      	bne.n	8009e38 <__gethex+0x2a8>
 8009e20:	9a02      	ldr	r2, [sp, #8]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6013      	str	r3, [r2, #0]
 8009e26:	2301      	movs	r3, #1
 8009e28:	6123      	str	r3, [r4, #16]
 8009e2a:	f8ca 3000 	str.w	r3, [sl]
 8009e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e30:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009e34:	601c      	str	r4, [r3, #0]
 8009e36:	e735      	b.n	8009ca4 <__gethex+0x114>
 8009e38:	1e69      	subs	r1, r5, #1
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f7fe fcfa 	bl	8008834 <__any_on>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d1ed      	bne.n	8009e20 <__gethex+0x290>
 8009e44:	4621      	mov	r1, r4
 8009e46:	4648      	mov	r0, r9
 8009e48:	f7fe f8a8 	bl	8007f9c <_Bfree>
 8009e4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e4e:	2300      	movs	r3, #0
 8009e50:	6013      	str	r3, [r2, #0]
 8009e52:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009e56:	e725      	b.n	8009ca4 <__gethex+0x114>
 8009e58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1f2      	bne.n	8009e44 <__gethex+0x2b4>
 8009e5e:	e7df      	b.n	8009e20 <__gethex+0x290>
 8009e60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1dc      	bne.n	8009e20 <__gethex+0x290>
 8009e66:	e7ed      	b.n	8009e44 <__gethex+0x2b4>
 8009e68:	0800ae24 	.word	0x0800ae24
 8009e6c:	0800acbd 	.word	0x0800acbd
 8009e70:	0800afce 	.word	0x0800afce
 8009e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8009e78:	f1bb 0f00 	cmp.w	fp, #0
 8009e7c:	d133      	bne.n	8009ee6 <__gethex+0x356>
 8009e7e:	f1b8 0f00 	cmp.w	r8, #0
 8009e82:	d004      	beq.n	8009e8e <__gethex+0x2fe>
 8009e84:	4641      	mov	r1, r8
 8009e86:	4620      	mov	r0, r4
 8009e88:	f7fe fcd4 	bl	8008834 <__any_on>
 8009e8c:	4683      	mov	fp, r0
 8009e8e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009e92:	2301      	movs	r3, #1
 8009e94:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009e98:	f008 081f 	and.w	r8, r8, #31
 8009e9c:	fa03 f308 	lsl.w	r3, r3, r8
 8009ea0:	4213      	tst	r3, r2
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	bf18      	it	ne
 8009ea8:	f04b 0b02 	orrne.w	fp, fp, #2
 8009eac:	1bad      	subs	r5, r5, r6
 8009eae:	f7ff fe07 	bl	8009ac0 <rshift>
 8009eb2:	687e      	ldr	r6, [r7, #4]
 8009eb4:	f04f 0802 	mov.w	r8, #2
 8009eb8:	f1bb 0f00 	cmp.w	fp, #0
 8009ebc:	d04a      	beq.n	8009f54 <__gethex+0x3c4>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d016      	beq.n	8009ef2 <__gethex+0x362>
 8009ec4:	2b03      	cmp	r3, #3
 8009ec6:	d018      	beq.n	8009efa <__gethex+0x36a>
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d109      	bne.n	8009ee0 <__gethex+0x350>
 8009ecc:	f01b 0f02 	tst.w	fp, #2
 8009ed0:	d006      	beq.n	8009ee0 <__gethex+0x350>
 8009ed2:	f8da 3000 	ldr.w	r3, [sl]
 8009ed6:	ea4b 0b03 	orr.w	fp, fp, r3
 8009eda:	f01b 0f01 	tst.w	fp, #1
 8009ede:	d10f      	bne.n	8009f00 <__gethex+0x370>
 8009ee0:	f048 0810 	orr.w	r8, r8, #16
 8009ee4:	e036      	b.n	8009f54 <__gethex+0x3c4>
 8009ee6:	f04f 0b01 	mov.w	fp, #1
 8009eea:	e7d0      	b.n	8009e8e <__gethex+0x2fe>
 8009eec:	f04f 0801 	mov.w	r8, #1
 8009ef0:	e7e2      	b.n	8009eb8 <__gethex+0x328>
 8009ef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ef4:	f1c3 0301 	rsb	r3, r3, #1
 8009ef8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d0ef      	beq.n	8009ee0 <__gethex+0x350>
 8009f00:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f04:	f104 0214 	add.w	r2, r4, #20
 8009f08:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009f0c:	9301      	str	r3, [sp, #4]
 8009f0e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009f12:	2300      	movs	r3, #0
 8009f14:	4694      	mov	ip, r2
 8009f16:	f852 1b04 	ldr.w	r1, [r2], #4
 8009f1a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009f1e:	d01e      	beq.n	8009f5e <__gethex+0x3ce>
 8009f20:	3101      	adds	r1, #1
 8009f22:	f8cc 1000 	str.w	r1, [ip]
 8009f26:	f1b8 0f02 	cmp.w	r8, #2
 8009f2a:	f104 0214 	add.w	r2, r4, #20
 8009f2e:	d13d      	bne.n	8009fac <__gethex+0x41c>
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	42ab      	cmp	r3, r5
 8009f36:	d10b      	bne.n	8009f50 <__gethex+0x3c0>
 8009f38:	1169      	asrs	r1, r5, #5
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	f005 051f 	and.w	r5, r5, #31
 8009f40:	fa03 f505 	lsl.w	r5, r3, r5
 8009f44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f48:	421d      	tst	r5, r3
 8009f4a:	bf18      	it	ne
 8009f4c:	f04f 0801 	movne.w	r8, #1
 8009f50:	f048 0820 	orr.w	r8, r8, #32
 8009f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f56:	601c      	str	r4, [r3, #0]
 8009f58:	9b02      	ldr	r3, [sp, #8]
 8009f5a:	601e      	str	r6, [r3, #0]
 8009f5c:	e6a2      	b.n	8009ca4 <__gethex+0x114>
 8009f5e:	4290      	cmp	r0, r2
 8009f60:	f842 3c04 	str.w	r3, [r2, #-4]
 8009f64:	d8d6      	bhi.n	8009f14 <__gethex+0x384>
 8009f66:	68a2      	ldr	r2, [r4, #8]
 8009f68:	4593      	cmp	fp, r2
 8009f6a:	db17      	blt.n	8009f9c <__gethex+0x40c>
 8009f6c:	6861      	ldr	r1, [r4, #4]
 8009f6e:	4648      	mov	r0, r9
 8009f70:	3101      	adds	r1, #1
 8009f72:	f7fd ffd3 	bl	8007f1c <_Balloc>
 8009f76:	4682      	mov	sl, r0
 8009f78:	b918      	cbnz	r0, 8009f82 <__gethex+0x3f2>
 8009f7a:	4b1b      	ldr	r3, [pc, #108]	; (8009fe8 <__gethex+0x458>)
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	2184      	movs	r1, #132	; 0x84
 8009f80:	e6b3      	b.n	8009cea <__gethex+0x15a>
 8009f82:	6922      	ldr	r2, [r4, #16]
 8009f84:	3202      	adds	r2, #2
 8009f86:	f104 010c 	add.w	r1, r4, #12
 8009f8a:	0092      	lsls	r2, r2, #2
 8009f8c:	300c      	adds	r0, #12
 8009f8e:	f7ff fd4b 	bl	8009a28 <memcpy>
 8009f92:	4621      	mov	r1, r4
 8009f94:	4648      	mov	r0, r9
 8009f96:	f7fe f801 	bl	8007f9c <_Bfree>
 8009f9a:	4654      	mov	r4, sl
 8009f9c:	6922      	ldr	r2, [r4, #16]
 8009f9e:	1c51      	adds	r1, r2, #1
 8009fa0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009fa4:	6121      	str	r1, [r4, #16]
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	6151      	str	r1, [r2, #20]
 8009faa:	e7bc      	b.n	8009f26 <__gethex+0x396>
 8009fac:	6921      	ldr	r1, [r4, #16]
 8009fae:	4559      	cmp	r1, fp
 8009fb0:	dd0b      	ble.n	8009fca <__gethex+0x43a>
 8009fb2:	2101      	movs	r1, #1
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	f7ff fd83 	bl	8009ac0 <rshift>
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	3601      	adds	r6, #1
 8009fbe:	42b3      	cmp	r3, r6
 8009fc0:	f6ff aedb 	blt.w	8009d7a <__gethex+0x1ea>
 8009fc4:	f04f 0801 	mov.w	r8, #1
 8009fc8:	e7c2      	b.n	8009f50 <__gethex+0x3c0>
 8009fca:	f015 051f 	ands.w	r5, r5, #31
 8009fce:	d0f9      	beq.n	8009fc4 <__gethex+0x434>
 8009fd0:	9b01      	ldr	r3, [sp, #4]
 8009fd2:	441a      	add	r2, r3
 8009fd4:	f1c5 0520 	rsb	r5, r5, #32
 8009fd8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009fdc:	f7fe f890 	bl	8008100 <__hi0bits>
 8009fe0:	42a8      	cmp	r0, r5
 8009fe2:	dbe6      	blt.n	8009fb2 <__gethex+0x422>
 8009fe4:	e7ee      	b.n	8009fc4 <__gethex+0x434>
 8009fe6:	bf00      	nop
 8009fe8:	0800acbd 	.word	0x0800acbd

08009fec <L_shift>:
 8009fec:	f1c2 0208 	rsb	r2, r2, #8
 8009ff0:	0092      	lsls	r2, r2, #2
 8009ff2:	b570      	push	{r4, r5, r6, lr}
 8009ff4:	f1c2 0620 	rsb	r6, r2, #32
 8009ff8:	6843      	ldr	r3, [r0, #4]
 8009ffa:	6804      	ldr	r4, [r0, #0]
 8009ffc:	fa03 f506 	lsl.w	r5, r3, r6
 800a000:	432c      	orrs	r4, r5
 800a002:	40d3      	lsrs	r3, r2
 800a004:	6004      	str	r4, [r0, #0]
 800a006:	f840 3f04 	str.w	r3, [r0, #4]!
 800a00a:	4288      	cmp	r0, r1
 800a00c:	d3f4      	bcc.n	8009ff8 <L_shift+0xc>
 800a00e:	bd70      	pop	{r4, r5, r6, pc}

0800a010 <__match>:
 800a010:	b530      	push	{r4, r5, lr}
 800a012:	6803      	ldr	r3, [r0, #0]
 800a014:	3301      	adds	r3, #1
 800a016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a01a:	b914      	cbnz	r4, 800a022 <__match+0x12>
 800a01c:	6003      	str	r3, [r0, #0]
 800a01e:	2001      	movs	r0, #1
 800a020:	bd30      	pop	{r4, r5, pc}
 800a022:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a026:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a02a:	2d19      	cmp	r5, #25
 800a02c:	bf98      	it	ls
 800a02e:	3220      	addls	r2, #32
 800a030:	42a2      	cmp	r2, r4
 800a032:	d0f0      	beq.n	800a016 <__match+0x6>
 800a034:	2000      	movs	r0, #0
 800a036:	e7f3      	b.n	800a020 <__match+0x10>

0800a038 <__hexnan>:
 800a038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	680b      	ldr	r3, [r1, #0]
 800a03e:	6801      	ldr	r1, [r0, #0]
 800a040:	115e      	asrs	r6, r3, #5
 800a042:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a046:	f013 031f 	ands.w	r3, r3, #31
 800a04a:	b087      	sub	sp, #28
 800a04c:	bf18      	it	ne
 800a04e:	3604      	addne	r6, #4
 800a050:	2500      	movs	r5, #0
 800a052:	1f37      	subs	r7, r6, #4
 800a054:	4682      	mov	sl, r0
 800a056:	4690      	mov	r8, r2
 800a058:	9301      	str	r3, [sp, #4]
 800a05a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a05e:	46b9      	mov	r9, r7
 800a060:	463c      	mov	r4, r7
 800a062:	9502      	str	r5, [sp, #8]
 800a064:	46ab      	mov	fp, r5
 800a066:	784a      	ldrb	r2, [r1, #1]
 800a068:	1c4b      	adds	r3, r1, #1
 800a06a:	9303      	str	r3, [sp, #12]
 800a06c:	b342      	cbz	r2, 800a0c0 <__hexnan+0x88>
 800a06e:	4610      	mov	r0, r2
 800a070:	9105      	str	r1, [sp, #20]
 800a072:	9204      	str	r2, [sp, #16]
 800a074:	f7ff fd76 	bl	8009b64 <__hexdig_fun>
 800a078:	2800      	cmp	r0, #0
 800a07a:	d14f      	bne.n	800a11c <__hexnan+0xe4>
 800a07c:	9a04      	ldr	r2, [sp, #16]
 800a07e:	9905      	ldr	r1, [sp, #20]
 800a080:	2a20      	cmp	r2, #32
 800a082:	d818      	bhi.n	800a0b6 <__hexnan+0x7e>
 800a084:	9b02      	ldr	r3, [sp, #8]
 800a086:	459b      	cmp	fp, r3
 800a088:	dd13      	ble.n	800a0b2 <__hexnan+0x7a>
 800a08a:	454c      	cmp	r4, r9
 800a08c:	d206      	bcs.n	800a09c <__hexnan+0x64>
 800a08e:	2d07      	cmp	r5, #7
 800a090:	dc04      	bgt.n	800a09c <__hexnan+0x64>
 800a092:	462a      	mov	r2, r5
 800a094:	4649      	mov	r1, r9
 800a096:	4620      	mov	r0, r4
 800a098:	f7ff ffa8 	bl	8009fec <L_shift>
 800a09c:	4544      	cmp	r4, r8
 800a09e:	d950      	bls.n	800a142 <__hexnan+0x10a>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f1a4 0904 	sub.w	r9, r4, #4
 800a0a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0aa:	f8cd b008 	str.w	fp, [sp, #8]
 800a0ae:	464c      	mov	r4, r9
 800a0b0:	461d      	mov	r5, r3
 800a0b2:	9903      	ldr	r1, [sp, #12]
 800a0b4:	e7d7      	b.n	800a066 <__hexnan+0x2e>
 800a0b6:	2a29      	cmp	r2, #41	; 0x29
 800a0b8:	d155      	bne.n	800a166 <__hexnan+0x12e>
 800a0ba:	3102      	adds	r1, #2
 800a0bc:	f8ca 1000 	str.w	r1, [sl]
 800a0c0:	f1bb 0f00 	cmp.w	fp, #0
 800a0c4:	d04f      	beq.n	800a166 <__hexnan+0x12e>
 800a0c6:	454c      	cmp	r4, r9
 800a0c8:	d206      	bcs.n	800a0d8 <__hexnan+0xa0>
 800a0ca:	2d07      	cmp	r5, #7
 800a0cc:	dc04      	bgt.n	800a0d8 <__hexnan+0xa0>
 800a0ce:	462a      	mov	r2, r5
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f7ff ff8a 	bl	8009fec <L_shift>
 800a0d8:	4544      	cmp	r4, r8
 800a0da:	d934      	bls.n	800a146 <__hexnan+0x10e>
 800a0dc:	f1a8 0204 	sub.w	r2, r8, #4
 800a0e0:	4623      	mov	r3, r4
 800a0e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a0e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a0ea:	429f      	cmp	r7, r3
 800a0ec:	d2f9      	bcs.n	800a0e2 <__hexnan+0xaa>
 800a0ee:	1b3b      	subs	r3, r7, r4
 800a0f0:	f023 0303 	bic.w	r3, r3, #3
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	3e03      	subs	r6, #3
 800a0f8:	3401      	adds	r4, #1
 800a0fa:	42a6      	cmp	r6, r4
 800a0fc:	bf38      	it	cc
 800a0fe:	2304      	movcc	r3, #4
 800a100:	4443      	add	r3, r8
 800a102:	2200      	movs	r2, #0
 800a104:	f843 2b04 	str.w	r2, [r3], #4
 800a108:	429f      	cmp	r7, r3
 800a10a:	d2fb      	bcs.n	800a104 <__hexnan+0xcc>
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	b91b      	cbnz	r3, 800a118 <__hexnan+0xe0>
 800a110:	4547      	cmp	r7, r8
 800a112:	d126      	bne.n	800a162 <__hexnan+0x12a>
 800a114:	2301      	movs	r3, #1
 800a116:	603b      	str	r3, [r7, #0]
 800a118:	2005      	movs	r0, #5
 800a11a:	e025      	b.n	800a168 <__hexnan+0x130>
 800a11c:	3501      	adds	r5, #1
 800a11e:	2d08      	cmp	r5, #8
 800a120:	f10b 0b01 	add.w	fp, fp, #1
 800a124:	dd06      	ble.n	800a134 <__hexnan+0xfc>
 800a126:	4544      	cmp	r4, r8
 800a128:	d9c3      	bls.n	800a0b2 <__hexnan+0x7a>
 800a12a:	2300      	movs	r3, #0
 800a12c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a130:	2501      	movs	r5, #1
 800a132:	3c04      	subs	r4, #4
 800a134:	6822      	ldr	r2, [r4, #0]
 800a136:	f000 000f 	and.w	r0, r0, #15
 800a13a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a13e:	6020      	str	r0, [r4, #0]
 800a140:	e7b7      	b.n	800a0b2 <__hexnan+0x7a>
 800a142:	2508      	movs	r5, #8
 800a144:	e7b5      	b.n	800a0b2 <__hexnan+0x7a>
 800a146:	9b01      	ldr	r3, [sp, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d0df      	beq.n	800a10c <__hexnan+0xd4>
 800a14c:	f1c3 0320 	rsb	r3, r3, #32
 800a150:	f04f 32ff 	mov.w	r2, #4294967295
 800a154:	40da      	lsrs	r2, r3
 800a156:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a15a:	4013      	ands	r3, r2
 800a15c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a160:	e7d4      	b.n	800a10c <__hexnan+0xd4>
 800a162:	3f04      	subs	r7, #4
 800a164:	e7d2      	b.n	800a10c <__hexnan+0xd4>
 800a166:	2004      	movs	r0, #4
 800a168:	b007      	add	sp, #28
 800a16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a16e <__ascii_mbtowc>:
 800a16e:	b082      	sub	sp, #8
 800a170:	b901      	cbnz	r1, 800a174 <__ascii_mbtowc+0x6>
 800a172:	a901      	add	r1, sp, #4
 800a174:	b142      	cbz	r2, 800a188 <__ascii_mbtowc+0x1a>
 800a176:	b14b      	cbz	r3, 800a18c <__ascii_mbtowc+0x1e>
 800a178:	7813      	ldrb	r3, [r2, #0]
 800a17a:	600b      	str	r3, [r1, #0]
 800a17c:	7812      	ldrb	r2, [r2, #0]
 800a17e:	1e10      	subs	r0, r2, #0
 800a180:	bf18      	it	ne
 800a182:	2001      	movne	r0, #1
 800a184:	b002      	add	sp, #8
 800a186:	4770      	bx	lr
 800a188:	4610      	mov	r0, r2
 800a18a:	e7fb      	b.n	800a184 <__ascii_mbtowc+0x16>
 800a18c:	f06f 0001 	mvn.w	r0, #1
 800a190:	e7f8      	b.n	800a184 <__ascii_mbtowc+0x16>

0800a192 <_realloc_r>:
 800a192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a196:	4680      	mov	r8, r0
 800a198:	4614      	mov	r4, r2
 800a19a:	460e      	mov	r6, r1
 800a19c:	b921      	cbnz	r1, 800a1a8 <_realloc_r+0x16>
 800a19e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	f7fd be2e 	b.w	8007e04 <_malloc_r>
 800a1a8:	b92a      	cbnz	r2, 800a1b6 <_realloc_r+0x24>
 800a1aa:	f7fd fdb7 	bl	8007d1c <_free_r>
 800a1ae:	4625      	mov	r5, r4
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1b6:	f000 f842 	bl	800a23e <_malloc_usable_size_r>
 800a1ba:	4284      	cmp	r4, r0
 800a1bc:	4607      	mov	r7, r0
 800a1be:	d802      	bhi.n	800a1c6 <_realloc_r+0x34>
 800a1c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1c4:	d812      	bhi.n	800a1ec <_realloc_r+0x5a>
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	4640      	mov	r0, r8
 800a1ca:	f7fd fe1b 	bl	8007e04 <_malloc_r>
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d0ed      	beq.n	800a1b0 <_realloc_r+0x1e>
 800a1d4:	42bc      	cmp	r4, r7
 800a1d6:	4622      	mov	r2, r4
 800a1d8:	4631      	mov	r1, r6
 800a1da:	bf28      	it	cs
 800a1dc:	463a      	movcs	r2, r7
 800a1de:	f7ff fc23 	bl	8009a28 <memcpy>
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	4640      	mov	r0, r8
 800a1e6:	f7fd fd99 	bl	8007d1c <_free_r>
 800a1ea:	e7e1      	b.n	800a1b0 <_realloc_r+0x1e>
 800a1ec:	4635      	mov	r5, r6
 800a1ee:	e7df      	b.n	800a1b0 <_realloc_r+0x1e>

0800a1f0 <__ascii_wctomb>:
 800a1f0:	b149      	cbz	r1, 800a206 <__ascii_wctomb+0x16>
 800a1f2:	2aff      	cmp	r2, #255	; 0xff
 800a1f4:	bf85      	ittet	hi
 800a1f6:	238a      	movhi	r3, #138	; 0x8a
 800a1f8:	6003      	strhi	r3, [r0, #0]
 800a1fa:	700a      	strbls	r2, [r1, #0]
 800a1fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a200:	bf98      	it	ls
 800a202:	2001      	movls	r0, #1
 800a204:	4770      	bx	lr
 800a206:	4608      	mov	r0, r1
 800a208:	4770      	bx	lr
	...

0800a20c <fiprintf>:
 800a20c:	b40e      	push	{r1, r2, r3}
 800a20e:	b503      	push	{r0, r1, lr}
 800a210:	4601      	mov	r1, r0
 800a212:	ab03      	add	r3, sp, #12
 800a214:	4805      	ldr	r0, [pc, #20]	; (800a22c <fiprintf+0x20>)
 800a216:	f853 2b04 	ldr.w	r2, [r3], #4
 800a21a:	6800      	ldr	r0, [r0, #0]
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	f000 f83f 	bl	800a2a0 <_vfiprintf_r>
 800a222:	b002      	add	sp, #8
 800a224:	f85d eb04 	ldr.w	lr, [sp], #4
 800a228:	b003      	add	sp, #12
 800a22a:	4770      	bx	lr
 800a22c:	20000074 	.word	0x20000074

0800a230 <abort>:
 800a230:	b508      	push	{r3, lr}
 800a232:	2006      	movs	r0, #6
 800a234:	f000 fa0c 	bl	800a650 <raise>
 800a238:	2001      	movs	r0, #1
 800a23a:	f7f8 f80d 	bl	8002258 <_exit>

0800a23e <_malloc_usable_size_r>:
 800a23e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a242:	1f18      	subs	r0, r3, #4
 800a244:	2b00      	cmp	r3, #0
 800a246:	bfbc      	itt	lt
 800a248:	580b      	ldrlt	r3, [r1, r0]
 800a24a:	18c0      	addlt	r0, r0, r3
 800a24c:	4770      	bx	lr

0800a24e <__sfputc_r>:
 800a24e:	6893      	ldr	r3, [r2, #8]
 800a250:	3b01      	subs	r3, #1
 800a252:	2b00      	cmp	r3, #0
 800a254:	b410      	push	{r4}
 800a256:	6093      	str	r3, [r2, #8]
 800a258:	da08      	bge.n	800a26c <__sfputc_r+0x1e>
 800a25a:	6994      	ldr	r4, [r2, #24]
 800a25c:	42a3      	cmp	r3, r4
 800a25e:	db01      	blt.n	800a264 <__sfputc_r+0x16>
 800a260:	290a      	cmp	r1, #10
 800a262:	d103      	bne.n	800a26c <__sfputc_r+0x1e>
 800a264:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a268:	f000 b934 	b.w	800a4d4 <__swbuf_r>
 800a26c:	6813      	ldr	r3, [r2, #0]
 800a26e:	1c58      	adds	r0, r3, #1
 800a270:	6010      	str	r0, [r2, #0]
 800a272:	7019      	strb	r1, [r3, #0]
 800a274:	4608      	mov	r0, r1
 800a276:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <__sfputs_r>:
 800a27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27e:	4606      	mov	r6, r0
 800a280:	460f      	mov	r7, r1
 800a282:	4614      	mov	r4, r2
 800a284:	18d5      	adds	r5, r2, r3
 800a286:	42ac      	cmp	r4, r5
 800a288:	d101      	bne.n	800a28e <__sfputs_r+0x12>
 800a28a:	2000      	movs	r0, #0
 800a28c:	e007      	b.n	800a29e <__sfputs_r+0x22>
 800a28e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a292:	463a      	mov	r2, r7
 800a294:	4630      	mov	r0, r6
 800a296:	f7ff ffda 	bl	800a24e <__sfputc_r>
 800a29a:	1c43      	adds	r3, r0, #1
 800a29c:	d1f3      	bne.n	800a286 <__sfputs_r+0xa>
 800a29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a2a0 <_vfiprintf_r>:
 800a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	460d      	mov	r5, r1
 800a2a6:	b09d      	sub	sp, #116	; 0x74
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	4698      	mov	r8, r3
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	b118      	cbz	r0, 800a2b8 <_vfiprintf_r+0x18>
 800a2b0:	6a03      	ldr	r3, [r0, #32]
 800a2b2:	b90b      	cbnz	r3, 800a2b8 <_vfiprintf_r+0x18>
 800a2b4:	f7fc fd96 	bl	8006de4 <__sinit>
 800a2b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2ba:	07d9      	lsls	r1, r3, #31
 800a2bc:	d405      	bmi.n	800a2ca <_vfiprintf_r+0x2a>
 800a2be:	89ab      	ldrh	r3, [r5, #12]
 800a2c0:	059a      	lsls	r2, r3, #22
 800a2c2:	d402      	bmi.n	800a2ca <_vfiprintf_r+0x2a>
 800a2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2c6:	f7fc fea4 	bl	8007012 <__retarget_lock_acquire_recursive>
 800a2ca:	89ab      	ldrh	r3, [r5, #12]
 800a2cc:	071b      	lsls	r3, r3, #28
 800a2ce:	d501      	bpl.n	800a2d4 <_vfiprintf_r+0x34>
 800a2d0:	692b      	ldr	r3, [r5, #16]
 800a2d2:	b99b      	cbnz	r3, 800a2fc <_vfiprintf_r+0x5c>
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f000 f93a 	bl	800a550 <__swsetup_r>
 800a2dc:	b170      	cbz	r0, 800a2fc <_vfiprintf_r+0x5c>
 800a2de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2e0:	07dc      	lsls	r4, r3, #31
 800a2e2:	d504      	bpl.n	800a2ee <_vfiprintf_r+0x4e>
 800a2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e8:	b01d      	add	sp, #116	; 0x74
 800a2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ee:	89ab      	ldrh	r3, [r5, #12]
 800a2f0:	0598      	lsls	r0, r3, #22
 800a2f2:	d4f7      	bmi.n	800a2e4 <_vfiprintf_r+0x44>
 800a2f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2f6:	f7fc fe8d 	bl	8007014 <__retarget_lock_release_recursive>
 800a2fa:	e7f3      	b.n	800a2e4 <_vfiprintf_r+0x44>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a300:	2320      	movs	r3, #32
 800a302:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a306:	f8cd 800c 	str.w	r8, [sp, #12]
 800a30a:	2330      	movs	r3, #48	; 0x30
 800a30c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a4c0 <_vfiprintf_r+0x220>
 800a310:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a314:	f04f 0901 	mov.w	r9, #1
 800a318:	4623      	mov	r3, r4
 800a31a:	469a      	mov	sl, r3
 800a31c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a320:	b10a      	cbz	r2, 800a326 <_vfiprintf_r+0x86>
 800a322:	2a25      	cmp	r2, #37	; 0x25
 800a324:	d1f9      	bne.n	800a31a <_vfiprintf_r+0x7a>
 800a326:	ebba 0b04 	subs.w	fp, sl, r4
 800a32a:	d00b      	beq.n	800a344 <_vfiprintf_r+0xa4>
 800a32c:	465b      	mov	r3, fp
 800a32e:	4622      	mov	r2, r4
 800a330:	4629      	mov	r1, r5
 800a332:	4630      	mov	r0, r6
 800a334:	f7ff ffa2 	bl	800a27c <__sfputs_r>
 800a338:	3001      	adds	r0, #1
 800a33a:	f000 80a9 	beq.w	800a490 <_vfiprintf_r+0x1f0>
 800a33e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a340:	445a      	add	r2, fp
 800a342:	9209      	str	r2, [sp, #36]	; 0x24
 800a344:	f89a 3000 	ldrb.w	r3, [sl]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 80a1 	beq.w	800a490 <_vfiprintf_r+0x1f0>
 800a34e:	2300      	movs	r3, #0
 800a350:	f04f 32ff 	mov.w	r2, #4294967295
 800a354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a358:	f10a 0a01 	add.w	sl, sl, #1
 800a35c:	9304      	str	r3, [sp, #16]
 800a35e:	9307      	str	r3, [sp, #28]
 800a360:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a364:	931a      	str	r3, [sp, #104]	; 0x68
 800a366:	4654      	mov	r4, sl
 800a368:	2205      	movs	r2, #5
 800a36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a36e:	4854      	ldr	r0, [pc, #336]	; (800a4c0 <_vfiprintf_r+0x220>)
 800a370:	f7f5 ff46 	bl	8000200 <memchr>
 800a374:	9a04      	ldr	r2, [sp, #16]
 800a376:	b9d8      	cbnz	r0, 800a3b0 <_vfiprintf_r+0x110>
 800a378:	06d1      	lsls	r1, r2, #27
 800a37a:	bf44      	itt	mi
 800a37c:	2320      	movmi	r3, #32
 800a37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a382:	0713      	lsls	r3, r2, #28
 800a384:	bf44      	itt	mi
 800a386:	232b      	movmi	r3, #43	; 0x2b
 800a388:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a38c:	f89a 3000 	ldrb.w	r3, [sl]
 800a390:	2b2a      	cmp	r3, #42	; 0x2a
 800a392:	d015      	beq.n	800a3c0 <_vfiprintf_r+0x120>
 800a394:	9a07      	ldr	r2, [sp, #28]
 800a396:	4654      	mov	r4, sl
 800a398:	2000      	movs	r0, #0
 800a39a:	f04f 0c0a 	mov.w	ip, #10
 800a39e:	4621      	mov	r1, r4
 800a3a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3a4:	3b30      	subs	r3, #48	; 0x30
 800a3a6:	2b09      	cmp	r3, #9
 800a3a8:	d94d      	bls.n	800a446 <_vfiprintf_r+0x1a6>
 800a3aa:	b1b0      	cbz	r0, 800a3da <_vfiprintf_r+0x13a>
 800a3ac:	9207      	str	r2, [sp, #28]
 800a3ae:	e014      	b.n	800a3da <_vfiprintf_r+0x13a>
 800a3b0:	eba0 0308 	sub.w	r3, r0, r8
 800a3b4:	fa09 f303 	lsl.w	r3, r9, r3
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	9304      	str	r3, [sp, #16]
 800a3bc:	46a2      	mov	sl, r4
 800a3be:	e7d2      	b.n	800a366 <_vfiprintf_r+0xc6>
 800a3c0:	9b03      	ldr	r3, [sp, #12]
 800a3c2:	1d19      	adds	r1, r3, #4
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	9103      	str	r1, [sp, #12]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	bfbb      	ittet	lt
 800a3cc:	425b      	neglt	r3, r3
 800a3ce:	f042 0202 	orrlt.w	r2, r2, #2
 800a3d2:	9307      	strge	r3, [sp, #28]
 800a3d4:	9307      	strlt	r3, [sp, #28]
 800a3d6:	bfb8      	it	lt
 800a3d8:	9204      	strlt	r2, [sp, #16]
 800a3da:	7823      	ldrb	r3, [r4, #0]
 800a3dc:	2b2e      	cmp	r3, #46	; 0x2e
 800a3de:	d10c      	bne.n	800a3fa <_vfiprintf_r+0x15a>
 800a3e0:	7863      	ldrb	r3, [r4, #1]
 800a3e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a3e4:	d134      	bne.n	800a450 <_vfiprintf_r+0x1b0>
 800a3e6:	9b03      	ldr	r3, [sp, #12]
 800a3e8:	1d1a      	adds	r2, r3, #4
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	9203      	str	r2, [sp, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	bfb8      	it	lt
 800a3f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3f6:	3402      	adds	r4, #2
 800a3f8:	9305      	str	r3, [sp, #20]
 800a3fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a4d0 <_vfiprintf_r+0x230>
 800a3fe:	7821      	ldrb	r1, [r4, #0]
 800a400:	2203      	movs	r2, #3
 800a402:	4650      	mov	r0, sl
 800a404:	f7f5 fefc 	bl	8000200 <memchr>
 800a408:	b138      	cbz	r0, 800a41a <_vfiprintf_r+0x17a>
 800a40a:	9b04      	ldr	r3, [sp, #16]
 800a40c:	eba0 000a 	sub.w	r0, r0, sl
 800a410:	2240      	movs	r2, #64	; 0x40
 800a412:	4082      	lsls	r2, r0
 800a414:	4313      	orrs	r3, r2
 800a416:	3401      	adds	r4, #1
 800a418:	9304      	str	r3, [sp, #16]
 800a41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a41e:	4829      	ldr	r0, [pc, #164]	; (800a4c4 <_vfiprintf_r+0x224>)
 800a420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a424:	2206      	movs	r2, #6
 800a426:	f7f5 feeb 	bl	8000200 <memchr>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d03f      	beq.n	800a4ae <_vfiprintf_r+0x20e>
 800a42e:	4b26      	ldr	r3, [pc, #152]	; (800a4c8 <_vfiprintf_r+0x228>)
 800a430:	bb1b      	cbnz	r3, 800a47a <_vfiprintf_r+0x1da>
 800a432:	9b03      	ldr	r3, [sp, #12]
 800a434:	3307      	adds	r3, #7
 800a436:	f023 0307 	bic.w	r3, r3, #7
 800a43a:	3308      	adds	r3, #8
 800a43c:	9303      	str	r3, [sp, #12]
 800a43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a440:	443b      	add	r3, r7
 800a442:	9309      	str	r3, [sp, #36]	; 0x24
 800a444:	e768      	b.n	800a318 <_vfiprintf_r+0x78>
 800a446:	fb0c 3202 	mla	r2, ip, r2, r3
 800a44a:	460c      	mov	r4, r1
 800a44c:	2001      	movs	r0, #1
 800a44e:	e7a6      	b.n	800a39e <_vfiprintf_r+0xfe>
 800a450:	2300      	movs	r3, #0
 800a452:	3401      	adds	r4, #1
 800a454:	9305      	str	r3, [sp, #20]
 800a456:	4619      	mov	r1, r3
 800a458:	f04f 0c0a 	mov.w	ip, #10
 800a45c:	4620      	mov	r0, r4
 800a45e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a462:	3a30      	subs	r2, #48	; 0x30
 800a464:	2a09      	cmp	r2, #9
 800a466:	d903      	bls.n	800a470 <_vfiprintf_r+0x1d0>
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d0c6      	beq.n	800a3fa <_vfiprintf_r+0x15a>
 800a46c:	9105      	str	r1, [sp, #20]
 800a46e:	e7c4      	b.n	800a3fa <_vfiprintf_r+0x15a>
 800a470:	fb0c 2101 	mla	r1, ip, r1, r2
 800a474:	4604      	mov	r4, r0
 800a476:	2301      	movs	r3, #1
 800a478:	e7f0      	b.n	800a45c <_vfiprintf_r+0x1bc>
 800a47a:	ab03      	add	r3, sp, #12
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	462a      	mov	r2, r5
 800a480:	4b12      	ldr	r3, [pc, #72]	; (800a4cc <_vfiprintf_r+0x22c>)
 800a482:	a904      	add	r1, sp, #16
 800a484:	4630      	mov	r0, r6
 800a486:	f7fb fe4b 	bl	8006120 <_printf_float>
 800a48a:	4607      	mov	r7, r0
 800a48c:	1c78      	adds	r0, r7, #1
 800a48e:	d1d6      	bne.n	800a43e <_vfiprintf_r+0x19e>
 800a490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a492:	07d9      	lsls	r1, r3, #31
 800a494:	d405      	bmi.n	800a4a2 <_vfiprintf_r+0x202>
 800a496:	89ab      	ldrh	r3, [r5, #12]
 800a498:	059a      	lsls	r2, r3, #22
 800a49a:	d402      	bmi.n	800a4a2 <_vfiprintf_r+0x202>
 800a49c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a49e:	f7fc fdb9 	bl	8007014 <__retarget_lock_release_recursive>
 800a4a2:	89ab      	ldrh	r3, [r5, #12]
 800a4a4:	065b      	lsls	r3, r3, #25
 800a4a6:	f53f af1d 	bmi.w	800a2e4 <_vfiprintf_r+0x44>
 800a4aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4ac:	e71c      	b.n	800a2e8 <_vfiprintf_r+0x48>
 800a4ae:	ab03      	add	r3, sp, #12
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	462a      	mov	r2, r5
 800a4b4:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <_vfiprintf_r+0x22c>)
 800a4b6:	a904      	add	r1, sp, #16
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	f7fc f8d5 	bl	8006668 <_printf_i>
 800a4be:	e7e4      	b.n	800a48a <_vfiprintf_r+0x1ea>
 800a4c0:	0800af79 	.word	0x0800af79
 800a4c4:	0800af83 	.word	0x0800af83
 800a4c8:	08006121 	.word	0x08006121
 800a4cc:	0800a27d 	.word	0x0800a27d
 800a4d0:	0800af7f 	.word	0x0800af7f

0800a4d4 <__swbuf_r>:
 800a4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d6:	460e      	mov	r6, r1
 800a4d8:	4614      	mov	r4, r2
 800a4da:	4605      	mov	r5, r0
 800a4dc:	b118      	cbz	r0, 800a4e6 <__swbuf_r+0x12>
 800a4de:	6a03      	ldr	r3, [r0, #32]
 800a4e0:	b90b      	cbnz	r3, 800a4e6 <__swbuf_r+0x12>
 800a4e2:	f7fc fc7f 	bl	8006de4 <__sinit>
 800a4e6:	69a3      	ldr	r3, [r4, #24]
 800a4e8:	60a3      	str	r3, [r4, #8]
 800a4ea:	89a3      	ldrh	r3, [r4, #12]
 800a4ec:	071a      	lsls	r2, r3, #28
 800a4ee:	d525      	bpl.n	800a53c <__swbuf_r+0x68>
 800a4f0:	6923      	ldr	r3, [r4, #16]
 800a4f2:	b31b      	cbz	r3, 800a53c <__swbuf_r+0x68>
 800a4f4:	6823      	ldr	r3, [r4, #0]
 800a4f6:	6922      	ldr	r2, [r4, #16]
 800a4f8:	1a98      	subs	r0, r3, r2
 800a4fa:	6963      	ldr	r3, [r4, #20]
 800a4fc:	b2f6      	uxtb	r6, r6
 800a4fe:	4283      	cmp	r3, r0
 800a500:	4637      	mov	r7, r6
 800a502:	dc04      	bgt.n	800a50e <__swbuf_r+0x3a>
 800a504:	4621      	mov	r1, r4
 800a506:	4628      	mov	r0, r5
 800a508:	f7ff fa2a 	bl	8009960 <_fflush_r>
 800a50c:	b9e0      	cbnz	r0, 800a548 <__swbuf_r+0x74>
 800a50e:	68a3      	ldr	r3, [r4, #8]
 800a510:	3b01      	subs	r3, #1
 800a512:	60a3      	str	r3, [r4, #8]
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	1c5a      	adds	r2, r3, #1
 800a518:	6022      	str	r2, [r4, #0]
 800a51a:	701e      	strb	r6, [r3, #0]
 800a51c:	6962      	ldr	r2, [r4, #20]
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	429a      	cmp	r2, r3
 800a522:	d004      	beq.n	800a52e <__swbuf_r+0x5a>
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	07db      	lsls	r3, r3, #31
 800a528:	d506      	bpl.n	800a538 <__swbuf_r+0x64>
 800a52a:	2e0a      	cmp	r6, #10
 800a52c:	d104      	bne.n	800a538 <__swbuf_r+0x64>
 800a52e:	4621      	mov	r1, r4
 800a530:	4628      	mov	r0, r5
 800a532:	f7ff fa15 	bl	8009960 <_fflush_r>
 800a536:	b938      	cbnz	r0, 800a548 <__swbuf_r+0x74>
 800a538:	4638      	mov	r0, r7
 800a53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a53c:	4621      	mov	r1, r4
 800a53e:	4628      	mov	r0, r5
 800a540:	f000 f806 	bl	800a550 <__swsetup_r>
 800a544:	2800      	cmp	r0, #0
 800a546:	d0d5      	beq.n	800a4f4 <__swbuf_r+0x20>
 800a548:	f04f 37ff 	mov.w	r7, #4294967295
 800a54c:	e7f4      	b.n	800a538 <__swbuf_r+0x64>
	...

0800a550 <__swsetup_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4b2a      	ldr	r3, [pc, #168]	; (800a5fc <__swsetup_r+0xac>)
 800a554:	4605      	mov	r5, r0
 800a556:	6818      	ldr	r0, [r3, #0]
 800a558:	460c      	mov	r4, r1
 800a55a:	b118      	cbz	r0, 800a564 <__swsetup_r+0x14>
 800a55c:	6a03      	ldr	r3, [r0, #32]
 800a55e:	b90b      	cbnz	r3, 800a564 <__swsetup_r+0x14>
 800a560:	f7fc fc40 	bl	8006de4 <__sinit>
 800a564:	89a3      	ldrh	r3, [r4, #12]
 800a566:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a56a:	0718      	lsls	r0, r3, #28
 800a56c:	d422      	bmi.n	800a5b4 <__swsetup_r+0x64>
 800a56e:	06d9      	lsls	r1, r3, #27
 800a570:	d407      	bmi.n	800a582 <__swsetup_r+0x32>
 800a572:	2309      	movs	r3, #9
 800a574:	602b      	str	r3, [r5, #0]
 800a576:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a57a:	81a3      	strh	r3, [r4, #12]
 800a57c:	f04f 30ff 	mov.w	r0, #4294967295
 800a580:	e034      	b.n	800a5ec <__swsetup_r+0x9c>
 800a582:	0758      	lsls	r0, r3, #29
 800a584:	d512      	bpl.n	800a5ac <__swsetup_r+0x5c>
 800a586:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a588:	b141      	cbz	r1, 800a59c <__swsetup_r+0x4c>
 800a58a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a58e:	4299      	cmp	r1, r3
 800a590:	d002      	beq.n	800a598 <__swsetup_r+0x48>
 800a592:	4628      	mov	r0, r5
 800a594:	f7fd fbc2 	bl	8007d1c <_free_r>
 800a598:	2300      	movs	r3, #0
 800a59a:	6363      	str	r3, [r4, #52]	; 0x34
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5a2:	81a3      	strh	r3, [r4, #12]
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	6063      	str	r3, [r4, #4]
 800a5a8:	6923      	ldr	r3, [r4, #16]
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	89a3      	ldrh	r3, [r4, #12]
 800a5ae:	f043 0308 	orr.w	r3, r3, #8
 800a5b2:	81a3      	strh	r3, [r4, #12]
 800a5b4:	6923      	ldr	r3, [r4, #16]
 800a5b6:	b94b      	cbnz	r3, 800a5cc <__swsetup_r+0x7c>
 800a5b8:	89a3      	ldrh	r3, [r4, #12]
 800a5ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5c2:	d003      	beq.n	800a5cc <__swsetup_r+0x7c>
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f000 f884 	bl	800a6d4 <__smakebuf_r>
 800a5cc:	89a0      	ldrh	r0, [r4, #12]
 800a5ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5d2:	f010 0301 	ands.w	r3, r0, #1
 800a5d6:	d00a      	beq.n	800a5ee <__swsetup_r+0x9e>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	60a3      	str	r3, [r4, #8]
 800a5dc:	6963      	ldr	r3, [r4, #20]
 800a5de:	425b      	negs	r3, r3
 800a5e0:	61a3      	str	r3, [r4, #24]
 800a5e2:	6923      	ldr	r3, [r4, #16]
 800a5e4:	b943      	cbnz	r3, 800a5f8 <__swsetup_r+0xa8>
 800a5e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5ea:	d1c4      	bne.n	800a576 <__swsetup_r+0x26>
 800a5ec:	bd38      	pop	{r3, r4, r5, pc}
 800a5ee:	0781      	lsls	r1, r0, #30
 800a5f0:	bf58      	it	pl
 800a5f2:	6963      	ldrpl	r3, [r4, #20]
 800a5f4:	60a3      	str	r3, [r4, #8]
 800a5f6:	e7f4      	b.n	800a5e2 <__swsetup_r+0x92>
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	e7f7      	b.n	800a5ec <__swsetup_r+0x9c>
 800a5fc:	20000074 	.word	0x20000074

0800a600 <_raise_r>:
 800a600:	291f      	cmp	r1, #31
 800a602:	b538      	push	{r3, r4, r5, lr}
 800a604:	4604      	mov	r4, r0
 800a606:	460d      	mov	r5, r1
 800a608:	d904      	bls.n	800a614 <_raise_r+0x14>
 800a60a:	2316      	movs	r3, #22
 800a60c:	6003      	str	r3, [r0, #0]
 800a60e:	f04f 30ff 	mov.w	r0, #4294967295
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a616:	b112      	cbz	r2, 800a61e <_raise_r+0x1e>
 800a618:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a61c:	b94b      	cbnz	r3, 800a632 <_raise_r+0x32>
 800a61e:	4620      	mov	r0, r4
 800a620:	f000 f830 	bl	800a684 <_getpid_r>
 800a624:	462a      	mov	r2, r5
 800a626:	4601      	mov	r1, r0
 800a628:	4620      	mov	r0, r4
 800a62a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a62e:	f000 b817 	b.w	800a660 <_kill_r>
 800a632:	2b01      	cmp	r3, #1
 800a634:	d00a      	beq.n	800a64c <_raise_r+0x4c>
 800a636:	1c59      	adds	r1, r3, #1
 800a638:	d103      	bne.n	800a642 <_raise_r+0x42>
 800a63a:	2316      	movs	r3, #22
 800a63c:	6003      	str	r3, [r0, #0]
 800a63e:	2001      	movs	r0, #1
 800a640:	e7e7      	b.n	800a612 <_raise_r+0x12>
 800a642:	2400      	movs	r4, #0
 800a644:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a648:	4628      	mov	r0, r5
 800a64a:	4798      	blx	r3
 800a64c:	2000      	movs	r0, #0
 800a64e:	e7e0      	b.n	800a612 <_raise_r+0x12>

0800a650 <raise>:
 800a650:	4b02      	ldr	r3, [pc, #8]	; (800a65c <raise+0xc>)
 800a652:	4601      	mov	r1, r0
 800a654:	6818      	ldr	r0, [r3, #0]
 800a656:	f7ff bfd3 	b.w	800a600 <_raise_r>
 800a65a:	bf00      	nop
 800a65c:	20000074 	.word	0x20000074

0800a660 <_kill_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4d07      	ldr	r5, [pc, #28]	; (800a680 <_kill_r+0x20>)
 800a664:	2300      	movs	r3, #0
 800a666:	4604      	mov	r4, r0
 800a668:	4608      	mov	r0, r1
 800a66a:	4611      	mov	r1, r2
 800a66c:	602b      	str	r3, [r5, #0]
 800a66e:	f7f7 fde3 	bl	8002238 <_kill>
 800a672:	1c43      	adds	r3, r0, #1
 800a674:	d102      	bne.n	800a67c <_kill_r+0x1c>
 800a676:	682b      	ldr	r3, [r5, #0]
 800a678:	b103      	cbz	r3, 800a67c <_kill_r+0x1c>
 800a67a:	6023      	str	r3, [r4, #0]
 800a67c:	bd38      	pop	{r3, r4, r5, pc}
 800a67e:	bf00      	nop
 800a680:	200007e8 	.word	0x200007e8

0800a684 <_getpid_r>:
 800a684:	f7f7 bdd0 	b.w	8002228 <_getpid>

0800a688 <__swhatbuf_r>:
 800a688:	b570      	push	{r4, r5, r6, lr}
 800a68a:	460c      	mov	r4, r1
 800a68c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a690:	2900      	cmp	r1, #0
 800a692:	b096      	sub	sp, #88	; 0x58
 800a694:	4615      	mov	r5, r2
 800a696:	461e      	mov	r6, r3
 800a698:	da0d      	bge.n	800a6b6 <__swhatbuf_r+0x2e>
 800a69a:	89a3      	ldrh	r3, [r4, #12]
 800a69c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a6a0:	f04f 0100 	mov.w	r1, #0
 800a6a4:	bf0c      	ite	eq
 800a6a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a6aa:	2340      	movne	r3, #64	; 0x40
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	6031      	str	r1, [r6, #0]
 800a6b0:	602b      	str	r3, [r5, #0]
 800a6b2:	b016      	add	sp, #88	; 0x58
 800a6b4:	bd70      	pop	{r4, r5, r6, pc}
 800a6b6:	466a      	mov	r2, sp
 800a6b8:	f000 f848 	bl	800a74c <_fstat_r>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	dbec      	blt.n	800a69a <__swhatbuf_r+0x12>
 800a6c0:	9901      	ldr	r1, [sp, #4]
 800a6c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a6c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a6ca:	4259      	negs	r1, r3
 800a6cc:	4159      	adcs	r1, r3
 800a6ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6d2:	e7eb      	b.n	800a6ac <__swhatbuf_r+0x24>

0800a6d4 <__smakebuf_r>:
 800a6d4:	898b      	ldrh	r3, [r1, #12]
 800a6d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6d8:	079d      	lsls	r5, r3, #30
 800a6da:	4606      	mov	r6, r0
 800a6dc:	460c      	mov	r4, r1
 800a6de:	d507      	bpl.n	800a6f0 <__smakebuf_r+0x1c>
 800a6e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	6123      	str	r3, [r4, #16]
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	6163      	str	r3, [r4, #20]
 800a6ec:	b002      	add	sp, #8
 800a6ee:	bd70      	pop	{r4, r5, r6, pc}
 800a6f0:	ab01      	add	r3, sp, #4
 800a6f2:	466a      	mov	r2, sp
 800a6f4:	f7ff ffc8 	bl	800a688 <__swhatbuf_r>
 800a6f8:	9900      	ldr	r1, [sp, #0]
 800a6fa:	4605      	mov	r5, r0
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f7fd fb81 	bl	8007e04 <_malloc_r>
 800a702:	b948      	cbnz	r0, 800a718 <__smakebuf_r+0x44>
 800a704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a708:	059a      	lsls	r2, r3, #22
 800a70a:	d4ef      	bmi.n	800a6ec <__smakebuf_r+0x18>
 800a70c:	f023 0303 	bic.w	r3, r3, #3
 800a710:	f043 0302 	orr.w	r3, r3, #2
 800a714:	81a3      	strh	r3, [r4, #12]
 800a716:	e7e3      	b.n	800a6e0 <__smakebuf_r+0xc>
 800a718:	89a3      	ldrh	r3, [r4, #12]
 800a71a:	6020      	str	r0, [r4, #0]
 800a71c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a720:	81a3      	strh	r3, [r4, #12]
 800a722:	9b00      	ldr	r3, [sp, #0]
 800a724:	6163      	str	r3, [r4, #20]
 800a726:	9b01      	ldr	r3, [sp, #4]
 800a728:	6120      	str	r0, [r4, #16]
 800a72a:	b15b      	cbz	r3, 800a744 <__smakebuf_r+0x70>
 800a72c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a730:	4630      	mov	r0, r6
 800a732:	f000 f81d 	bl	800a770 <_isatty_r>
 800a736:	b128      	cbz	r0, 800a744 <__smakebuf_r+0x70>
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	f023 0303 	bic.w	r3, r3, #3
 800a73e:	f043 0301 	orr.w	r3, r3, #1
 800a742:	81a3      	strh	r3, [r4, #12]
 800a744:	89a3      	ldrh	r3, [r4, #12]
 800a746:	431d      	orrs	r5, r3
 800a748:	81a5      	strh	r5, [r4, #12]
 800a74a:	e7cf      	b.n	800a6ec <__smakebuf_r+0x18>

0800a74c <_fstat_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4d07      	ldr	r5, [pc, #28]	; (800a76c <_fstat_r+0x20>)
 800a750:	2300      	movs	r3, #0
 800a752:	4604      	mov	r4, r0
 800a754:	4608      	mov	r0, r1
 800a756:	4611      	mov	r1, r2
 800a758:	602b      	str	r3, [r5, #0]
 800a75a:	f7f7 fdcc 	bl	80022f6 <_fstat>
 800a75e:	1c43      	adds	r3, r0, #1
 800a760:	d102      	bne.n	800a768 <_fstat_r+0x1c>
 800a762:	682b      	ldr	r3, [r5, #0]
 800a764:	b103      	cbz	r3, 800a768 <_fstat_r+0x1c>
 800a766:	6023      	str	r3, [r4, #0]
 800a768:	bd38      	pop	{r3, r4, r5, pc}
 800a76a:	bf00      	nop
 800a76c:	200007e8 	.word	0x200007e8

0800a770 <_isatty_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	4d06      	ldr	r5, [pc, #24]	; (800a78c <_isatty_r+0x1c>)
 800a774:	2300      	movs	r3, #0
 800a776:	4604      	mov	r4, r0
 800a778:	4608      	mov	r0, r1
 800a77a:	602b      	str	r3, [r5, #0]
 800a77c:	f7f7 fdcb 	bl	8002316 <_isatty>
 800a780:	1c43      	adds	r3, r0, #1
 800a782:	d102      	bne.n	800a78a <_isatty_r+0x1a>
 800a784:	682b      	ldr	r3, [r5, #0]
 800a786:	b103      	cbz	r3, 800a78a <_isatty_r+0x1a>
 800a788:	6023      	str	r3, [r4, #0]
 800a78a:	bd38      	pop	{r3, r4, r5, pc}
 800a78c:	200007e8 	.word	0x200007e8

0800a790 <log>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	ed2d 8b02 	vpush	{d8}
 800a796:	ec55 4b10 	vmov	r4, r5, d0
 800a79a:	f000 f839 	bl	800a810 <__ieee754_log>
 800a79e:	4622      	mov	r2, r4
 800a7a0:	462b      	mov	r3, r5
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	eeb0 8a40 	vmov.f32	s16, s0
 800a7aa:	eef0 8a60 	vmov.f32	s17, s1
 800a7ae:	f7f6 f9d5 	bl	8000b5c <__aeabi_dcmpun>
 800a7b2:	b998      	cbnz	r0, 800a7dc <log+0x4c>
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	f7f6 f9c4 	bl	8000b48 <__aeabi_dcmpgt>
 800a7c0:	b960      	cbnz	r0, 800a7dc <log+0x4c>
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	f7f6 f995 	bl	8000af8 <__aeabi_dcmpeq>
 800a7ce:	b160      	cbz	r0, 800a7ea <log+0x5a>
 800a7d0:	f7fc fbf4 	bl	8006fbc <__errno>
 800a7d4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800a800 <log+0x70>
 800a7d8:	2322      	movs	r3, #34	; 0x22
 800a7da:	6003      	str	r3, [r0, #0]
 800a7dc:	eeb0 0a48 	vmov.f32	s0, s16
 800a7e0:	eef0 0a68 	vmov.f32	s1, s17
 800a7e4:	ecbd 8b02 	vpop	{d8}
 800a7e8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ea:	f7fc fbe7 	bl	8006fbc <__errno>
 800a7ee:	ecbd 8b02 	vpop	{d8}
 800a7f2:	2321      	movs	r3, #33	; 0x21
 800a7f4:	6003      	str	r3, [r0, #0]
 800a7f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7fa:	4803      	ldr	r0, [pc, #12]	; (800a808 <log+0x78>)
 800a7fc:	f7ff b924 	b.w	8009a48 <nan>
 800a800:	00000000 	.word	0x00000000
 800a804:	fff00000 	.word	0xfff00000
 800a808:	0800afcd 	.word	0x0800afcd
 800a80c:	00000000 	.word	0x00000000

0800a810 <__ieee754_log>:
 800a810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a814:	ec51 0b10 	vmov	r0, r1, d0
 800a818:	ed2d 8b04 	vpush	{d8-d9}
 800a81c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a820:	b083      	sub	sp, #12
 800a822:	460d      	mov	r5, r1
 800a824:	da29      	bge.n	800a87a <__ieee754_log+0x6a>
 800a826:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a82a:	4303      	orrs	r3, r0
 800a82c:	ee10 2a10 	vmov	r2, s0
 800a830:	d10c      	bne.n	800a84c <__ieee754_log+0x3c>
 800a832:	49cf      	ldr	r1, [pc, #828]	; (800ab70 <__ieee754_log+0x360>)
 800a834:	2200      	movs	r2, #0
 800a836:	2300      	movs	r3, #0
 800a838:	2000      	movs	r0, #0
 800a83a:	f7f6 f81f 	bl	800087c <__aeabi_ddiv>
 800a83e:	ec41 0b10 	vmov	d0, r0, r1
 800a842:	b003      	add	sp, #12
 800a844:	ecbd 8b04 	vpop	{d8-d9}
 800a848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84c:	2900      	cmp	r1, #0
 800a84e:	da05      	bge.n	800a85c <__ieee754_log+0x4c>
 800a850:	460b      	mov	r3, r1
 800a852:	f7f5 fd31 	bl	80002b8 <__aeabi_dsub>
 800a856:	2200      	movs	r2, #0
 800a858:	2300      	movs	r3, #0
 800a85a:	e7ee      	b.n	800a83a <__ieee754_log+0x2a>
 800a85c:	4bc5      	ldr	r3, [pc, #788]	; (800ab74 <__ieee754_log+0x364>)
 800a85e:	2200      	movs	r2, #0
 800a860:	f7f5 fee2 	bl	8000628 <__aeabi_dmul>
 800a864:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800a868:	460d      	mov	r5, r1
 800a86a:	4ac3      	ldr	r2, [pc, #780]	; (800ab78 <__ieee754_log+0x368>)
 800a86c:	4295      	cmp	r5, r2
 800a86e:	dd06      	ble.n	800a87e <__ieee754_log+0x6e>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	f7f5 fd22 	bl	80002bc <__adddf3>
 800a878:	e7e1      	b.n	800a83e <__ieee754_log+0x2e>
 800a87a:	2300      	movs	r3, #0
 800a87c:	e7f5      	b.n	800a86a <__ieee754_log+0x5a>
 800a87e:	152c      	asrs	r4, r5, #20
 800a880:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a884:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a888:	441c      	add	r4, r3
 800a88a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800a88e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800a892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a896:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800a89a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800a89e:	ea42 0105 	orr.w	r1, r2, r5
 800a8a2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	4bb4      	ldr	r3, [pc, #720]	; (800ab7c <__ieee754_log+0x36c>)
 800a8aa:	f7f5 fd05 	bl	80002b8 <__aeabi_dsub>
 800a8ae:	1cab      	adds	r3, r5, #2
 800a8b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	4682      	mov	sl, r0
 800a8b8:	468b      	mov	fp, r1
 800a8ba:	f04f 0200 	mov.w	r2, #0
 800a8be:	dc53      	bgt.n	800a968 <__ieee754_log+0x158>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f7f6 f919 	bl	8000af8 <__aeabi_dcmpeq>
 800a8c6:	b1d0      	cbz	r0, 800a8fe <__ieee754_log+0xee>
 800a8c8:	2c00      	cmp	r4, #0
 800a8ca:	f000 8122 	beq.w	800ab12 <__ieee754_log+0x302>
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f7f5 fe40 	bl	8000554 <__aeabi_i2d>
 800a8d4:	a390      	add	r3, pc, #576	; (adr r3, 800ab18 <__ieee754_log+0x308>)
 800a8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8da:	4606      	mov	r6, r0
 800a8dc:	460f      	mov	r7, r1
 800a8de:	f7f5 fea3 	bl	8000628 <__aeabi_dmul>
 800a8e2:	a38f      	add	r3, pc, #572	; (adr r3, 800ab20 <__ieee754_log+0x310>)
 800a8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	460d      	mov	r5, r1
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	4639      	mov	r1, r7
 800a8f0:	f7f5 fe9a 	bl	8000628 <__aeabi_dmul>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	e7ba      	b.n	800a874 <__ieee754_log+0x64>
 800a8fe:	a38a      	add	r3, pc, #552	; (adr r3, 800ab28 <__ieee754_log+0x318>)
 800a900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a904:	4650      	mov	r0, sl
 800a906:	4659      	mov	r1, fp
 800a908:	f7f5 fe8e 	bl	8000628 <__aeabi_dmul>
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	2000      	movs	r0, #0
 800a912:	499b      	ldr	r1, [pc, #620]	; (800ab80 <__ieee754_log+0x370>)
 800a914:	f7f5 fcd0 	bl	80002b8 <__aeabi_dsub>
 800a918:	4652      	mov	r2, sl
 800a91a:	4606      	mov	r6, r0
 800a91c:	460f      	mov	r7, r1
 800a91e:	465b      	mov	r3, fp
 800a920:	4650      	mov	r0, sl
 800a922:	4659      	mov	r1, fp
 800a924:	f7f5 fe80 	bl	8000628 <__aeabi_dmul>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4630      	mov	r0, r6
 800a92e:	4639      	mov	r1, r7
 800a930:	f7f5 fe7a 	bl	8000628 <__aeabi_dmul>
 800a934:	4606      	mov	r6, r0
 800a936:	460f      	mov	r7, r1
 800a938:	b914      	cbnz	r4, 800a940 <__ieee754_log+0x130>
 800a93a:	4632      	mov	r2, r6
 800a93c:	463b      	mov	r3, r7
 800a93e:	e0a2      	b.n	800aa86 <__ieee754_log+0x276>
 800a940:	4620      	mov	r0, r4
 800a942:	f7f5 fe07 	bl	8000554 <__aeabi_i2d>
 800a946:	a374      	add	r3, pc, #464	; (adr r3, 800ab18 <__ieee754_log+0x308>)
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	4680      	mov	r8, r0
 800a94e:	4689      	mov	r9, r1
 800a950:	f7f5 fe6a 	bl	8000628 <__aeabi_dmul>
 800a954:	a372      	add	r3, pc, #456	; (adr r3, 800ab20 <__ieee754_log+0x310>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	4604      	mov	r4, r0
 800a95c:	460d      	mov	r5, r1
 800a95e:	4640      	mov	r0, r8
 800a960:	4649      	mov	r1, r9
 800a962:	f7f5 fe61 	bl	8000628 <__aeabi_dmul>
 800a966:	e0a7      	b.n	800aab8 <__ieee754_log+0x2a8>
 800a968:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a96c:	f7f5 fca6 	bl	80002bc <__adddf3>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	4650      	mov	r0, sl
 800a976:	4659      	mov	r1, fp
 800a978:	f7f5 ff80 	bl	800087c <__aeabi_ddiv>
 800a97c:	ec41 0b18 	vmov	d8, r0, r1
 800a980:	4620      	mov	r0, r4
 800a982:	f7f5 fde7 	bl	8000554 <__aeabi_i2d>
 800a986:	ec53 2b18 	vmov	r2, r3, d8
 800a98a:	ec41 0b19 	vmov	d9, r0, r1
 800a98e:	ec51 0b18 	vmov	r0, r1, d8
 800a992:	f7f5 fe49 	bl	8000628 <__aeabi_dmul>
 800a996:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800a99a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	4680      	mov	r8, r0
 800a9a6:	4689      	mov	r9, r1
 800a9a8:	f7f5 fe3e 	bl	8000628 <__aeabi_dmul>
 800a9ac:	a360      	add	r3, pc, #384	; (adr r3, 800ab30 <__ieee754_log+0x320>)
 800a9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	460f      	mov	r7, r1
 800a9b6:	f7f5 fe37 	bl	8000628 <__aeabi_dmul>
 800a9ba:	a35f      	add	r3, pc, #380	; (adr r3, 800ab38 <__ieee754_log+0x328>)
 800a9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c0:	f7f5 fc7c 	bl	80002bc <__adddf3>
 800a9c4:	4632      	mov	r2, r6
 800a9c6:	463b      	mov	r3, r7
 800a9c8:	f7f5 fe2e 	bl	8000628 <__aeabi_dmul>
 800a9cc:	a35c      	add	r3, pc, #368	; (adr r3, 800ab40 <__ieee754_log+0x330>)
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	f7f5 fc73 	bl	80002bc <__adddf3>
 800a9d6:	4632      	mov	r2, r6
 800a9d8:	463b      	mov	r3, r7
 800a9da:	f7f5 fe25 	bl	8000628 <__aeabi_dmul>
 800a9de:	a35a      	add	r3, pc, #360	; (adr r3, 800ab48 <__ieee754_log+0x338>)
 800a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e4:	f7f5 fc6a 	bl	80002bc <__adddf3>
 800a9e8:	4642      	mov	r2, r8
 800a9ea:	464b      	mov	r3, r9
 800a9ec:	f7f5 fe1c 	bl	8000628 <__aeabi_dmul>
 800a9f0:	a357      	add	r3, pc, #348	; (adr r3, 800ab50 <__ieee754_log+0x340>)
 800a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f6:	4680      	mov	r8, r0
 800a9f8:	4689      	mov	r9, r1
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	4639      	mov	r1, r7
 800a9fe:	f7f5 fe13 	bl	8000628 <__aeabi_dmul>
 800aa02:	a355      	add	r3, pc, #340	; (adr r3, 800ab58 <__ieee754_log+0x348>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f7f5 fc58 	bl	80002bc <__adddf3>
 800aa0c:	4632      	mov	r2, r6
 800aa0e:	463b      	mov	r3, r7
 800aa10:	f7f5 fe0a 	bl	8000628 <__aeabi_dmul>
 800aa14:	a352      	add	r3, pc, #328	; (adr r3, 800ab60 <__ieee754_log+0x350>)
 800aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1a:	f7f5 fc4f 	bl	80002bc <__adddf3>
 800aa1e:	4632      	mov	r2, r6
 800aa20:	463b      	mov	r3, r7
 800aa22:	f7f5 fe01 	bl	8000628 <__aeabi_dmul>
 800aa26:	460b      	mov	r3, r1
 800aa28:	4602      	mov	r2, r0
 800aa2a:	4649      	mov	r1, r9
 800aa2c:	4640      	mov	r0, r8
 800aa2e:	f7f5 fc45 	bl	80002bc <__adddf3>
 800aa32:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800aa36:	9b01      	ldr	r3, [sp, #4]
 800aa38:	3551      	adds	r5, #81	; 0x51
 800aa3a:	431d      	orrs	r5, r3
 800aa3c:	2d00      	cmp	r5, #0
 800aa3e:	4680      	mov	r8, r0
 800aa40:	4689      	mov	r9, r1
 800aa42:	dd48      	ble.n	800aad6 <__ieee754_log+0x2c6>
 800aa44:	4b4e      	ldr	r3, [pc, #312]	; (800ab80 <__ieee754_log+0x370>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	4650      	mov	r0, sl
 800aa4a:	4659      	mov	r1, fp
 800aa4c:	f7f5 fdec 	bl	8000628 <__aeabi_dmul>
 800aa50:	4652      	mov	r2, sl
 800aa52:	465b      	mov	r3, fp
 800aa54:	f7f5 fde8 	bl	8000628 <__aeabi_dmul>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	460f      	mov	r7, r1
 800aa60:	4640      	mov	r0, r8
 800aa62:	4649      	mov	r1, r9
 800aa64:	f7f5 fc2a 	bl	80002bc <__adddf3>
 800aa68:	ec53 2b18 	vmov	r2, r3, d8
 800aa6c:	f7f5 fddc 	bl	8000628 <__aeabi_dmul>
 800aa70:	4680      	mov	r8, r0
 800aa72:	4689      	mov	r9, r1
 800aa74:	b964      	cbnz	r4, 800aa90 <__ieee754_log+0x280>
 800aa76:	4602      	mov	r2, r0
 800aa78:	460b      	mov	r3, r1
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	f7f5 fc1b 	bl	80002b8 <__aeabi_dsub>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4650      	mov	r0, sl
 800aa88:	4659      	mov	r1, fp
 800aa8a:	f7f5 fc15 	bl	80002b8 <__aeabi_dsub>
 800aa8e:	e6d6      	b.n	800a83e <__ieee754_log+0x2e>
 800aa90:	a321      	add	r3, pc, #132	; (adr r3, 800ab18 <__ieee754_log+0x308>)
 800aa92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa96:	ec51 0b19 	vmov	r0, r1, d9
 800aa9a:	f7f5 fdc5 	bl	8000628 <__aeabi_dmul>
 800aa9e:	a320      	add	r3, pc, #128	; (adr r3, 800ab20 <__ieee754_log+0x310>)
 800aaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	460d      	mov	r5, r1
 800aaa8:	ec51 0b19 	vmov	r0, r1, d9
 800aaac:	f7f5 fdbc 	bl	8000628 <__aeabi_dmul>
 800aab0:	4642      	mov	r2, r8
 800aab2:	464b      	mov	r3, r9
 800aab4:	f7f5 fc02 	bl	80002bc <__adddf3>
 800aab8:	4602      	mov	r2, r0
 800aaba:	460b      	mov	r3, r1
 800aabc:	4630      	mov	r0, r6
 800aabe:	4639      	mov	r1, r7
 800aac0:	f7f5 fbfa 	bl	80002b8 <__aeabi_dsub>
 800aac4:	4652      	mov	r2, sl
 800aac6:	465b      	mov	r3, fp
 800aac8:	f7f5 fbf6 	bl	80002b8 <__aeabi_dsub>
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	4620      	mov	r0, r4
 800aad2:	4629      	mov	r1, r5
 800aad4:	e7d9      	b.n	800aa8a <__ieee754_log+0x27a>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4650      	mov	r0, sl
 800aadc:	4659      	mov	r1, fp
 800aade:	f7f5 fbeb 	bl	80002b8 <__aeabi_dsub>
 800aae2:	ec53 2b18 	vmov	r2, r3, d8
 800aae6:	f7f5 fd9f 	bl	8000628 <__aeabi_dmul>
 800aaea:	4606      	mov	r6, r0
 800aaec:	460f      	mov	r7, r1
 800aaee:	2c00      	cmp	r4, #0
 800aaf0:	f43f af23 	beq.w	800a93a <__ieee754_log+0x12a>
 800aaf4:	a308      	add	r3, pc, #32	; (adr r3, 800ab18 <__ieee754_log+0x308>)
 800aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafa:	ec51 0b19 	vmov	r0, r1, d9
 800aafe:	f7f5 fd93 	bl	8000628 <__aeabi_dmul>
 800ab02:	a307      	add	r3, pc, #28	; (adr r3, 800ab20 <__ieee754_log+0x310>)
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	4604      	mov	r4, r0
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	ec51 0b19 	vmov	r0, r1, d9
 800ab10:	e727      	b.n	800a962 <__ieee754_log+0x152>
 800ab12:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800ab68 <__ieee754_log+0x358>
 800ab16:	e694      	b.n	800a842 <__ieee754_log+0x32>
 800ab18:	fee00000 	.word	0xfee00000
 800ab1c:	3fe62e42 	.word	0x3fe62e42
 800ab20:	35793c76 	.word	0x35793c76
 800ab24:	3dea39ef 	.word	0x3dea39ef
 800ab28:	55555555 	.word	0x55555555
 800ab2c:	3fd55555 	.word	0x3fd55555
 800ab30:	df3e5244 	.word	0xdf3e5244
 800ab34:	3fc2f112 	.word	0x3fc2f112
 800ab38:	96cb03de 	.word	0x96cb03de
 800ab3c:	3fc74664 	.word	0x3fc74664
 800ab40:	94229359 	.word	0x94229359
 800ab44:	3fd24924 	.word	0x3fd24924
 800ab48:	55555593 	.word	0x55555593
 800ab4c:	3fe55555 	.word	0x3fe55555
 800ab50:	d078c69f 	.word	0xd078c69f
 800ab54:	3fc39a09 	.word	0x3fc39a09
 800ab58:	1d8e78af 	.word	0x1d8e78af
 800ab5c:	3fcc71c5 	.word	0x3fcc71c5
 800ab60:	9997fa04 	.word	0x9997fa04
 800ab64:	3fd99999 	.word	0x3fd99999
	...
 800ab70:	c3500000 	.word	0xc3500000
 800ab74:	43500000 	.word	0x43500000
 800ab78:	7fefffff 	.word	0x7fefffff
 800ab7c:	3ff00000 	.word	0x3ff00000
 800ab80:	3fe00000 	.word	0x3fe00000

0800ab84 <_init>:
 800ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab86:	bf00      	nop
 800ab88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab8a:	bc08      	pop	{r3}
 800ab8c:	469e      	mov	lr, r3
 800ab8e:	4770      	bx	lr

0800ab90 <_fini>:
 800ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab92:	bf00      	nop
 800ab94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab96:	bc08      	pop	{r3}
 800ab98:	469e      	mov	lr, r3
 800ab9a:	4770      	bx	lr
