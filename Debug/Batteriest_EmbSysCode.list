
Batteriest_EmbSysCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8cc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800aa70  0800aa70  0000ba70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af08  0800af08  0000c1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800af08  0800af08  0000bf08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af10  0800af10  0000c1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af10  0800af10  0000bf10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af14  0800af14  0000bf14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800af18  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  200001e8  0800b0fc  0000c1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007f8  0800b0fc  0000c7f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee0b  00000000  00000000  0000c214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219c  00000000  00000000  0001b01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  0001d1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b47  00000000  00000000  0001e030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001897f  00000000  00000000  0001eb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107ef  00000000  00000000  000374f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bbac  00000000  00000000  00047ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3891  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005314  00000000  00000000  000e38d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000e8be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aa54 	.word	0x0800aa54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800aa54 	.word	0x0800aa54

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_frsub>:
 8000cb8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cbc:	e002      	b.n	8000cc4 <__addsf3>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fsub>:
 8000cc0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cc4 <__addsf3>:
 8000cc4:	0042      	lsls	r2, r0, #1
 8000cc6:	bf1f      	itttt	ne
 8000cc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ccc:	ea92 0f03 	teqne	r2, r3
 8000cd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd8:	d06a      	beq.n	8000db0 <__addsf3+0xec>
 8000cda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ce2:	bfc1      	itttt	gt
 8000ce4:	18d2      	addgt	r2, r2, r3
 8000ce6:	4041      	eorgt	r1, r0
 8000ce8:	4048      	eorgt	r0, r1
 8000cea:	4041      	eorgt	r1, r0
 8000cec:	bfb8      	it	lt
 8000cee:	425b      	neglt	r3, r3
 8000cf0:	2b19      	cmp	r3, #25
 8000cf2:	bf88      	it	hi
 8000cf4:	4770      	bxhi	lr
 8000cf6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cfe:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4240      	negne	r0, r0
 8000d06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d0a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d0e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4249      	negne	r1, r1
 8000d16:	ea92 0f03 	teq	r2, r3
 8000d1a:	d03f      	beq.n	8000d9c <__addsf3+0xd8>
 8000d1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d20:	fa41 fc03 	asr.w	ip, r1, r3
 8000d24:	eb10 000c 	adds.w	r0, r0, ip
 8000d28:	f1c3 0320 	rsb	r3, r3, #32
 8000d2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d30:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__addsf3+0x78>
 8000d36:	4249      	negs	r1, r1
 8000d38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d3c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d40:	d313      	bcc.n	8000d6a <__addsf3+0xa6>
 8000d42:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d46:	d306      	bcc.n	8000d56 <__addsf3+0x92>
 8000d48:	0840      	lsrs	r0, r0, #1
 8000d4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d4e:	f102 0201 	add.w	r2, r2, #1
 8000d52:	2afe      	cmp	r2, #254	@ 0xfe
 8000d54:	d251      	bcs.n	8000dfa <__addsf3+0x136>
 8000d56:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5e:	bf08      	it	eq
 8000d60:	f020 0001 	biceq.w	r0, r0, #1
 8000d64:	ea40 0003 	orr.w	r0, r0, r3
 8000d68:	4770      	bx	lr
 8000d6a:	0049      	lsls	r1, r1, #1
 8000d6c:	eb40 0000 	adc.w	r0, r0, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	bf28      	it	cs
 8000d74:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d78:	d2ed      	bcs.n	8000d56 <__addsf3+0x92>
 8000d7a:	fab0 fc80 	clz	ip, r0
 8000d7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d82:	ebb2 020c 	subs.w	r2, r2, ip
 8000d86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d8a:	bfaa      	itet	ge
 8000d8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d90:	4252      	neglt	r2, r2
 8000d92:	4318      	orrge	r0, r3
 8000d94:	bfbc      	itt	lt
 8000d96:	40d0      	lsrlt	r0, r2
 8000d98:	4318      	orrlt	r0, r3
 8000d9a:	4770      	bx	lr
 8000d9c:	f092 0f00 	teq	r2, #0
 8000da0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000da4:	bf06      	itte	eq
 8000da6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000daa:	3201      	addeq	r2, #1
 8000dac:	3b01      	subne	r3, #1
 8000dae:	e7b5      	b.n	8000d1c <__addsf3+0x58>
 8000db0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db8:	bf18      	it	ne
 8000dba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dbe:	d021      	beq.n	8000e04 <__addsf3+0x140>
 8000dc0:	ea92 0f03 	teq	r2, r3
 8000dc4:	d004      	beq.n	8000dd0 <__addsf3+0x10c>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	bf08      	it	eq
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	4770      	bx	lr
 8000dd0:	ea90 0f01 	teq	r0, r1
 8000dd4:	bf1c      	itt	ne
 8000dd6:	2000      	movne	r0, #0
 8000dd8:	4770      	bxne	lr
 8000dda:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dde:	d104      	bne.n	8000dea <__addsf3+0x126>
 8000de0:	0040      	lsls	r0, r0, #1
 8000de2:	bf28      	it	cs
 8000de4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000de8:	4770      	bx	lr
 8000dea:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dee:	bf3c      	itt	cc
 8000df0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000df4:	4770      	bxcc	lr
 8000df6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dfa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e02:	4770      	bx	lr
 8000e04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e08:	bf16      	itet	ne
 8000e0a:	4608      	movne	r0, r1
 8000e0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e10:	4601      	movne	r1, r0
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	bf06      	itte	eq
 8000e16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e1a:	ea90 0f01 	teqeq	r0, r1
 8000e1e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_ui2f>:
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e004      	b.n	8000e34 <__aeabi_i2f+0x8>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_i2f>:
 8000e2c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e30:	bf48      	it	mi
 8000e32:	4240      	negmi	r0, r0
 8000e34:	ea5f 0c00 	movs.w	ip, r0
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e40:	4601      	mov	r1, r0
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	e01c      	b.n	8000e82 <__aeabi_l2f+0x2a>

08000e48 <__aeabi_ul2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e00a      	b.n	8000e6c <__aeabi_l2f+0x14>
 8000e56:	bf00      	nop

08000e58 <__aeabi_l2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e64:	d502      	bpl.n	8000e6c <__aeabi_l2f+0x14>
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	ea5f 0c01 	movs.w	ip, r1
 8000e70:	bf02      	ittt	eq
 8000e72:	4684      	moveq	ip, r0
 8000e74:	4601      	moveq	r1, r0
 8000e76:	2000      	moveq	r0, #0
 8000e78:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e7c:	bf08      	it	eq
 8000e7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e82:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e86:	fabc f28c 	clz	r2, ip
 8000e8a:	3a08      	subs	r2, #8
 8000e8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e90:	db10      	blt.n	8000eb4 <__aeabi_l2f+0x5c>
 8000e92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e96:	4463      	add	r3, ip
 8000e98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ea4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	f020 0001 	biceq.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	f102 0220 	add.w	r2, r2, #32
 8000eb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ec4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_uldivmod>:
 8000ed4:	b953      	cbnz	r3, 8000eec <__aeabi_uldivmod+0x18>
 8000ed6:	b94a      	cbnz	r2, 8000eec <__aeabi_uldivmod+0x18>
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	bf08      	it	eq
 8000edc:	2800      	cmpeq	r0, #0
 8000ede:	bf1c      	itt	ne
 8000ee0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ee4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ee8:	f000 b9a0 	b.w	800122c <__aeabi_idiv0>
 8000eec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ef0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ef4:	f000 f83c 	bl	8000f70 <__udivmoddi4>
 8000ef8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f00:	b004      	add	sp, #16
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_d2lz>:
 8000f04:	b538      	push	{r3, r4, r5, lr}
 8000f06:	2200      	movs	r2, #0
 8000f08:	2300      	movs	r3, #0
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	460d      	mov	r5, r1
 8000f0e:	f7ff fdfd 	bl	8000b0c <__aeabi_dcmplt>
 8000f12:	b928      	cbnz	r0, 8000f20 <__aeabi_d2lz+0x1c>
 8000f14:	4620      	mov	r0, r4
 8000f16:	4629      	mov	r1, r5
 8000f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f1c:	f000 b80a 	b.w	8000f34 <__aeabi_d2ulz>
 8000f20:	4620      	mov	r0, r4
 8000f22:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f26:	f000 f805 	bl	8000f34 <__aeabi_d2ulz>
 8000f2a:	4240      	negs	r0, r0
 8000f2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f30:	bd38      	pop	{r3, r4, r5, pc}
 8000f32:	bf00      	nop

08000f34 <__aeabi_d2ulz>:
 8000f34:	b5d0      	push	{r4, r6, r7, lr}
 8000f36:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <__aeabi_d2ulz+0x34>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4606      	mov	r6, r0
 8000f3c:	460f      	mov	r7, r1
 8000f3e:	f7ff fb73 	bl	8000628 <__aeabi_dmul>
 8000f42:	f7ff fe49 	bl	8000bd8 <__aeabi_d2uiz>
 8000f46:	4604      	mov	r4, r0
 8000f48:	f7ff faf4 	bl	8000534 <__aeabi_ui2d>
 8000f4c:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <__aeabi_d2ulz+0x38>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f7ff fb6a 	bl	8000628 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4630      	mov	r0, r6
 8000f5a:	4639      	mov	r1, r7
 8000f5c:	f7ff f9ac 	bl	80002b8 <__aeabi_dsub>
 8000f60:	f7ff fe3a 	bl	8000bd8 <__aeabi_d2uiz>
 8000f64:	4621      	mov	r1, r4
 8000f66:	bdd0      	pop	{r4, r6, r7, pc}
 8000f68:	3df00000 	.word	0x3df00000
 8000f6c:	41f00000 	.word	0x41f00000

08000f70 <__udivmoddi4>:
 8000f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f74:	9d08      	ldr	r5, [sp, #32]
 8000f76:	460c      	mov	r4, r1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d14e      	bne.n	800101a <__udivmoddi4+0xaa>
 8000f7c:	4694      	mov	ip, r2
 8000f7e:	458c      	cmp	ip, r1
 8000f80:	4686      	mov	lr, r0
 8000f82:	fab2 f282 	clz	r2, r2
 8000f86:	d962      	bls.n	800104e <__udivmoddi4+0xde>
 8000f88:	b14a      	cbz	r2, 8000f9e <__udivmoddi4+0x2e>
 8000f8a:	f1c2 0320 	rsb	r3, r2, #32
 8000f8e:	4091      	lsls	r1, r2
 8000f90:	fa20 f303 	lsr.w	r3, r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	4319      	orrs	r1, r3
 8000f9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa2:	fa1f f68c 	uxth.w	r6, ip
 8000fa6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000faa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fae:	fb07 1114 	mls	r1, r7, r4, r1
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb04 f106 	mul.w	r1, r4, r6
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d90a      	bls.n	8000fd4 <__udivmoddi4+0x64>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fc6:	f080 8112 	bcs.w	80011ee <__udivmoddi4+0x27e>
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	f240 810f 	bls.w	80011ee <__udivmoddi4+0x27e>
 8000fd0:	3c02      	subs	r4, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1a59      	subs	r1, r3, r1
 8000fd6:	fa1f f38e 	uxth.w	r3, lr
 8000fda:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fde:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fe6:	fb00 f606 	mul.w	r6, r0, r6
 8000fea:	429e      	cmp	r6, r3
 8000fec:	d90a      	bls.n	8001004 <__udivmoddi4+0x94>
 8000fee:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ff6:	f080 80fc 	bcs.w	80011f2 <__udivmoddi4+0x282>
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	f240 80f9 	bls.w	80011f2 <__udivmoddi4+0x282>
 8001000:	4463      	add	r3, ip
 8001002:	3802      	subs	r0, #2
 8001004:	1b9b      	subs	r3, r3, r6
 8001006:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800100a:	2100      	movs	r1, #0
 800100c:	b11d      	cbz	r5, 8001016 <__udivmoddi4+0xa6>
 800100e:	40d3      	lsrs	r3, r2
 8001010:	2200      	movs	r2, #0
 8001012:	e9c5 3200 	strd	r3, r2, [r5]
 8001016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101a:	428b      	cmp	r3, r1
 800101c:	d905      	bls.n	800102a <__udivmoddi4+0xba>
 800101e:	b10d      	cbz	r5, 8001024 <__udivmoddi4+0xb4>
 8001020:	e9c5 0100 	strd	r0, r1, [r5]
 8001024:	2100      	movs	r1, #0
 8001026:	4608      	mov	r0, r1
 8001028:	e7f5      	b.n	8001016 <__udivmoddi4+0xa6>
 800102a:	fab3 f183 	clz	r1, r3
 800102e:	2900      	cmp	r1, #0
 8001030:	d146      	bne.n	80010c0 <__udivmoddi4+0x150>
 8001032:	42a3      	cmp	r3, r4
 8001034:	d302      	bcc.n	800103c <__udivmoddi4+0xcc>
 8001036:	4290      	cmp	r0, r2
 8001038:	f0c0 80f0 	bcc.w	800121c <__udivmoddi4+0x2ac>
 800103c:	1a86      	subs	r6, r0, r2
 800103e:	eb64 0303 	sbc.w	r3, r4, r3
 8001042:	2001      	movs	r0, #1
 8001044:	2d00      	cmp	r5, #0
 8001046:	d0e6      	beq.n	8001016 <__udivmoddi4+0xa6>
 8001048:	e9c5 6300 	strd	r6, r3, [r5]
 800104c:	e7e3      	b.n	8001016 <__udivmoddi4+0xa6>
 800104e:	2a00      	cmp	r2, #0
 8001050:	f040 8090 	bne.w	8001174 <__udivmoddi4+0x204>
 8001054:	eba1 040c 	sub.w	r4, r1, ip
 8001058:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800105c:	fa1f f78c 	uxth.w	r7, ip
 8001060:	2101      	movs	r1, #1
 8001062:	fbb4 f6f8 	udiv	r6, r4, r8
 8001066:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800106a:	fb08 4416 	mls	r4, r8, r6, r4
 800106e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001072:	fb07 f006 	mul.w	r0, r7, r6
 8001076:	4298      	cmp	r0, r3
 8001078:	d908      	bls.n	800108c <__udivmoddi4+0x11c>
 800107a:	eb1c 0303 	adds.w	r3, ip, r3
 800107e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001082:	d202      	bcs.n	800108a <__udivmoddi4+0x11a>
 8001084:	4298      	cmp	r0, r3
 8001086:	f200 80cd 	bhi.w	8001224 <__udivmoddi4+0x2b4>
 800108a:	4626      	mov	r6, r4
 800108c:	1a1c      	subs	r4, r3, r0
 800108e:	fa1f f38e 	uxth.w	r3, lr
 8001092:	fbb4 f0f8 	udiv	r0, r4, r8
 8001096:	fb08 4410 	mls	r4, r8, r0, r4
 800109a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800109e:	fb00 f707 	mul.w	r7, r0, r7
 80010a2:	429f      	cmp	r7, r3
 80010a4:	d908      	bls.n	80010b8 <__udivmoddi4+0x148>
 80010a6:	eb1c 0303 	adds.w	r3, ip, r3
 80010aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80010ae:	d202      	bcs.n	80010b6 <__udivmoddi4+0x146>
 80010b0:	429f      	cmp	r7, r3
 80010b2:	f200 80b0 	bhi.w	8001216 <__udivmoddi4+0x2a6>
 80010b6:	4620      	mov	r0, r4
 80010b8:	1bdb      	subs	r3, r3, r7
 80010ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010be:	e7a5      	b.n	800100c <__udivmoddi4+0x9c>
 80010c0:	f1c1 0620 	rsb	r6, r1, #32
 80010c4:	408b      	lsls	r3, r1
 80010c6:	fa22 f706 	lsr.w	r7, r2, r6
 80010ca:	431f      	orrs	r7, r3
 80010cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80010d0:	fa04 f301 	lsl.w	r3, r4, r1
 80010d4:	ea43 030c 	orr.w	r3, r3, ip
 80010d8:	40f4      	lsrs	r4, r6
 80010da:	fa00 f801 	lsl.w	r8, r0, r1
 80010de:	0c38      	lsrs	r0, r7, #16
 80010e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010e4:	fbb4 fef0 	udiv	lr, r4, r0
 80010e8:	fa1f fc87 	uxth.w	ip, r7
 80010ec:	fb00 441e 	mls	r4, r0, lr, r4
 80010f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010f4:	fb0e f90c 	mul.w	r9, lr, ip
 80010f8:	45a1      	cmp	r9, r4
 80010fa:	fa02 f201 	lsl.w	r2, r2, r1
 80010fe:	d90a      	bls.n	8001116 <__udivmoddi4+0x1a6>
 8001100:	193c      	adds	r4, r7, r4
 8001102:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001106:	f080 8084 	bcs.w	8001212 <__udivmoddi4+0x2a2>
 800110a:	45a1      	cmp	r9, r4
 800110c:	f240 8081 	bls.w	8001212 <__udivmoddi4+0x2a2>
 8001110:	f1ae 0e02 	sub.w	lr, lr, #2
 8001114:	443c      	add	r4, r7
 8001116:	eba4 0409 	sub.w	r4, r4, r9
 800111a:	fa1f f983 	uxth.w	r9, r3
 800111e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001122:	fb00 4413 	mls	r4, r0, r3, r4
 8001126:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800112a:	fb03 fc0c 	mul.w	ip, r3, ip
 800112e:	45a4      	cmp	ip, r4
 8001130:	d907      	bls.n	8001142 <__udivmoddi4+0x1d2>
 8001132:	193c      	adds	r4, r7, r4
 8001134:	f103 30ff 	add.w	r0, r3, #4294967295
 8001138:	d267      	bcs.n	800120a <__udivmoddi4+0x29a>
 800113a:	45a4      	cmp	ip, r4
 800113c:	d965      	bls.n	800120a <__udivmoddi4+0x29a>
 800113e:	3b02      	subs	r3, #2
 8001140:	443c      	add	r4, r7
 8001142:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001146:	fba0 9302 	umull	r9, r3, r0, r2
 800114a:	eba4 040c 	sub.w	r4, r4, ip
 800114e:	429c      	cmp	r4, r3
 8001150:	46ce      	mov	lr, r9
 8001152:	469c      	mov	ip, r3
 8001154:	d351      	bcc.n	80011fa <__udivmoddi4+0x28a>
 8001156:	d04e      	beq.n	80011f6 <__udivmoddi4+0x286>
 8001158:	b155      	cbz	r5, 8001170 <__udivmoddi4+0x200>
 800115a:	ebb8 030e 	subs.w	r3, r8, lr
 800115e:	eb64 040c 	sbc.w	r4, r4, ip
 8001162:	fa04 f606 	lsl.w	r6, r4, r6
 8001166:	40cb      	lsrs	r3, r1
 8001168:	431e      	orrs	r6, r3
 800116a:	40cc      	lsrs	r4, r1
 800116c:	e9c5 6400 	strd	r6, r4, [r5]
 8001170:	2100      	movs	r1, #0
 8001172:	e750      	b.n	8001016 <__udivmoddi4+0xa6>
 8001174:	f1c2 0320 	rsb	r3, r2, #32
 8001178:	fa20 f103 	lsr.w	r1, r0, r3
 800117c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001180:	fa24 f303 	lsr.w	r3, r4, r3
 8001184:	4094      	lsls	r4, r2
 8001186:	430c      	orrs	r4, r1
 8001188:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800118c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001190:	fa1f f78c 	uxth.w	r7, ip
 8001194:	fbb3 f0f8 	udiv	r0, r3, r8
 8001198:	fb08 3110 	mls	r1, r8, r0, r3
 800119c:	0c23      	lsrs	r3, r4, #16
 800119e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011a2:	fb00 f107 	mul.w	r1, r0, r7
 80011a6:	4299      	cmp	r1, r3
 80011a8:	d908      	bls.n	80011bc <__udivmoddi4+0x24c>
 80011aa:	eb1c 0303 	adds.w	r3, ip, r3
 80011ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80011b2:	d22c      	bcs.n	800120e <__udivmoddi4+0x29e>
 80011b4:	4299      	cmp	r1, r3
 80011b6:	d92a      	bls.n	800120e <__udivmoddi4+0x29e>
 80011b8:	3802      	subs	r0, #2
 80011ba:	4463      	add	r3, ip
 80011bc:	1a5b      	subs	r3, r3, r1
 80011be:	b2a4      	uxth	r4, r4
 80011c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80011c4:	fb08 3311 	mls	r3, r8, r1, r3
 80011c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011cc:	fb01 f307 	mul.w	r3, r1, r7
 80011d0:	42a3      	cmp	r3, r4
 80011d2:	d908      	bls.n	80011e6 <__udivmoddi4+0x276>
 80011d4:	eb1c 0404 	adds.w	r4, ip, r4
 80011d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80011dc:	d213      	bcs.n	8001206 <__udivmoddi4+0x296>
 80011de:	42a3      	cmp	r3, r4
 80011e0:	d911      	bls.n	8001206 <__udivmoddi4+0x296>
 80011e2:	3902      	subs	r1, #2
 80011e4:	4464      	add	r4, ip
 80011e6:	1ae4      	subs	r4, r4, r3
 80011e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011ec:	e739      	b.n	8001062 <__udivmoddi4+0xf2>
 80011ee:	4604      	mov	r4, r0
 80011f0:	e6f0      	b.n	8000fd4 <__udivmoddi4+0x64>
 80011f2:	4608      	mov	r0, r1
 80011f4:	e706      	b.n	8001004 <__udivmoddi4+0x94>
 80011f6:	45c8      	cmp	r8, r9
 80011f8:	d2ae      	bcs.n	8001158 <__udivmoddi4+0x1e8>
 80011fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80011fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8001202:	3801      	subs	r0, #1
 8001204:	e7a8      	b.n	8001158 <__udivmoddi4+0x1e8>
 8001206:	4631      	mov	r1, r6
 8001208:	e7ed      	b.n	80011e6 <__udivmoddi4+0x276>
 800120a:	4603      	mov	r3, r0
 800120c:	e799      	b.n	8001142 <__udivmoddi4+0x1d2>
 800120e:	4630      	mov	r0, r6
 8001210:	e7d4      	b.n	80011bc <__udivmoddi4+0x24c>
 8001212:	46d6      	mov	lr, sl
 8001214:	e77f      	b.n	8001116 <__udivmoddi4+0x1a6>
 8001216:	4463      	add	r3, ip
 8001218:	3802      	subs	r0, #2
 800121a:	e74d      	b.n	80010b8 <__udivmoddi4+0x148>
 800121c:	4606      	mov	r6, r0
 800121e:	4623      	mov	r3, r4
 8001220:	4608      	mov	r0, r1
 8001222:	e70f      	b.n	8001044 <__udivmoddi4+0xd4>
 8001224:	3e02      	subs	r6, #2
 8001226:	4463      	add	r3, ip
 8001228:	e730      	b.n	800108c <__udivmoddi4+0x11c>
 800122a:	bf00      	nop

0800122c <__aeabi_idiv0>:
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <ADC_Select_Current>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// ADC CHANNEL CONFIGURATIONS (MULTI-CHANNEL WITHOUT DMA) //
void ADC_Select_Current() {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001236:	463b      	mov	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_0;
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001246:	2301      	movs	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800124a:	2301      	movs	r3, #1
 800124c:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	@ (800126c <ADC_Select_Current+0x3c>)
 8001254:	f001 fb1e 	bl	8002894 <HAL_ADC_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <ADC_Select_Current+0x32>
		Error_Handler();
 800125e:	f000 fe53 	bl	8001f08 <Error_Handler>
	}
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000204 	.word	0x20000204

08001270 <ADC_Select_Temp>:
void ADC_Select_Temp() {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001276:	463b      	mov	r3, r7
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_1;
 8001282:	2301      	movs	r3, #1
 8001284:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001286:	2301      	movs	r3, #1
 8001288:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800128a:	2301      	movs	r3, #1
 800128c:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800128e:	463b      	mov	r3, r7
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	@ (80012ac <ADC_Select_Temp+0x3c>)
 8001294:	f001 fafe 	bl	8002894 <HAL_ADC_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <ADC_Select_Temp+0x32>
		Error_Handler();
 800129e:	f000 fe33 	bl	8001f08 <Error_Handler>
	}
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000204 	.word	0x20000204

080012b0 <ADC_Select_Voltage>:

void ADC_Select_Voltage() {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80012b6:	463b      	mov	r3, r7
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_2;
 80012c2:	2302      	movs	r3, #2
 80012c4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80012ca:	2301      	movs	r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012ce:	463b      	mov	r3, r7
 80012d0:	4619      	mov	r1, r3
 80012d2:	4806      	ldr	r0, [pc, #24]	@ (80012ec <ADC_Select_Voltage+0x3c>)
 80012d4:	f001 fade 	bl	8002894 <HAL_ADC_ConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <ADC_Select_Voltage+0x32>
		Error_Handler();
 80012de:	f000 fe13 	bl	8001f08 <Error_Handler>
	}
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000204 	.word	0x20000204

080012f0 <ADC_Select_Vrefint>:
void ADC_Select_Vrefint() {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80012f6:	463b      	mov	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001302:	2311      	movs	r3, #17
 8001304:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800130a:	2301      	movs	r3, #1
 800130c:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800130e:	463b      	mov	r3, r7
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	@ (800132c <ADC_Select_Vrefint+0x3c>)
 8001314:	f001 fabe 	bl	8002894 <HAL_ADC_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <ADC_Select_Vrefint+0x32>
		Error_Handler();
 800131e:	f000 fdf3 	bl	8001f08 <Error_Handler>
	}
}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000204 	.word	0x20000204

08001330 <Get_ADC_Value>:
//END CODE OF ADC CHANNEL CONFIGURATIONS (MULTI-CHANNEL WITHOUT DMA) //

// READING AND PROCESSING ADC VALUES WITH MOVING AVERAGE //
uint16_t Get_ADC_Value() {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
	uint16_t adc_value = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Start(&hadc1);
 800133a:	480b      	ldr	r0, [pc, #44]	@ (8001368 <Get_ADC_Value+0x38>)
 800133c:	f001 f92a 	bl	8002594 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK) {
 8001340:	2101      	movs	r1, #1
 8001342:	4809      	ldr	r0, [pc, #36]	@ (8001368 <Get_ADC_Value+0x38>)
 8001344:	f001 fa0d 	bl	8002762 <HAL_ADC_PollForConversion>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d104      	bne.n	8001358 <Get_ADC_Value+0x28>
		adc_value = HAL_ADC_GetValue(&hadc1);
 800134e:	4806      	ldr	r0, [pc, #24]	@ (8001368 <Get_ADC_Value+0x38>)
 8001350:	f001 fa92 	bl	8002878 <HAL_ADC_GetValue>
 8001354:	4603      	mov	r3, r0
 8001356:	80fb      	strh	r3, [r7, #6]
	}
	HAL_ADC_Stop(&hadc1);
 8001358:	4803      	ldr	r0, [pc, #12]	@ (8001368 <Get_ADC_Value+0x38>)
 800135a:	f001 f9cf 	bl	80026fc <HAL_ADC_Stop>
	return adc_value;
 800135e:	88fb      	ldrh	r3, [r7, #6]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000204 	.word	0x20000204

0800136c <Get_ADC_MA_Vref>:

float Get_ADC_MA_Vref(uint16_t *adc_vrefint_buffer) {
 800136c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
	uint64_t sum_adc_value = 0;
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t i = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
	for (; i < NOS; i++) {
 8001386:	e013      	b.n	80013b0 <Get_ADC_MA_Vref+0x44>
		sum_adc_value = sum_adc_value + adc_vrefint_buffer[i];
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4413      	add	r3, r2
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	2200      	movs	r2, #0
 8001396:	461c      	mov	r4, r3
 8001398:	4615      	mov	r5, r2
 800139a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800139e:	eb12 0804 	adds.w	r8, r2, r4
 80013a2:	eb43 0905 	adc.w	r9, r3, r5
 80013a6:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (; i < NOS; i++) {
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	3301      	adds	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	2b63      	cmp	r3, #99	@ 0x63
 80013b4:	d9e8      	bls.n	8001388 <Get_ADC_MA_Vref+0x1c>
	}
	return sum_adc_value / NOS;
 80013b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013ba:	f04f 0264 	mov.w	r2, #100	@ 0x64
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	f7ff fd87 	bl	8000ed4 <__aeabi_uldivmod>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fd3b 	bl	8000e48 <__aeabi_ul2f>
 80013d2:	4603      	mov	r3, r0
 80013d4:	ee07 3a90 	vmov	s15, r3
}
 80013d8:	eeb0 0a67 	vmov.f32	s0, s15
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013e4:	0000      	movs	r0, r0
	...

080013e8 <Get_ADC_Voltage>:

float Get_ADC_Voltage(float raw_voltage) {
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	ed87 0a01 	vstr	s0, [r7, #4]
	return (raw_voltage / 4095.0) * Vrefint * 2.0;
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff f8c0 	bl	8000578 <__aeabi_f2d>
 80013f8:	a316      	add	r3, pc, #88	@ (adr r3, 8001454 <Get_ADC_Voltage+0x6c>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff fa3d 	bl	800087c <__aeabi_ddiv>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4614      	mov	r4, r2
 8001408:	461d      	mov	r5, r3
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <Get_ADC_Voltage+0x68>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f8b2 	bl	8000578 <__aeabi_f2d>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4620      	mov	r0, r4
 800141a:	4629      	mov	r1, r5
 800141c:	f7ff f904 	bl	8000628 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	f7fe ff46 	bl	80002bc <__adddf3>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fbee 	bl	8000c18 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
 800143e:	ee07 3a90 	vmov	s15, r3
}
 8001442:	eeb0 0a67 	vmov.f32	s0, s15
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bdb0      	pop	{r4, r5, r7, pc}
 800144c:	f3af 8000 	nop.w
 8001450:	20000008 	.word	0x20000008
 8001454:	00000000 	.word	0x00000000
 8001458:	40affe00 	.word	0x40affe00

0800145c <Get_ADC_Vrefint>:

float Get_ADC_Vrefint(float raw_vrefint) {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	ed87 0a01 	vstr	s0, [r7, #4]
	return (raw_vrefint / *VREFIN_CAL) * Vrefint;
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <Get_ADC_Vrefint+0x38>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001472:	edd7 6a01 	vldr	s13, [r7, #4]
 8001476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800147a:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <Get_ADC_Vrefint+0x3c>)
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001484:	eeb0 0a67 	vmov.f32	s0, s15
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	1fff7a2a 	.word	0x1fff7a2a
 8001498:	20000008 	.word	0x20000008
 800149c:	00000000 	.word	0x00000000

080014a0 <Get_ADC_Current>:

float Get_ADC_Current(float raw_current) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	ed87 0a01 	vstr	s0, [r7, #4]
	return ((raw_current) - Crefint) / (lts_Vsamp) / 0.9875;
 80014aa:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <Get_ADC_Current+0x58>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80014b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <Get_ADC_Current+0x5c>)
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014c2:	ee16 0a90 	vmov	r0, s13
 80014c6:	f7ff f857 	bl	8000578 <__aeabi_f2d>
 80014ca:	a309      	add	r3, pc, #36	@ (adr r3, 80014f0 <Get_ADC_Current+0x50>)
 80014cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d0:	f7ff f9d4 	bl	800087c <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f7ff fb9c 	bl	8000c18 <__aeabi_d2f>
 80014e0:	4603      	mov	r3, r0
 80014e2:	ee07 3a90 	vmov	s15, r3
}
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	9999999a 	.word	0x9999999a
 80014f4:	3fef9999 	.word	0x3fef9999
 80014f8:	2000000c 	.word	0x2000000c
 80014fc:	20000004 	.word	0x20000004

08001500 <Get_ADC_Temp>:

double Get_ADC_Temp(uint16_t adc_value) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
	double temp;
	temp = log(((40950000 / adc_value) - 10000));
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	4a36      	ldr	r2, [pc, #216]	@ (80015e8 <Get_ADC_Temp+0xe8>)
 800150e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001512:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001516:	3b10      	subs	r3, #16
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f81b 	bl	8000554 <__aeabi_i2d>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	ec43 2b10 	vmov	d0, r2, r3
 8001526:	f009 f89f 	bl	800a668 <log>
 800152a:	ed87 0b02 	vstr	d0, [r7, #8]
	temp = 1
			/ (0.001129148
					+ (0.000234125 + (0.0000000876741 * temp * temp)) * temp);
 800152e:	a326      	add	r3, pc, #152	@ (adr r3, 80015c8 <Get_ADC_Temp+0xc8>)
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001538:	f7ff f876 	bl	8000628 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001548:	f7ff f86e 	bl	8000628 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	a31e      	add	r3, pc, #120	@ (adr r3, 80015d0 <Get_ADC_Temp+0xd0>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7fe feaf 	bl	80002bc <__adddf3>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800156a:	f7ff f85d 	bl	8000628 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	a318      	add	r3, pc, #96	@ (adr r3, 80015d8 <Get_ADC_Temp+0xd8>)
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	f7fe fe9e 	bl	80002bc <__adddf3>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
	temp = 1
 8001584:	f04f 0000 	mov.w	r0, #0
 8001588:	4918      	ldr	r1, [pc, #96]	@ (80015ec <Get_ADC_Temp+0xec>)
 800158a:	f7ff f977 	bl	800087c <__aeabi_ddiv>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp = temp - 273.15;
 8001596:	a312      	add	r3, pc, #72	@ (adr r3, 80015e0 <Get_ADC_Temp+0xe0>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015a0:	f7fe fe8a 	bl	80002b8 <__aeabi_dsub>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return temp;
 80015ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80015b4:	eeb0 0a47 	vmov.f32	s0, s14
 80015b8:	eef0 0a67 	vmov.f32	s1, s15
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	f3af 8000 	nop.w
 80015c8:	14170d19 	.word	0x14170d19
 80015cc:	3e7788eb 	.word	0x3e7788eb
 80015d0:	6fb4c3c2 	.word	0x6fb4c3c2
 80015d4:	3f2eafee 	.word	0x3f2eafee
 80015d8:	6edeb890 	.word	0x6edeb890
 80015dc:	3f527ffd 	.word	0x3f527ffd
 80015e0:	66666666 	.word	0x66666666
 80015e4:	40711266 	.word	0x40711266
 80015e8:	0270d8f0 	.word	0x0270d8f0
 80015ec:	3ff00000 	.word	0x3ff00000

080015f0 <Get_ADC_Moving_Average>:

float Get_ADC_Moving_Average(uint16_t *adc_value_buffer) {
 80015f0:	b5b0      	push	{r4, r5, r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	float sum_adc_value = 0;
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	72fb      	strb	r3, [r7, #11]
	for (; i < NOS; i++) {
 8001602:	e011      	b.n	8001628 <Get_ADC_Moving_Average+0x38>
		sum_adc_value = sum_adc_value + adc_value_buffer[i];
 8001604:	7afb      	ldrb	r3, [r7, #11]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	ee07 3a90 	vmov	s15, r3
 8001612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001616:	ed97 7a03 	vldr	s14, [r7, #12]
 800161a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161e:	edc7 7a03 	vstr	s15, [r7, #12]
	for (; i < NOS; i++) {
 8001622:	7afb      	ldrb	r3, [r7, #11]
 8001624:	3301      	adds	r3, #1
 8001626:	72fb      	strb	r3, [r7, #11]
 8001628:	7afb      	ldrb	r3, [r7, #11]
 800162a:	2b63      	cmp	r3, #99	@ 0x63
 800162c:	d9ea      	bls.n	8001604 <Get_ADC_Moving_Average+0x14>

	}
	sum_adc_value = sum_adc_value / NOS;
 800162e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001632:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80016c0 <Get_ADC_Moving_Average+0xd0>
 8001636:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163a:	edc7 7a03 	vstr	s15, [r7, #12]
	return (sum_adc_value / 4095.0) * Vrefint * 2.0 / 0.9642;
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f7fe ff9a 	bl	8000578 <__aeabi_f2d>
 8001644:	a31a      	add	r3, pc, #104	@ (adr r3, 80016b0 <Get_ADC_Moving_Average+0xc0>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	f7ff f917 	bl	800087c <__aeabi_ddiv>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4614      	mov	r4, r2
 8001654:	461d      	mov	r5, r3
 8001656:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <Get_ADC_Moving_Average+0xd4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff8c 	bl	8000578 <__aeabi_f2d>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4620      	mov	r0, r4
 8001666:	4629      	mov	r1, r5
 8001668:	f7fe ffde 	bl	8000628 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	f7fe fe20 	bl	80002bc <__adddf3>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	a30c      	add	r3, pc, #48	@ (adr r3, 80016b8 <Get_ADC_Moving_Average+0xc8>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7ff f8f7 	bl	800087c <__aeabi_ddiv>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff fabf 	bl	8000c18 <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	ee07 3a90 	vmov	s15, r3
}
 80016a0:	eeb0 0a67 	vmov.f32	s0, s15
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bdb0      	pop	{r4, r5, r7, pc}
 80016aa:	bf00      	nop
 80016ac:	f3af 8000 	nop.w
 80016b0:	00000000 	.word	0x00000000
 80016b4:	40affe00 	.word	0x40affe00
 80016b8:	f559b3d0 	.word	0xf559b3d0
 80016bc:	3feedab9 	.word	0x3feedab9
 80016c0:	42c80000 	.word	0x42c80000
 80016c4:	20000008 	.word	0x20000008

080016c8 <Calibration_ADC>:
// END CODE OF READING AND PROCESSING ADC VALUES WITH MOVING AVERAGE //

void Calibration_ADC() {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
	ADC_Select_Vrefint();
 80016ce:	f7ff fe0f 	bl	80012f0 <ADC_Select_Vrefint>
	for (int var = 0; var < NOS; ++var) {
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	e018      	b.n	800170a <Calibration_ADC+0x42>
		adc_vrefint_value[var] = Get_ADC_Vrefint(Get_ADC_Value());
 80016d8:	f7ff fe2a 	bl	8001330 <Get_ADC_Value>
 80016dc:	4603      	mov	r3, r0
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ea:	f7ff feb7 	bl	800145c <Get_ADC_Vrefint>
 80016ee:	eef0 7a40 	vmov.f32	s15, s0
 80016f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f6:	ee17 3a90 	vmov	r3, s15
 80016fa:	b299      	uxth	r1, r3
 80016fc:	4a18      	ldr	r2, [pc, #96]	@ (8001760 <Calibration_ADC+0x98>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int var = 0; var < NOS; ++var) {
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3301      	adds	r3, #1
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b63      	cmp	r3, #99	@ 0x63
 800170e:	dde3      	ble.n	80016d8 <Calibration_ADC+0x10>
	}
	Vrefint = Get_ADC_MA_Vref(adc_vrefint_value);
 8001710:	4813      	ldr	r0, [pc, #76]	@ (8001760 <Calibration_ADC+0x98>)
 8001712:	f7ff fe2b 	bl	800136c <Get_ADC_MA_Vref>
 8001716:	eef0 7a40 	vmov.f32	s15, s0
 800171a:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <Calibration_ADC+0x9c>)
 800171c:	edc3 7a00 	vstr	s15, [r3]
	ADC_Select_Current();
 8001720:	f7ff fd86 	bl	8001230 <ADC_Select_Current>
	for (int var = 0; var < NOS; ++var) {
 8001724:	2300      	movs	r3, #0
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	e00a      	b.n	8001740 <Calibration_ADC+0x78>
		adc_crefint_value[var] = Get_ADC_Value();
 800172a:	f7ff fe01 	bl	8001330 <Get_ADC_Value>
 800172e:	4603      	mov	r3, r0
 8001730:	4619      	mov	r1, r3
 8001732:	4a0d      	ldr	r2, [pc, #52]	@ (8001768 <Calibration_ADC+0xa0>)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int var = 0; var < NOS; ++var) {
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2b63      	cmp	r3, #99	@ 0x63
 8001744:	ddf1      	ble.n	800172a <Calibration_ADC+0x62>
	}
	Crefint = Get_ADC_Moving_Average(adc_crefint_value);
 8001746:	4808      	ldr	r0, [pc, #32]	@ (8001768 <Calibration_ADC+0xa0>)
 8001748:	f7ff ff52 	bl	80015f0 <Get_ADC_Moving_Average>
 800174c:	eef0 7a40 	vmov.f32	s15, s0
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <Calibration_ADC+0xa4>)
 8001752:	edc3 7a00 	vstr	s15, [r3]
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000514 	.word	0x20000514
 8001764:	20000008 	.word	0x20000008
 8001768:	200005dc 	.word	0x200005dc
 800176c:	2000000c 	.word	0x2000000c

08001770 <Bat_Relay_Cmd>:

// RELAY (GPIO CHANNEL) CONFIGURATIONS //
void Bat_Relay_Cmd() {
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	switch (relayStatus) {
 8001774:	4b2c      	ldr	r3, [pc, #176]	@ (8001828 <Bat_Relay_Cmd+0xb8>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b03      	cmp	r3, #3
 800177a:	d852      	bhi.n	8001822 <Bat_Relay_Cmd+0xb2>
 800177c:	a201      	add	r2, pc, #4	@ (adr r2, 8001784 <Bat_Relay_Cmd+0x14>)
 800177e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001782:	bf00      	nop
 8001784:	08001795 	.word	0x08001795
 8001788:	080017bd 	.word	0x080017bd
 800178c:	080017df 	.word	0x080017df
 8001790:	08001801 	.word	0x08001801
	case relayStatus_Idle:
		HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, GPIO_PIN_SET);
 8001794:	2201      	movs	r2, #1
 8001796:	2110      	movs	r1, #16
 8001798:	4824      	ldr	r0, [pc, #144]	@ (800182c <Bat_Relay_Cmd+0xbc>)
 800179a:	f002 f931 	bl	8003a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, GPIO_PIN_SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	2120      	movs	r1, #32
 80017a2:	4822      	ldr	r0, [pc, #136]	@ (800182c <Bat_Relay_Cmd+0xbc>)
 80017a4:	f002 f92c 	bl	8003a00 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80017a8:	2064      	movs	r0, #100	@ 0x64
 80017aa:	f000 fe8b 	bl	80024c4 <HAL_Delay>
		dch_m2 = false;
 80017ae:	4b20      	ldr	r3, [pc, #128]	@ (8001830 <Bat_Relay_Cmd+0xc0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
		falan = true;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <Bat_Relay_Cmd+0xc4>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
		break;
 80017ba:	e032      	b.n	8001822 <Bat_Relay_Cmd+0xb2>
	case relayStatus_Charge:
		HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	2110      	movs	r1, #16
 80017c0:	481a      	ldr	r0, [pc, #104]	@ (800182c <Bat_Relay_Cmd+0xbc>)
 80017c2:	f002 f91d 	bl	8003a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, GPIO_PIN_SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2120      	movs	r1, #32
 80017ca:	4818      	ldr	r0, [pc, #96]	@ (800182c <Bat_Relay_Cmd+0xbc>)
 80017cc:	f002 f918 	bl	8003a00 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80017d0:	2064      	movs	r0, #100	@ 0x64
 80017d2:	f000 fe77 	bl	80024c4 <HAL_Delay>
		dch_m2 = false;
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <Bat_Relay_Cmd+0xc0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
		break;
 80017dc:	e021      	b.n	8001822 <Bat_Relay_Cmd+0xb2>
	case relayStatus_Discharge_M1:
		HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	2110      	movs	r1, #16
 80017e2:	4812      	ldr	r0, [pc, #72]	@ (800182c <Bat_Relay_Cmd+0xbc>)
 80017e4:	f002 f90c 	bl	8003a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2120      	movs	r1, #32
 80017ec:	480f      	ldr	r0, [pc, #60]	@ (800182c <Bat_Relay_Cmd+0xbc>)
 80017ee:	f002 f907 	bl	8003a00 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80017f2:	2064      	movs	r0, #100	@ 0x64
 80017f4:	f000 fe66 	bl	80024c4 <HAL_Delay>
		dch_m2 = false;
 80017f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <Bat_Relay_Cmd+0xc0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
		break;
 80017fe:	e010      	b.n	8001822 <Bat_Relay_Cmd+0xb2>
	case relayStatus_Discharge_M2:
		HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, GPIO_PIN_SET);
 8001800:	2201      	movs	r2, #1
 8001802:	2110      	movs	r1, #16
 8001804:	4809      	ldr	r0, [pc, #36]	@ (800182c <Bat_Relay_Cmd+0xbc>)
 8001806:	f002 f8fb 	bl	8003a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2120      	movs	r1, #32
 800180e:	4807      	ldr	r0, [pc, #28]	@ (800182c <Bat_Relay_Cmd+0xbc>)
 8001810:	f002 f8f6 	bl	8003a00 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001814:	2064      	movs	r0, #100	@ 0x64
 8001816:	f000 fe55 	bl	80024c4 <HAL_Delay>
		dch_m2 = true;
 800181a:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <Bat_Relay_Cmd+0xc0>)
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
		break;
 8001820:	bf00      	nop
	}
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000380 	.word	0x20000380
 800182c:	40020000 	.word	0x40020000
 8001830:	20000000 	.word	0x20000000
 8001834:	20000382 	.word	0x20000382

08001838 <UART_Cmd>:
// END OF RELAY (GPIO CHANNEL) CONFIGURATIONS //

// UART RECEIVE DATA CONFIGURATIONS //
void UART_Cmd(char *cmd) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	if (!strcmp(cmd, IDLE)) {
 8001840:	4917      	ldr	r1, [pc, #92]	@ (80018a0 <UART_Cmd+0x68>)
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7fe fccc 	bl	80001e0 <strcmp>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d103      	bne.n	8001856 <UART_Cmd+0x1e>
		relayStatusChange(relayStatus_Idle);
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <UART_Cmd+0x6c>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
	} else if (!strcmp(cmd, DISCHARGE_M1)) {
		relayStatusChange(relayStatus_Discharge_M1);
	} else if (!strcmp(cmd, DISCHARGE_M2)) {
		relayStatusChange(relayStatus_Discharge_M2);
	}
}
 8001854:	e01f      	b.n	8001896 <UART_Cmd+0x5e>
	} else if (!strcmp(cmd, CHARGE)) {
 8001856:	4914      	ldr	r1, [pc, #80]	@ (80018a8 <UART_Cmd+0x70>)
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7fe fcc1 	bl	80001e0 <strcmp>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <UART_Cmd+0x34>
		relayStatusChange(relayStatus_Charge);
 8001864:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <UART_Cmd+0x6c>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
}
 800186a:	e014      	b.n	8001896 <UART_Cmd+0x5e>
	} else if (!strcmp(cmd, DISCHARGE_M1)) {
 800186c:	490f      	ldr	r1, [pc, #60]	@ (80018ac <UART_Cmd+0x74>)
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7fe fcb6 	bl	80001e0 <strcmp>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d103      	bne.n	8001882 <UART_Cmd+0x4a>
		relayStatusChange(relayStatus_Discharge_M1);
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <UART_Cmd+0x6c>)
 800187c:	2202      	movs	r2, #2
 800187e:	701a      	strb	r2, [r3, #0]
}
 8001880:	e009      	b.n	8001896 <UART_Cmd+0x5e>
	} else if (!strcmp(cmd, DISCHARGE_M2)) {
 8001882:	490b      	ldr	r1, [pc, #44]	@ (80018b0 <UART_Cmd+0x78>)
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7fe fcab 	bl	80001e0 <strcmp>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <UART_Cmd+0x5e>
		relayStatusChange(relayStatus_Discharge_M2);
 8001890:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <UART_Cmd+0x6c>)
 8001892:	2203      	movs	r2, #3
 8001894:	701a      	strb	r2, [r3, #0]
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	0800aa70 	.word	0x0800aa70
 80018a4:	20000380 	.word	0x20000380
 80018a8:	0800aa78 	.word	0x0800aa78
 80018ac:	0800aa80 	.word	0x0800aa80
 80018b0:	0800aa90 	.word	0x0800aa90

080018b4 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a12      	ldr	r2, [pc, #72]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x5c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d11e      	bne.n	8001908 <HAL_UARTEx_RxEventCallback+0x54>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) usart.rx_data, 20);
 80018ca:	2214      	movs	r2, #20
 80018cc:	4911      	ldr	r1, [pc, #68]	@ (8001914 <HAL_UARTEx_RxEventCallback+0x60>)
 80018ce:	4812      	ldr	r0, [pc, #72]	@ (8001918 <HAL_UARTEx_RxEventCallback+0x64>)
 80018d0:	f003 fa1d 	bl	8004d0e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <HAL_UARTEx_RxEventCallback+0x68>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <HAL_UARTEx_RxEventCallback+0x68>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0208 	bic.w	r2, r2, #8
 80018e2:	601a      	str	r2, [r3, #0]
		for (uint8_t i = Size; i < 20; i++) {
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	73fb      	strb	r3, [r7, #15]
 80018e8:	e007      	b.n	80018fa <HAL_UARTEx_RxEventCallback+0x46>
			usart.rx_data[i] = 0;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001920 <HAL_UARTEx_RxEventCallback+0x6c>)
 80018ee:	4413      	add	r3, r2
 80018f0:	2200      	movs	r2, #0
 80018f2:	765a      	strb	r2, [r3, #25]
		for (uint8_t i = Size; i < 20; i++) {
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	3301      	adds	r3, #1
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b13      	cmp	r3, #19
 80018fe:	d9f4      	bls.n	80018ea <HAL_UARTEx_RxEventCallback+0x36>
		}
		usart.received = true;
 8001900:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001902:	2201      	movs	r2, #1
 8001904:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	}
}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40011000 	.word	0x40011000
 8001914:	20000355 	.word	0x20000355
 8001918:	20000294 	.word	0x20000294
 800191c:	200002dc 	.word	0x200002dc
 8001920:	2000033c 	.word	0x2000033c

08001924 <HAL_TIM_PeriodElapsedCallback>:
// END CODE OF UART RECEIVE DATA CONFIGURATIONS //

// UART TRANSMIT DATA CONFIGURATIONS //
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim1.Instance) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d132      	bne.n	800199e <HAL_TIM_PeriodElapsedCallback+0x7a>
		if (dch_m2 == false) {
 8001938:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x88>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	f083 0301 	eor.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d014      	beq.n	8001970 <HAL_TIM_PeriodElapsedCallback+0x4c>
			usart.transtick++;
 8001946:	4b1a      	ldr	r3, [pc, #104]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001948:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800194a:	3301      	adds	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001950:	85da      	strh	r2, [r3, #46]	@ 0x2e
			if (usart.transtick >= 1000) {
 8001952:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001954:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001956:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800195a:	d320      	bcc.n	800199e <HAL_TIM_PeriodElapsedCallback+0x7a>
				HAL_UART_Transmit(&huart1, usart.tx_data, sizeof(usart.tx_data),
 800195c:	2301      	movs	r3, #1
 800195e:	2219      	movs	r2, #25
 8001960:	4913      	ldr	r1, [pc, #76]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001962:	4814      	ldr	r0, [pc, #80]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001964:	f003 f948 	bl	8004bf8 <HAL_UART_Transmit>
						1);
				usart.transtick = 0;
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800196a:	2200      	movs	r2, #0
 800196c:	85da      	strh	r2, [r3, #46]	@ 0x2e
						1);
				usart.transtick = 0;
			}
		}
	}
}
 800196e:	e016      	b.n	800199e <HAL_TIM_PeriodElapsedCallback+0x7a>
		} else if (dch_m2 == true) {
 8001970:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d012      	beq.n	800199e <HAL_TIM_PeriodElapsedCallback+0x7a>
			usart.transtick++;
 8001978:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800197a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800197c:	3301      	adds	r3, #1
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001982:	85da      	strh	r2, [r3, #46]	@ 0x2e
			if (usart.transtick >= 1) {
 8001984:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001986:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001988:	2b00      	cmp	r3, #0
 800198a:	d008      	beq.n	800199e <HAL_TIM_PeriodElapsedCallback+0x7a>
				HAL_UART_Transmit(&huart1, usart.tx_data, sizeof(usart.tx_data),
 800198c:	2301      	movs	r3, #1
 800198e:	2219      	movs	r2, #25
 8001990:	4907      	ldr	r1, [pc, #28]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001992:	4808      	ldr	r0, [pc, #32]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001994:	f003 f930 	bl	8004bf8 <HAL_UART_Transmit>
				usart.transtick = 0;
 8001998:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800199a:	2200      	movs	r2, #0
 800199c:	85da      	strh	r2, [r3, #46]	@ 0x2e
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000024c 	.word	0x2000024c
 80019ac:	20000000 	.word	0x20000000
 80019b0:	2000033c 	.word	0x2000033c
 80019b4:	20000294 	.word	0x20000294

080019b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019be:	f000 fd0f 	bl	80023e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c2:	f000 f921 	bl	8001c08 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c6:	f000 fa5d 	bl	8001e84 <MX_GPIO_Init>
  MX_DMA_Init();
 80019ca:	f000 fa3b 	bl	8001e44 <MX_DMA_Init>
  MX_TIM1_Init();
 80019ce:	f000 f9bf 	bl	8001d50 <MX_TIM1_Init>
  MX_ADC1_Init();
 80019d2:	f000 f983 	bl	8001cdc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80019d6:	f000 fa0b 	bl	8001df0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	Bat_Relay_Cmd(relayStatus);
 80019da:	4b7d      	ldr	r3, [pc, #500]	@ (8001bd0 <main+0x218>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fec6 	bl	8001770 <Bat_Relay_Cmd>
	HAL_TIM_Base_Start_IT(&htim1);
 80019e4:	487b      	ldr	r0, [pc, #492]	@ (8001bd4 <main+0x21c>)
 80019e6:	f002 fccd 	bl	8004384 <HAL_TIM_Base_Start_IT>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) usart.rx_data, 20);
 80019ea:	2214      	movs	r2, #20
 80019ec:	497a      	ldr	r1, [pc, #488]	@ (8001bd8 <main+0x220>)
 80019ee:	487b      	ldr	r0, [pc, #492]	@ (8001bdc <main+0x224>)
 80019f0:	f003 f98d 	bl	8004d0e <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80019f4:	4b7a      	ldr	r3, [pc, #488]	@ (8001be0 <main+0x228>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b79      	ldr	r3, [pc, #484]	@ (8001be0 <main+0x228>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0208 	bic.w	r2, r2, #8
 8001a02:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		switch (dch_m2) {
 8001a04:	4b77      	ldr	r3, [pc, #476]	@ (8001be4 <main+0x22c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d156      	bne.n	8001aba <main+0x102>
		case true:
			ADC_Select_Temp();
 8001a0c:	f7ff fc30 	bl	8001270 <ADC_Select_Temp>
			batValue.temp = Get_ADC_Temp(Get_ADC_Value());
 8001a10:	f7ff fc8e 	bl	8001330 <Get_ADC_Value>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fd72 	bl	8001500 <Get_ADC_Temp>
 8001a1c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a20:	eef0 7a60 	vmov.f32	s15, s1
 8001a24:	4b70      	ldr	r3, [pc, #448]	@ (8001be8 <main+0x230>)
 8001a26:	ed83 7b02 	vstr	d7, [r3, #8]
			ADC_Select_Voltage();
 8001a2a:	f7ff fc41 	bl	80012b0 <ADC_Select_Voltage>
			batValue.voltage = Get_ADC_Voltage(Get_ADC_Value());
 8001a2e:	f7ff fc7f 	bl	8001330 <Get_ADC_Value>
 8001a32:	4603      	mov	r3, r0
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a40:	f7ff fcd2 	bl	80013e8 <Get_ADC_Voltage>
 8001a44:	eef0 7a40 	vmov.f32	s15, s0
 8001a48:	4b67      	ldr	r3, [pc, #412]	@ (8001be8 <main+0x230>)
 8001a4a:	edc3 7a00 	vstr	s15, [r3]
			ADC_Select_Current();
 8001a4e:	f7ff fbef 	bl	8001230 <ADC_Select_Current>
			batValue.current = Get_ADC_Current(
					Get_ADC_Voltage(Get_ADC_Value()));
 8001a52:	f7ff fc6d 	bl	8001330 <Get_ADC_Value>
 8001a56:	4603      	mov	r3, r0
 8001a58:	ee07 3a90 	vmov	s15, r3
			batValue.current = Get_ADC_Current(
 8001a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a60:	eeb0 0a67 	vmov.f32	s0, s15
 8001a64:	f7ff fcc0 	bl	80013e8 <Get_ADC_Voltage>
 8001a68:	eef0 7a40 	vmov.f32	s15, s0
 8001a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a70:	f7ff fd16 	bl	80014a0 <Get_ADC_Current>
 8001a74:	eef0 7a40 	vmov.f32	s15, s0
 8001a78:	4b5b      	ldr	r3, [pc, #364]	@ (8001be8 <main+0x230>)
 8001a7a:	edc3 7a01 	vstr	s15, [r3, #4]
			sprintf((char*) usart.tx_data, "%d,%1.3f,%1.3f,%1.3f\n",
 8001a7e:	4b54      	ldr	r3, [pc, #336]	@ (8001bd0 <main+0x218>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461e      	mov	r6, r3
					relayStatus, batValue.voltage, batValue.current,
 8001a84:	4b58      	ldr	r3, [pc, #352]	@ (8001be8 <main+0x230>)
 8001a86:	681b      	ldr	r3, [r3, #0]
			sprintf((char*) usart.tx_data, "%d,%1.3f,%1.3f,%1.3f\n",
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fd75 	bl	8000578 <__aeabi_f2d>
 8001a8e:	4604      	mov	r4, r0
 8001a90:	460d      	mov	r5, r1
					relayStatus, batValue.voltage, batValue.current,
 8001a92:	4b55      	ldr	r3, [pc, #340]	@ (8001be8 <main+0x230>)
 8001a94:	685b      	ldr	r3, [r3, #4]
			sprintf((char*) usart.tx_data, "%d,%1.3f,%1.3f,%1.3f\n",
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fd6e 	bl	8000578 <__aeabi_f2d>
 8001a9c:	4b52      	ldr	r3, [pc, #328]	@ (8001be8 <main+0x230>)
 8001a9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001aaa:	e9cd 4500 	strd	r4, r5, [sp]
 8001aae:	4632      	mov	r2, r6
 8001ab0:	494e      	ldr	r1, [pc, #312]	@ (8001bec <main+0x234>)
 8001ab2:	484f      	ldr	r0, [pc, #316]	@ (8001bf0 <main+0x238>)
 8001ab4:	f005 f99c 	bl	8006df0 <siprintf>
					batValue.temp);
			break;
 8001ab8:	e077      	b.n	8001baa <main+0x1f2>
		case false:
			ADC_Select_Temp();
 8001aba:	f7ff fbd9 	bl	8001270 <ADC_Select_Temp>
			batValue.temp = Get_ADC_Temp(Get_ADC_Value());
 8001abe:	f7ff fc37 	bl	8001330 <Get_ADC_Value>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fd1b 	bl	8001500 <Get_ADC_Temp>
 8001aca:	eeb0 7a40 	vmov.f32	s14, s0
 8001ace:	eef0 7a60 	vmov.f32	s15, s1
 8001ad2:	4b45      	ldr	r3, [pc, #276]	@ (8001be8 <main+0x230>)
 8001ad4:	ed83 7b02 	vstr	d7, [r3, #8]
			ADC_Select_Voltage();
 8001ad8:	f7ff fbea 	bl	80012b0 <ADC_Select_Voltage>
			adc_voltage_value[count] = Get_ADC_Value();
 8001adc:	4b45      	ldr	r3, [pc, #276]	@ (8001bf4 <main+0x23c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461c      	mov	r4, r3
 8001ae2:	f7ff fc25 	bl	8001330 <Get_ADC_Value>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b43      	ldr	r3, [pc, #268]	@ (8001bf8 <main+0x240>)
 8001aec:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			ADC_Select_Current();
 8001af0:	f7ff fb9e 	bl	8001230 <ADC_Select_Current>
			adc_current_value[count] = Get_ADC_Value();
 8001af4:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf4 <main+0x23c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461c      	mov	r4, r3
 8001afa:	f7ff fc19 	bl	8001330 <Get_ADC_Value>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b3e      	ldr	r3, [pc, #248]	@ (8001bfc <main+0x244>)
 8001b04:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			count++;
 8001b08:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf4 <main+0x23c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	4b38      	ldr	r3, [pc, #224]	@ (8001bf4 <main+0x23c>)
 8001b12:	701a      	strb	r2, [r3, #0]
			if (count == NOS) {
 8001b14:	4b37      	ldr	r3, [pc, #220]	@ (8001bf4 <main+0x23c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b64      	cmp	r3, #100	@ 0x64
 8001b1a:	d105      	bne.n	8001b28 <main+0x170>
				count = 0;
 8001b1c:	4b35      	ldr	r3, [pc, #212]	@ (8001bf4 <main+0x23c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
				adc_buf = true;
 8001b22:	4b37      	ldr	r3, [pc, #220]	@ (8001c00 <main+0x248>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
			}
			if (adc_buf == true) {
 8001b28:	4b35      	ldr	r3, [pc, #212]	@ (8001c00 <main+0x248>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d032      	beq.n	8001b96 <main+0x1de>
				batValue.voltage = Get_ADC_Moving_Average(adc_voltage_value);
 8001b30:	4831      	ldr	r0, [pc, #196]	@ (8001bf8 <main+0x240>)
 8001b32:	f7ff fd5d 	bl	80015f0 <Get_ADC_Moving_Average>
 8001b36:	eef0 7a40 	vmov.f32	s15, s0
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001be8 <main+0x230>)
 8001b3c:	edc3 7a00 	vstr	s15, [r3]
				batValue.current = Get_ADC_Current(
 8001b40:	482e      	ldr	r0, [pc, #184]	@ (8001bfc <main+0x244>)
 8001b42:	f7ff fd55 	bl	80015f0 <Get_ADC_Moving_Average>
 8001b46:	eef0 7a40 	vmov.f32	s15, s0
 8001b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4e:	f7ff fca7 	bl	80014a0 <Get_ADC_Current>
 8001b52:	eef0 7a40 	vmov.f32	s15, s0
 8001b56:	4b24      	ldr	r3, [pc, #144]	@ (8001be8 <main+0x230>)
 8001b58:	edc3 7a01 	vstr	s15, [r3, #4]
						Get_ADC_Moving_Average(adc_current_value));
				sprintf((char*) usart.tx_data, "%d,%1.3f,%1.3f,%1.3f\n",
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <main+0x218>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461e      	mov	r6, r3
						relayStatus, batValue.voltage, batValue.current,
 8001b62:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <main+0x230>)
 8001b64:	681b      	ldr	r3, [r3, #0]
				sprintf((char*) usart.tx_data, "%d,%1.3f,%1.3f,%1.3f\n",
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fd06 	bl	8000578 <__aeabi_f2d>
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	460d      	mov	r5, r1
						relayStatus, batValue.voltage, batValue.current,
 8001b70:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <main+0x230>)
 8001b72:	685b      	ldr	r3, [r3, #4]
				sprintf((char*) usart.tx_data, "%d,%1.3f,%1.3f,%1.3f\n",
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fcff 	bl	8000578 <__aeabi_f2d>
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <main+0x230>)
 8001b7c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b88:	e9cd 4500 	strd	r4, r5, [sp]
 8001b8c:	4632      	mov	r2, r6
 8001b8e:	4917      	ldr	r1, [pc, #92]	@ (8001bec <main+0x234>)
 8001b90:	4817      	ldr	r0, [pc, #92]	@ (8001bf0 <main+0x238>)
 8001b92:	f005 f92d 	bl	8006df0 <siprintf>
						batValue.temp);
			}
			if (falan) {
 8001b96:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <main+0x24c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <main+0x1f0>
				Calibration_ADC();
 8001b9e:	f7ff fd93 	bl	80016c8 <Calibration_ADC>
				falan = false;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <main+0x24c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001ba8:	bf00      	nop

		}
		// END CODE OF READING ADC USING MOVING AVERAGE METHOD (WITHOUT DMA) //

		// UART RECEIVE DATA WHILE CODE //
		if (usart.received) {
 8001baa:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <main+0x238>)
 8001bac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f43f af27 	beq.w	8001a04 <main+0x4c>
			UART_Cmd(usart.rx_data);
 8001bb6:	4808      	ldr	r0, [pc, #32]	@ (8001bd8 <main+0x220>)
 8001bb8:	f7ff fe3e 	bl	8001838 <UART_Cmd>
			Bat_Relay_Cmd(relayStatus);
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <main+0x218>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fdd5 	bl	8001770 <Bat_Relay_Cmd>
			usart.received = false;
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <main+0x238>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		switch (dch_m2) {
 8001bce:	e719      	b.n	8001a04 <main+0x4c>
 8001bd0:	20000380 	.word	0x20000380
 8001bd4:	2000024c 	.word	0x2000024c
 8001bd8:	20000355 	.word	0x20000355
 8001bdc:	20000294 	.word	0x20000294
 8001be0:	200002dc 	.word	0x200002dc
 8001be4:	20000000 	.word	0x20000000
 8001be8:	20000370 	.word	0x20000370
 8001bec:	0800aaa0 	.word	0x0800aaa0
 8001bf0:	2000033c 	.word	0x2000033c
 8001bf4:	20000383 	.word	0x20000383
 8001bf8:	20000384 	.word	0x20000384
 8001bfc:	2000044c 	.word	0x2000044c
 8001c00:	20000381 	.word	0x20000381
 8001c04:	20000382 	.word	0x20000382

08001c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b094      	sub	sp, #80	@ 0x50
 8001c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0e:	f107 0320 	add.w	r3, r7, #32
 8001c12:	2230      	movs	r2, #48	@ 0x30
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f005 f94d 	bl	8006eb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	4b28      	ldr	r3, [pc, #160]	@ (8001cd4 <SystemClock_Config+0xcc>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c34:	4a27      	ldr	r2, [pc, #156]	@ (8001cd4 <SystemClock_Config+0xcc>)
 8001c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c3c:	4b25      	ldr	r3, [pc, #148]	@ (8001cd4 <SystemClock_Config+0xcc>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	4b22      	ldr	r3, [pc, #136]	@ (8001cd8 <SystemClock_Config+0xd0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c54:	4a20      	ldr	r2, [pc, #128]	@ (8001cd8 <SystemClock_Config+0xd0>)
 8001c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd8 <SystemClock_Config+0xd0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c70:	2310      	movs	r3, #16
 8001c72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c74:	2302      	movs	r3, #2
 8001c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001c80:	2354      	movs	r3, #84	@ 0x54
 8001c82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c84:	2302      	movs	r3, #2
 8001c86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c88:	2304      	movs	r3, #4
 8001c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8c:	f107 0320 	add.w	r3, r7, #32
 8001c90:	4618      	mov	r0, r3
 8001c92:	f001 fecf 	bl	8003a34 <HAL_RCC_OscConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c9c:	f000 f934 	bl	8001f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cb6:	f107 030c 	add.w	r3, r7, #12
 8001cba:	2102      	movs	r1, #2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 f931 	bl	8003f24 <HAL_RCC_ClockConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001cc8:	f000 f91e 	bl	8001f08 <Error_Handler>
  }
}
 8001ccc:	bf00      	nop
 8001cce:	3750      	adds	r7, #80	@ 0x50
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40007000 	.word	0x40007000

08001cdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ce0:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <MX_ADC1_Init+0x68>)
 8001ce2:	4a19      	ldr	r2, [pc, #100]	@ (8001d48 <MX_ADC1_Init+0x6c>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ce6:	4b17      	ldr	r3, [pc, #92]	@ (8001d44 <MX_ADC1_Init+0x68>)
 8001ce8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001cec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cee:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <MX_ADC1_Init+0x68>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001cf4:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <MX_ADC1_Init+0x68>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001cfa:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <MX_ADC1_Init+0x68>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d00:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <MX_ADC1_Init+0x68>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d08:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <MX_ADC1_Init+0x68>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <MX_ADC1_Init+0x68>)
 8001d10:	4a0e      	ldr	r2, [pc, #56]	@ (8001d4c <MX_ADC1_Init+0x70>)
 8001d12:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d14:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <MX_ADC1_Init+0x68>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <MX_ADC1_Init+0x68>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <MX_ADC1_Init+0x68>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <MX_ADC1_Init+0x68>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <MX_ADC1_Init+0x68>)
 8001d30:	f000 fbec 	bl	800250c <HAL_ADC_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8001d3a:	f000 f8e5 	bl	8001f08 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000204 	.word	0x20000204
 8001d48:	40012000 	.word	0x40012000
 8001d4c:	0f000001 	.word	0x0f000001

08001d50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d56:	f107 0308 	add.w	r3, r7, #8
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d64:	463b      	mov	r3, r7
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dec <MX_TIM1_Init+0x9c>)
 8001d70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42000-1;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d74:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8001d78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2-1;
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d86:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d8c:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d94:	2280      	movs	r2, #128	@ 0x80
 8001d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d98:	4813      	ldr	r0, [pc, #76]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d9a:	f002 faa3 	bl	80042e4 <HAL_TIM_Base_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001da4:	f000 f8b0 	bl	8001f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dae:	f107 0308 	add.w	r3, r7, #8
 8001db2:	4619      	mov	r1, r3
 8001db4:	480c      	ldr	r0, [pc, #48]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001db6:	f002 fc37 	bl	8004628 <HAL_TIM_ConfigClockSource>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001dc0:	f000 f8a2 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dcc:	463b      	mov	r3, r7
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001dd2:	f002 fe3f 	bl	8004a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ddc:	f000 f894 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	2000024c 	.word	0x2000024c
 8001dec:	40010000 	.word	0x40010000

08001df0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001df4:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <MX_USART1_UART_Init+0x48>)
 8001df6:	4a11      	ldr	r2, [pc, #68]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <MX_USART1_UART_Init+0x48>)
 8001dfc:	4a10      	ldr	r2, [pc, #64]	@ (8001e40 <MX_USART1_UART_Init+0x50>)
 8001dfe:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e00:	4b0d      	ldr	r3, [pc, #52]	@ (8001e38 <MX_USART1_UART_Init+0x48>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e06:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <MX_USART1_UART_Init+0x48>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <MX_USART1_UART_Init+0x48>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <MX_USART1_UART_Init+0x48>)
 8001e14:	220c      	movs	r2, #12
 8001e16:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e18:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <MX_USART1_UART_Init+0x48>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <MX_USART1_UART_Init+0x48>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e24:	4804      	ldr	r0, [pc, #16]	@ (8001e38 <MX_USART1_UART_Init+0x48>)
 8001e26:	f002 fe97 	bl	8004b58 <HAL_UART_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001e30:	f000 f86a 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000294 	.word	0x20000294
 8001e3c:	40011000 	.word	0x40011000
 8001e40:	001e8480 	.word	0x001e8480

08001e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <MX_DMA_Init+0x3c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a0b      	ldr	r2, [pc, #44]	@ (8001e80 <MX_DMA_Init+0x3c>)
 8001e54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <MX_DMA_Init+0x3c>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	203a      	movs	r0, #58	@ 0x3a
 8001e6c:	f001 f80b 	bl	8002e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001e70:	203a      	movs	r0, #58	@ 0x3a
 8001e72:	f001 f824 	bl	8002ebe <HAL_NVIC_EnableIRQ>

}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	60da      	str	r2, [r3, #12]
 8001e98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <MX_GPIO_Init+0x7c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a17      	ldr	r2, [pc, #92]	@ (8001f00 <MX_GPIO_Init+0x7c>)
 8001ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <MX_GPIO_Init+0x7c>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <MX_GPIO_Init+0x7c>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a10      	ldr	r2, [pc, #64]	@ (8001f00 <MX_GPIO_Init+0x7c>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <MX_GPIO_Init+0x7c>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY_1_Pin|RELAY_2_Pin, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2130      	movs	r1, #48	@ 0x30
 8001ed6:	480b      	ldr	r0, [pc, #44]	@ (8001f04 <MX_GPIO_Init+0x80>)
 8001ed8:	f001 fd92 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RELAY_1_Pin RELAY_2_Pin */
  GPIO_InitStruct.Pin = RELAY_1_Pin|RELAY_2_Pin;
 8001edc:	2330      	movs	r3, #48	@ 0x30
 8001ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4804      	ldr	r0, [pc, #16]	@ (8001f04 <MX_GPIO_Init+0x80>)
 8001ef4:	f001 fc00 	bl	80036f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ef8:	bf00      	nop
 8001efa:	3720      	adds	r7, #32
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020000 	.word	0x40020000

08001f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0c:	b672      	cpsid	i
}
 8001f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <Error_Handler+0x8>

08001f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <HAL_MspInit+0x4c>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f22:	4a0f      	ldr	r2, [pc, #60]	@ (8001f60 <HAL_MspInit+0x4c>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <HAL_MspInit+0x4c>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <HAL_MspInit+0x4c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	4a08      	ldr	r2, [pc, #32]	@ (8001f60 <HAL_MspInit+0x4c>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_MspInit+0x4c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800

08001f64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	@ 0x28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a17      	ldr	r2, [pc, #92]	@ (8001fe0 <HAL_ADC_MspInit+0x7c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d127      	bne.n	8001fd6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <HAL_ADC_MspInit+0x80>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	4a15      	ldr	r2, [pc, #84]	@ (8001fe4 <HAL_ADC_MspInit+0x80>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f96:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <HAL_ADC_MspInit+0x80>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <HAL_ADC_MspInit+0x80>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe4 <HAL_ADC_MspInit+0x80>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <HAL_ADC_MspInit+0x80>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = BAT_C_Pin|BAT_TP_Pin|BAT_V_Pin;
 8001fbe:	2307      	movs	r3, #7
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <HAL_ADC_MspInit+0x84>)
 8001fd2:	f001 fb91 	bl	80036f8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	@ 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40012000 	.word	0x40012000
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020000 	.word	0x40020000

08001fec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8002034 <HAL_TIM_Base_MspInit+0x48>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d115      	bne.n	800202a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b0d      	ldr	r3, [pc, #52]	@ (8002038 <HAL_TIM_Base_MspInit+0x4c>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	4a0c      	ldr	r2, [pc, #48]	@ (8002038 <HAL_TIM_Base_MspInit+0x4c>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6453      	str	r3, [r2, #68]	@ 0x44
 800200e:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <HAL_TIM_Base_MspInit+0x4c>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	2019      	movs	r0, #25
 8002020:	f000 ff31 	bl	8002e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002024:	2019      	movs	r0, #25
 8002026:	f000 ff4a 	bl	8002ebe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40010000 	.word	0x40010000
 8002038:	40023800 	.word	0x40023800

0800203c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	@ 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a34      	ldr	r2, [pc, #208]	@ (800212c <HAL_UART_MspInit+0xf0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d162      	bne.n	8002124 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	4b33      	ldr	r3, [pc, #204]	@ (8002130 <HAL_UART_MspInit+0xf4>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	4a32      	ldr	r2, [pc, #200]	@ (8002130 <HAL_UART_MspInit+0xf4>)
 8002068:	f043 0310 	orr.w	r3, r3, #16
 800206c:	6453      	str	r3, [r2, #68]	@ 0x44
 800206e:	4b30      	ldr	r3, [pc, #192]	@ (8002130 <HAL_UART_MspInit+0xf4>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	4b2c      	ldr	r3, [pc, #176]	@ (8002130 <HAL_UART_MspInit+0xf4>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	4a2b      	ldr	r2, [pc, #172]	@ (8002130 <HAL_UART_MspInit+0xf4>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6313      	str	r3, [r2, #48]	@ 0x30
 800208a:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <HAL_UART_MspInit+0xf4>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002096:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800209a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020a8:	2307      	movs	r3, #7
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	4820      	ldr	r0, [pc, #128]	@ (8002134 <HAL_UART_MspInit+0xf8>)
 80020b4:	f001 fb20 	bl	80036f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80020b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002138 <HAL_UART_MspInit+0xfc>)
 80020ba:	4a20      	ldr	r2, [pc, #128]	@ (800213c <HAL_UART_MspInit+0x100>)
 80020bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80020be:	4b1e      	ldr	r3, [pc, #120]	@ (8002138 <HAL_UART_MspInit+0xfc>)
 80020c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80020c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002138 <HAL_UART_MspInit+0xfc>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <HAL_UART_MspInit+0xfc>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020d2:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <HAL_UART_MspInit+0xfc>)
 80020d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020da:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <HAL_UART_MspInit+0xfc>)
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020e0:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <HAL_UART_MspInit+0xfc>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80020e6:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <HAL_UART_MspInit+0xfc>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020ec:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_UART_MspInit+0xfc>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020f2:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <HAL_UART_MspInit+0xfc>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020f8:	480f      	ldr	r0, [pc, #60]	@ (8002138 <HAL_UART_MspInit+0xfc>)
 80020fa:	f000 fefb 	bl	8002ef4 <HAL_DMA_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002104:	f7ff ff00 	bl	8001f08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a0b      	ldr	r2, [pc, #44]	@ (8002138 <HAL_UART_MspInit+0xfc>)
 800210c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <HAL_UART_MspInit+0xfc>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002114:	2200      	movs	r2, #0
 8002116:	2100      	movs	r1, #0
 8002118:	2025      	movs	r0, #37	@ 0x25
 800211a:	f000 feb4 	bl	8002e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800211e:	2025      	movs	r0, #37	@ 0x25
 8002120:	f000 fecd 	bl	8002ebe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002124:	bf00      	nop
 8002126:	3728      	adds	r7, #40	@ 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40011000 	.word	0x40011000
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000
 8002138:	200002dc 	.word	0x200002dc
 800213c:	40026440 	.word	0x40026440

08002140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <NMI_Handler+0x4>

08002148 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800214c:	bf00      	nop
 800214e:	e7fd      	b.n	800214c <HardFault_Handler+0x4>

08002150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <MemManage_Handler+0x4>

08002158 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <BusFault_Handler+0x4>

08002160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <UsageFault_Handler+0x4>

08002168 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002196:	f000 f975 	bl	8002484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021a4:	4802      	ldr	r0, [pc, #8]	@ (80021b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80021a6:	f002 f94f 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2000024c 	.word	0x2000024c

080021b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021b8:	4802      	ldr	r0, [pc, #8]	@ (80021c4 <USART1_IRQHandler+0x10>)
 80021ba:	f002 fe05 	bl	8004dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000294 	.word	0x20000294

080021c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021cc:	4802      	ldr	r0, [pc, #8]	@ (80021d8 <DMA2_Stream2_IRQHandler+0x10>)
 80021ce:	f001 f829 	bl	8003224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200002dc 	.word	0x200002dc

080021dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return 1;
 80021e0:	2301      	movs	r3, #1
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <_kill>:

int _kill(int pid, int sig)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021f6:	f004 feb1 	bl	8006f5c <__errno>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2216      	movs	r2, #22
 80021fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <_exit>:

void _exit (int status)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ffe7 	bl	80021ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800221e:	bf00      	nop
 8002220:	e7fd      	b.n	800221e <_exit+0x12>

08002222 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	e00a      	b.n	800224a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002234:	f3af 8000 	nop.w
 8002238:	4601      	mov	r1, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	60ba      	str	r2, [r7, #8]
 8002240:	b2ca      	uxtb	r2, r1
 8002242:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	3301      	adds	r3, #1
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	429a      	cmp	r2, r3
 8002250:	dbf0      	blt.n	8002234 <_read+0x12>
  }

  return len;
 8002252:	687b      	ldr	r3, [r7, #4]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e009      	b.n	8002282 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	60ba      	str	r2, [r7, #8]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3301      	adds	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	429a      	cmp	r2, r3
 8002288:	dbf1      	blt.n	800226e <_write+0x12>
  }
  return len;
 800228a:	687b      	ldr	r3, [r7, #4]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <_close>:

int _close(int file)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800229c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022bc:	605a      	str	r2, [r3, #4]
  return 0;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_isatty>:

int _isatty(int file)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022d4:	2301      	movs	r3, #1
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002304:	4a14      	ldr	r2, [pc, #80]	@ (8002358 <_sbrk+0x5c>)
 8002306:	4b15      	ldr	r3, [pc, #84]	@ (800235c <_sbrk+0x60>)
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002310:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <_sbrk+0x64>)
 800231a:	4a12      	ldr	r2, [pc, #72]	@ (8002364 <_sbrk+0x68>)
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231e:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <_sbrk+0x64>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	429a      	cmp	r2, r3
 800232a:	d207      	bcs.n	800233c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800232c:	f004 fe16 	bl	8006f5c <__errno>
 8002330:	4603      	mov	r3, r0
 8002332:	220c      	movs	r2, #12
 8002334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	e009      	b.n	8002350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <_sbrk+0x64>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002342:	4b07      	ldr	r3, [pc, #28]	@ (8002360 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <_sbrk+0x64>)
 800234c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234e:	68fb      	ldr	r3, [r7, #12]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20010000 	.word	0x20010000
 800235c:	00000400 	.word	0x00000400
 8002360:	200006a4 	.word	0x200006a4
 8002364:	200007f8 	.word	0x200007f8

08002368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <SystemInit+0x20>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002372:	4a05      	ldr	r2, [pc, #20]	@ (8002388 <SystemInit+0x20>)
 8002374:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002378:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800238c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002390:	f7ff ffea 	bl	8002368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002394:	480c      	ldr	r0, [pc, #48]	@ (80023c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002396:	490d      	ldr	r1, [pc, #52]	@ (80023cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002398:	4a0d      	ldr	r2, [pc, #52]	@ (80023d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800239c:	e002      	b.n	80023a4 <LoopCopyDataInit>

0800239e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a2:	3304      	adds	r3, #4

080023a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a8:	d3f9      	bcc.n	800239e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023aa:	4a0a      	ldr	r2, [pc, #40]	@ (80023d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023ac:	4c0a      	ldr	r4, [pc, #40]	@ (80023d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b0:	e001      	b.n	80023b6 <LoopFillZerobss>

080023b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b4:	3204      	adds	r2, #4

080023b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b8:	d3fb      	bcc.n	80023b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ba:	f004 fdd5 	bl	8006f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023be:	f7ff fafb 	bl	80019b8 <main>
  bx  lr    
 80023c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80023c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023cc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80023d0:	0800af18 	.word	0x0800af18
  ldr r2, =_sbss
 80023d4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80023d8:	200007f8 	.word	0x200007f8

080023dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023dc:	e7fe      	b.n	80023dc <ADC_IRQHandler>
	...

080023e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_Init+0x40>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002420 <HAL_Init+0x40>)
 80023ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_Init+0x40>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <HAL_Init+0x40>)
 80023f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023fc:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <HAL_Init+0x40>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a07      	ldr	r2, [pc, #28]	@ (8002420 <HAL_Init+0x40>)
 8002402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002406:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002408:	2003      	movs	r0, #3
 800240a:	f000 fd31 	bl	8002e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800240e:	200f      	movs	r0, #15
 8002410:	f000 f808 	bl	8002424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002414:	f7ff fd7e 	bl	8001f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023c00 	.word	0x40023c00

08002424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800242c:	4b12      	ldr	r3, [pc, #72]	@ (8002478 <HAL_InitTick+0x54>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b12      	ldr	r3, [pc, #72]	@ (800247c <HAL_InitTick+0x58>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800243a:	fbb3 f3f1 	udiv	r3, r3, r1
 800243e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fd49 	bl	8002eda <HAL_SYSTICK_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e00e      	b.n	8002470 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b0f      	cmp	r3, #15
 8002456:	d80a      	bhi.n	800246e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002458:	2200      	movs	r2, #0
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
 8002460:	f000 fd11 	bl	8002e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002464:	4a06      	ldr	r2, [pc, #24]	@ (8002480 <HAL_InitTick+0x5c>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	e000      	b.n	8002470 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20000010 	.word	0x20000010
 800247c:	20000018 	.word	0x20000018
 8002480:	20000014 	.word	0x20000014

08002484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002488:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_IncTick+0x20>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_IncTick+0x24>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4413      	add	r3, r2
 8002494:	4a04      	ldr	r2, [pc, #16]	@ (80024a8 <HAL_IncTick+0x24>)
 8002496:	6013      	str	r3, [r2, #0]
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000018 	.word	0x20000018
 80024a8:	200006a8 	.word	0x200006a8

080024ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return uwTick;
 80024b0:	4b03      	ldr	r3, [pc, #12]	@ (80024c0 <HAL_GetTick+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	200006a8 	.word	0x200006a8

080024c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024cc:	f7ff ffee 	bl	80024ac <HAL_GetTick>
 80024d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024dc:	d005      	beq.n	80024ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024de:	4b0a      	ldr	r3, [pc, #40]	@ (8002508 <HAL_Delay+0x44>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024ea:	bf00      	nop
 80024ec:	f7ff ffde 	bl	80024ac <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d8f7      	bhi.n	80024ec <HAL_Delay+0x28>
  {
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000018 	.word	0x20000018

0800250c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e033      	b.n	800258a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff fd1a 	bl	8001f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b00      	cmp	r3, #0
 8002548:	d118      	bne.n	800257c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002552:	f023 0302 	bic.w	r3, r3, #2
 8002556:	f043 0202 	orr.w	r2, r3, #2
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 faba 	bl	8002ad8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f023 0303 	bic.w	r3, r3, #3
 8002572:	f043 0201 	orr.w	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	@ 0x40
 800257a:	e001      	b.n	8002580 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_Start+0x1a>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e097      	b.n	80026de <HAL_ADC_Start+0x14a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d018      	beq.n	80025f6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025d4:	4b45      	ldr	r3, [pc, #276]	@ (80026ec <HAL_ADC_Start+0x158>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a45      	ldr	r2, [pc, #276]	@ (80026f0 <HAL_ADC_Start+0x15c>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0c9a      	lsrs	r2, r3, #18
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80025e8:	e002      	b.n	80025f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f9      	bne.n	80025ea <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d15f      	bne.n	80026c4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800260c:	f023 0301 	bic.w	r3, r3, #1
 8002610:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800262e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800263e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002642:	d106      	bne.n	8002652 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002648:	f023 0206 	bic.w	r2, r3, #6
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002650:	e002      	b.n	8002658 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002660:	4b24      	ldr	r3, [pc, #144]	@ (80026f4 <HAL_ADC_Start+0x160>)
 8002662:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800266c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10f      	bne.n	800269a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d129      	bne.n	80026dc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	e020      	b.n	80026dc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a16      	ldr	r2, [pc, #88]	@ (80026f8 <HAL_ADC_Start+0x164>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d11b      	bne.n	80026dc <HAL_ADC_Start+0x148>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d114      	bne.n	80026dc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	e00b      	b.n	80026dc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	f043 0210 	orr.w	r2, r3, #16
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20000010 	.word	0x20000010
 80026f0:	431bde83 	.word	0x431bde83
 80026f4:	40012300 	.word	0x40012300
 80026f8:	40012000 	.word	0x40012000

080026fc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_ADC_Stop+0x16>
 800270e:	2302      	movs	r3, #2
 8002710:	e021      	b.n	8002756 <HAL_ADC_Stop+0x5a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	f043 0201 	orr.w	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800277e:	d113      	bne.n	80027a8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800278a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800278e:	d10b      	bne.n	80027a8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e063      	b.n	8002870 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80027a8:	f7ff fe80 	bl	80024ac <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027ae:	e021      	b.n	80027f4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b6:	d01d      	beq.n	80027f4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <HAL_ADC_PollForConversion+0x6c>
 80027be:	f7ff fe75 	bl	80024ac <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d212      	bcs.n	80027f4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d00b      	beq.n	80027f4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	f043 0204 	orr.w	r2, r3, #4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e03d      	b.n	8002870 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d1d6      	bne.n	80027b0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f06f 0212 	mvn.w	r2, #18
 800280a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d123      	bne.n	800286e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800282a:	2b00      	cmp	r3, #0
 800282c:	d11f      	bne.n	800286e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002834:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002838:	2b00      	cmp	r3, #0
 800283a:	d006      	beq.n	800284a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002846:	2b00      	cmp	r3, #0
 8002848:	d111      	bne.n	800286e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x1c>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e105      	b.n	8002abc <HAL_ADC_ConfigChannel+0x228>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b09      	cmp	r3, #9
 80028be:	d925      	bls.n	800290c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68d9      	ldr	r1, [r3, #12]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	3b1e      	subs	r3, #30
 80028d6:	2207      	movs	r2, #7
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43da      	mvns	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	400a      	ands	r2, r1
 80028e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68d9      	ldr	r1, [r3, #12]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	4618      	mov	r0, r3
 80028f8:	4603      	mov	r3, r0
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4403      	add	r3, r0
 80028fe:	3b1e      	subs	r3, #30
 8002900:	409a      	lsls	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	e022      	b.n	8002952 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6919      	ldr	r1, [r3, #16]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	b29b      	uxth	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	2207      	movs	r2, #7
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43da      	mvns	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	400a      	ands	r2, r1
 800292e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6919      	ldr	r1, [r3, #16]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	4618      	mov	r0, r3
 8002942:	4603      	mov	r3, r0
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4403      	add	r3, r0
 8002948:	409a      	lsls	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b06      	cmp	r3, #6
 8002958:	d824      	bhi.n	80029a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	3b05      	subs	r3, #5
 800296c:	221f      	movs	r2, #31
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	400a      	ands	r2, r1
 800297a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	4618      	mov	r0, r3
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	3b05      	subs	r3, #5
 8002996:	fa00 f203 	lsl.w	r2, r0, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80029a2:	e04c      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b0c      	cmp	r3, #12
 80029aa:	d824      	bhi.n	80029f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	3b23      	subs	r3, #35	@ 0x23
 80029be:	221f      	movs	r2, #31
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43da      	mvns	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	400a      	ands	r2, r1
 80029cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	4618      	mov	r0, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	3b23      	subs	r3, #35	@ 0x23
 80029e8:	fa00 f203 	lsl.w	r2, r0, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80029f4:	e023      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	3b41      	subs	r3, #65	@ 0x41
 8002a08:	221f      	movs	r2, #31
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	400a      	ands	r2, r1
 8002a16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	4618      	mov	r0, r3
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	3b41      	subs	r3, #65	@ 0x41
 8002a32:	fa00 f203 	lsl.w	r2, r0, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a3e:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x234>)
 8002a40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a21      	ldr	r2, [pc, #132]	@ (8002acc <HAL_ADC_ConfigChannel+0x238>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d109      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x1cc>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b12      	cmp	r3, #18
 8002a52:	d105      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a19      	ldr	r2, [pc, #100]	@ (8002acc <HAL_ADC_ConfigChannel+0x238>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d123      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x21e>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d003      	beq.n	8002a7a <HAL_ADC_ConfigChannel+0x1e6>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b11      	cmp	r3, #17
 8002a78:	d11b      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b10      	cmp	r3, #16
 8002a8c:	d111      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x23c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a10      	ldr	r2, [pc, #64]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x240>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	0c9a      	lsrs	r2, r3, #18
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002aa4:	e002      	b.n	8002aac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f9      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	40012300 	.word	0x40012300
 8002acc:	40012000 	.word	0x40012000
 8002ad0:	20000010 	.word	0x20000010
 8002ad4:	431bde83 	.word	0x431bde83

08002ad8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae0:	4b79      	ldr	r3, [pc, #484]	@ (8002cc8 <ADC_Init+0x1f0>)
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	021a      	lsls	r2, r3, #8
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002b30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6899      	ldr	r1, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6a:	4a58      	ldr	r2, [pc, #352]	@ (8002ccc <ADC_Init+0x1f4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d022      	beq.n	8002bb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6899      	ldr	r1, [r3, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6899      	ldr	r1, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	e00f      	b.n	8002bd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002bd4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0202 	bic.w	r2, r2, #2
 8002be4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6899      	ldr	r1, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7e1b      	ldrb	r3, [r3, #24]
 8002bf0:	005a      	lsls	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01b      	beq.n	8002c3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c12:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002c22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6859      	ldr	r1, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	035a      	lsls	r2, r3, #13
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	e007      	b.n	8002c4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c4a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	051a      	lsls	r2, r3, #20
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6899      	ldr	r1, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c8e:	025a      	lsls	r2, r3, #9
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6899      	ldr	r1, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	029a      	lsls	r2, r3, #10
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	609a      	str	r2, [r3, #8]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40012300 	.word	0x40012300
 8002ccc:	0f000001 	.word	0x0f000001

08002cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cec:	4013      	ands	r3, r2
 8002cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d02:	4a04      	ldr	r2, [pc, #16]	@ (8002d14 <__NVIC_SetPriorityGrouping+0x44>)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	60d3      	str	r3, [r2, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d1c:	4b04      	ldr	r3, [pc, #16]	@ (8002d30 <__NVIC_GetPriorityGrouping+0x18>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	f003 0307 	and.w	r3, r3, #7
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	db0b      	blt.n	8002d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	f003 021f 	and.w	r2, r3, #31
 8002d4c:	4907      	ldr	r1, [pc, #28]	@ (8002d6c <__NVIC_EnableIRQ+0x38>)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	2001      	movs	r0, #1
 8002d56:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000e100 	.word	0xe000e100

08002d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	6039      	str	r1, [r7, #0]
 8002d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	db0a      	blt.n	8002d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	490c      	ldr	r1, [pc, #48]	@ (8002dbc <__NVIC_SetPriority+0x4c>)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	0112      	lsls	r2, r2, #4
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	440b      	add	r3, r1
 8002d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d98:	e00a      	b.n	8002db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4908      	ldr	r1, [pc, #32]	@ (8002dc0 <__NVIC_SetPriority+0x50>)
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	3b04      	subs	r3, #4
 8002da8:	0112      	lsls	r2, r2, #4
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	440b      	add	r3, r1
 8002dae:	761a      	strb	r2, [r3, #24]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000e100 	.word	0xe000e100
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b089      	sub	sp, #36	@ 0x24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f1c3 0307 	rsb	r3, r3, #7
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	bf28      	it	cs
 8002de2:	2304      	movcs	r3, #4
 8002de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3304      	adds	r3, #4
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	d902      	bls.n	8002df4 <NVIC_EncodePriority+0x30>
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3b03      	subs	r3, #3
 8002df2:	e000      	b.n	8002df6 <NVIC_EncodePriority+0x32>
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43da      	mvns	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	401a      	ands	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	43d9      	mvns	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	4313      	orrs	r3, r2
         );
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3724      	adds	r7, #36	@ 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e3c:	d301      	bcc.n	8002e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e00f      	b.n	8002e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e42:	4a0a      	ldr	r2, [pc, #40]	@ (8002e6c <SysTick_Config+0x40>)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e4a:	210f      	movs	r1, #15
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	f7ff ff8e 	bl	8002d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e54:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <SysTick_Config+0x40>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e5a:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <SysTick_Config+0x40>)
 8002e5c:	2207      	movs	r2, #7
 8002e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	e000e010 	.word	0xe000e010

08002e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff ff29 	bl	8002cd0 <__NVIC_SetPriorityGrouping>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b086      	sub	sp, #24
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e98:	f7ff ff3e 	bl	8002d18 <__NVIC_GetPriorityGrouping>
 8002e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	6978      	ldr	r0, [r7, #20]
 8002ea4:	f7ff ff8e 	bl	8002dc4 <NVIC_EncodePriority>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ff5d 	bl	8002d70 <__NVIC_SetPriority>
}
 8002eb6:	bf00      	nop
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ff31 	bl	8002d34 <__NVIC_EnableIRQ>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff ffa2 	bl	8002e2c <SysTick_Config>
 8002ee8:	4603      	mov	r3, r0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f00:	f7ff fad4 	bl	80024ac <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e099      	b.n	8003044 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f30:	e00f      	b.n	8002f52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f32:	f7ff fabb 	bl	80024ac <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b05      	cmp	r3, #5
 8002f3e:	d908      	bls.n	8002f52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2203      	movs	r2, #3
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e078      	b.n	8003044 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e8      	bne.n	8002f32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4b38      	ldr	r3, [pc, #224]	@ (800304c <HAL_DMA_Init+0x158>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d107      	bne.n	8002fbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f023 0307 	bic.w	r3, r3, #7
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d117      	bne.n	8003016 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00e      	beq.n	8003016 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fb01 	bl	8003600 <DMA_CheckFifoParam>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2240      	movs	r2, #64	@ 0x40
 8003008:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003012:	2301      	movs	r3, #1
 8003014:	e016      	b.n	8003044 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fab8 	bl	8003594 <DMA_CalcBaseAndBitshift>
 8003024:	4603      	mov	r3, r0
 8003026:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302c:	223f      	movs	r2, #63	@ 0x3f
 800302e:	409a      	lsls	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	f010803f 	.word	0xf010803f

08003050 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003066:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_DMA_Start_IT+0x26>
 8003072:	2302      	movs	r3, #2
 8003074:	e040      	b.n	80030f8 <HAL_DMA_Start_IT+0xa8>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b01      	cmp	r3, #1
 8003088:	d12f      	bne.n	80030ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2202      	movs	r2, #2
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fa4a 	bl	8003538 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a8:	223f      	movs	r2, #63	@ 0x3f
 80030aa:	409a      	lsls	r2, r3
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0216 	orr.w	r2, r2, #22
 80030be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0208 	orr.w	r2, r2, #8
 80030d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	e005      	b.n	80030f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030f2:	2302      	movs	r3, #2
 80030f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800310e:	f7ff f9cd 	bl	80024ac <HAL_GetTick>
 8003112:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d008      	beq.n	8003132 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2280      	movs	r2, #128	@ 0x80
 8003124:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e052      	b.n	80031d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0216 	bic.w	r2, r2, #22
 8003140:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003150:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <HAL_DMA_Abort+0x62>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0208 	bic.w	r2, r2, #8
 8003170:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003182:	e013      	b.n	80031ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003184:	f7ff f992 	bl	80024ac <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b05      	cmp	r3, #5
 8003190:	d90c      	bls.n	80031ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2220      	movs	r2, #32
 8003196:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2203      	movs	r2, #3
 800319c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e015      	b.n	80031d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1e4      	bne.n	8003184 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031be:	223f      	movs	r2, #63	@ 0x3f
 80031c0:	409a      	lsls	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d004      	beq.n	80031fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e00c      	b.n	8003218 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2205      	movs	r2, #5
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003230:	4b8e      	ldr	r3, [pc, #568]	@ (800346c <HAL_DMA_IRQHandler+0x248>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a8e      	ldr	r2, [pc, #568]	@ (8003470 <HAL_DMA_IRQHandler+0x24c>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	0a9b      	lsrs	r3, r3, #10
 800323c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003242:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324e:	2208      	movs	r2, #8
 8003250:	409a      	lsls	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d01a      	beq.n	8003290 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0204 	bic.w	r2, r2, #4
 8003276:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327c:	2208      	movs	r2, #8
 800327e:	409a      	lsls	r2, r3
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003294:	2201      	movs	r2, #1
 8003296:	409a      	lsls	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d012      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b2:	2201      	movs	r2, #1
 80032b4:	409a      	lsls	r2, r3
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032be:	f043 0202 	orr.w	r2, r3, #2
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ca:	2204      	movs	r2, #4
 80032cc:	409a      	lsls	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d012      	beq.n	80032fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00b      	beq.n	80032fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e8:	2204      	movs	r2, #4
 80032ea:	409a      	lsls	r2, r3
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f4:	f043 0204 	orr.w	r2, r3, #4
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003300:	2210      	movs	r2, #16
 8003302:	409a      	lsls	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d043      	beq.n	8003394 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d03c      	beq.n	8003394 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331e:	2210      	movs	r2, #16
 8003320:	409a      	lsls	r2, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d018      	beq.n	8003366 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d108      	bne.n	8003354 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d024      	beq.n	8003394 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
 8003352:	e01f      	b.n	8003394 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01b      	beq.n	8003394 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4798      	blx	r3
 8003364:	e016      	b.n	8003394 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d107      	bne.n	8003384 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0208 	bic.w	r2, r2, #8
 8003382:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003398:	2220      	movs	r2, #32
 800339a:	409a      	lsls	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 808f 	beq.w	80034c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 8087 	beq.w	80034c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	2220      	movs	r2, #32
 80033bc:	409a      	lsls	r2, r3
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d136      	bne.n	800343c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0216 	bic.w	r2, r2, #22
 80033dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <HAL_DMA_IRQHandler+0x1da>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0208 	bic.w	r2, r2, #8
 800340c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003412:	223f      	movs	r2, #63	@ 0x3f
 8003414:	409a      	lsls	r2, r3
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342e:	2b00      	cmp	r3, #0
 8003430:	d07e      	beq.n	8003530 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
        }
        return;
 800343a:	e079      	b.n	8003530 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d01d      	beq.n	8003486 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10d      	bne.n	8003474 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345c:	2b00      	cmp	r3, #0
 800345e:	d031      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
 8003468:	e02c      	b.n	80034c4 <HAL_DMA_IRQHandler+0x2a0>
 800346a:	bf00      	nop
 800346c:	20000010 	.word	0x20000010
 8003470:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d023      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
 8003484:	e01e      	b.n	80034c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10f      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0210 	bic.w	r2, r2, #16
 80034a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d032      	beq.n	8003532 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d022      	beq.n	800351e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2205      	movs	r2, #5
 80034dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	3301      	adds	r3, #1
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d307      	bcc.n	800350c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f2      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x2cc>
 800350a:	e000      	b.n	800350e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800350c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	4798      	blx	r3
 800352e:	e000      	b.n	8003532 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003530:	bf00      	nop
    }
  }
}
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003554:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b40      	cmp	r3, #64	@ 0x40
 8003564:	d108      	bne.n	8003578 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003576:	e007      	b.n	8003588 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	60da      	str	r2, [r3, #12]
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	3b10      	subs	r3, #16
 80035a4:	4a14      	ldr	r2, [pc, #80]	@ (80035f8 <DMA_CalcBaseAndBitshift+0x64>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035ae:	4a13      	ldr	r2, [pc, #76]	@ (80035fc <DMA_CalcBaseAndBitshift+0x68>)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d909      	bls.n	80035d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035ca:	f023 0303 	bic.w	r3, r3, #3
 80035ce:	1d1a      	adds	r2, r3, #4
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80035d4:	e007      	b.n	80035e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035de:	f023 0303 	bic.w	r3, r3, #3
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	aaaaaaab 	.word	0xaaaaaaab
 80035fc:	0800aad0 	.word	0x0800aad0

08003600 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11f      	bne.n	800365a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d856      	bhi.n	80036ce <DMA_CheckFifoParam+0xce>
 8003620:	a201      	add	r2, pc, #4	@ (adr r2, 8003628 <DMA_CheckFifoParam+0x28>)
 8003622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003626:	bf00      	nop
 8003628:	08003639 	.word	0x08003639
 800362c:	0800364b 	.word	0x0800364b
 8003630:	08003639 	.word	0x08003639
 8003634:	080036cf 	.word	0x080036cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d046      	beq.n	80036d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003648:	e043      	b.n	80036d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003652:	d140      	bne.n	80036d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003658:	e03d      	b.n	80036d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003662:	d121      	bne.n	80036a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d837      	bhi.n	80036da <DMA_CheckFifoParam+0xda>
 800366a:	a201      	add	r2, pc, #4	@ (adr r2, 8003670 <DMA_CheckFifoParam+0x70>)
 800366c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003670:	08003681 	.word	0x08003681
 8003674:	08003687 	.word	0x08003687
 8003678:	08003681 	.word	0x08003681
 800367c:	08003699 	.word	0x08003699
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
      break;
 8003684:	e030      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d025      	beq.n	80036de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003696:	e022      	b.n	80036de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036a0:	d11f      	bne.n	80036e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036a6:	e01c      	b.n	80036e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d903      	bls.n	80036b6 <DMA_CheckFifoParam+0xb6>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d003      	beq.n	80036bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036b4:	e018      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
      break;
 80036ba:	e015      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00e      	beq.n	80036e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      break;
 80036cc:	e00b      	b.n	80036e6 <DMA_CheckFifoParam+0xe6>
      break;
 80036ce:	bf00      	nop
 80036d0:	e00a      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      break;
 80036d2:	bf00      	nop
 80036d4:	e008      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      break;
 80036d6:	bf00      	nop
 80036d8:	e006      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      break;
 80036da:	bf00      	nop
 80036dc:	e004      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      break;
 80036de:	bf00      	nop
 80036e0:	e002      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80036e2:	bf00      	nop
 80036e4:	e000      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      break;
 80036e6:	bf00      	nop
    }
  } 
  
  return status; 
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop

080036f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b089      	sub	sp, #36	@ 0x24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800370a:	2300      	movs	r3, #0
 800370c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	e159      	b.n	80039c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003714:	2201      	movs	r2, #1
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4013      	ands	r3, r2
 8003726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	429a      	cmp	r2, r3
 800372e:	f040 8148 	bne.w	80039c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b01      	cmp	r3, #1
 800373c:	d005      	beq.n	800374a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003746:	2b02      	cmp	r3, #2
 8003748:	d130      	bne.n	80037ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	2203      	movs	r2, #3
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4313      	orrs	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003780:	2201      	movs	r2, #1
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f003 0201 	and.w	r2, r3, #1
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d017      	beq.n	80037e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	2203      	movs	r2, #3
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d123      	bne.n	800383c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	08da      	lsrs	r2, r3, #3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3208      	adds	r2, #8
 80037fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003800:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	220f      	movs	r2, #15
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	08da      	lsrs	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3208      	adds	r2, #8
 8003836:	69b9      	ldr	r1, [r7, #24]
 8003838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	2203      	movs	r2, #3
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0203 	and.w	r2, r3, #3
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80a2 	beq.w	80039c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	4b57      	ldr	r3, [pc, #348]	@ (80039e0 <HAL_GPIO_Init+0x2e8>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003886:	4a56      	ldr	r2, [pc, #344]	@ (80039e0 <HAL_GPIO_Init+0x2e8>)
 8003888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800388c:	6453      	str	r3, [r2, #68]	@ 0x44
 800388e:	4b54      	ldr	r3, [pc, #336]	@ (80039e0 <HAL_GPIO_Init+0x2e8>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800389a:	4a52      	ldr	r2, [pc, #328]	@ (80039e4 <HAL_GPIO_Init+0x2ec>)
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	089b      	lsrs	r3, r3, #2
 80038a0:	3302      	adds	r3, #2
 80038a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	220f      	movs	r2, #15
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4013      	ands	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a49      	ldr	r2, [pc, #292]	@ (80039e8 <HAL_GPIO_Init+0x2f0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d019      	beq.n	80038fa <HAL_GPIO_Init+0x202>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a48      	ldr	r2, [pc, #288]	@ (80039ec <HAL_GPIO_Init+0x2f4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <HAL_GPIO_Init+0x1fe>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a47      	ldr	r2, [pc, #284]	@ (80039f0 <HAL_GPIO_Init+0x2f8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00d      	beq.n	80038f2 <HAL_GPIO_Init+0x1fa>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a46      	ldr	r2, [pc, #280]	@ (80039f4 <HAL_GPIO_Init+0x2fc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <HAL_GPIO_Init+0x1f6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a45      	ldr	r2, [pc, #276]	@ (80039f8 <HAL_GPIO_Init+0x300>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <HAL_GPIO_Init+0x1f2>
 80038e6:	2304      	movs	r3, #4
 80038e8:	e008      	b.n	80038fc <HAL_GPIO_Init+0x204>
 80038ea:	2307      	movs	r3, #7
 80038ec:	e006      	b.n	80038fc <HAL_GPIO_Init+0x204>
 80038ee:	2303      	movs	r3, #3
 80038f0:	e004      	b.n	80038fc <HAL_GPIO_Init+0x204>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e002      	b.n	80038fc <HAL_GPIO_Init+0x204>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_GPIO_Init+0x204>
 80038fa:	2300      	movs	r3, #0
 80038fc:	69fa      	ldr	r2, [r7, #28]
 80038fe:	f002 0203 	and.w	r2, r2, #3
 8003902:	0092      	lsls	r2, r2, #2
 8003904:	4093      	lsls	r3, r2
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800390c:	4935      	ldr	r1, [pc, #212]	@ (80039e4 <HAL_GPIO_Init+0x2ec>)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	3302      	adds	r3, #2
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800391a:	4b38      	ldr	r3, [pc, #224]	@ (80039fc <HAL_GPIO_Init+0x304>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800393e:	4a2f      	ldr	r2, [pc, #188]	@ (80039fc <HAL_GPIO_Init+0x304>)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003944:	4b2d      	ldr	r3, [pc, #180]	@ (80039fc <HAL_GPIO_Init+0x304>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003968:	4a24      	ldr	r2, [pc, #144]	@ (80039fc <HAL_GPIO_Init+0x304>)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800396e:	4b23      	ldr	r3, [pc, #140]	@ (80039fc <HAL_GPIO_Init+0x304>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003992:	4a1a      	ldr	r2, [pc, #104]	@ (80039fc <HAL_GPIO_Init+0x304>)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003998:	4b18      	ldr	r3, [pc, #96]	@ (80039fc <HAL_GPIO_Init+0x304>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039bc:	4a0f      	ldr	r2, [pc, #60]	@ (80039fc <HAL_GPIO_Init+0x304>)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3301      	adds	r3, #1
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	2b0f      	cmp	r3, #15
 80039cc:	f67f aea2 	bls.w	8003714 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	3724      	adds	r7, #36	@ 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40013800 	.word	0x40013800
 80039e8:	40020000 	.word	0x40020000
 80039ec:	40020400 	.word	0x40020400
 80039f0:	40020800 	.word	0x40020800
 80039f4:	40020c00 	.word	0x40020c00
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40013c00 	.word	0x40013c00

08003a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a10:	787b      	ldrb	r3, [r7, #1]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a16:	887a      	ldrh	r2, [r7, #2]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a1c:	e003      	b.n	8003a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a1e:	887b      	ldrh	r3, [r7, #2]
 8003a20:	041a      	lsls	r2, r3, #16
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	619a      	str	r2, [r3, #24]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e267      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d075      	beq.n	8003b3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a52:	4b88      	ldr	r3, [pc, #544]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d00c      	beq.n	8003a78 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a5e:	4b85      	ldr	r3, [pc, #532]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d112      	bne.n	8003a90 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6a:	4b82      	ldr	r3, [pc, #520]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a76:	d10b      	bne.n	8003a90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	4b7e      	ldr	r3, [pc, #504]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d05b      	beq.n	8003b3c <HAL_RCC_OscConfig+0x108>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d157      	bne.n	8003b3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e242      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a98:	d106      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x74>
 8003a9a:	4b76      	ldr	r3, [pc, #472]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a75      	ldr	r2, [pc, #468]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e01d      	b.n	8003ae4 <HAL_RCC_OscConfig+0xb0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ab0:	d10c      	bne.n	8003acc <HAL_RCC_OscConfig+0x98>
 8003ab2:	4b70      	ldr	r3, [pc, #448]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a6f      	ldr	r2, [pc, #444]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b6d      	ldr	r3, [pc, #436]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a6c      	ldr	r2, [pc, #432]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e00b      	b.n	8003ae4 <HAL_RCC_OscConfig+0xb0>
 8003acc:	4b69      	ldr	r3, [pc, #420]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a68      	ldr	r2, [pc, #416]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	4b66      	ldr	r3, [pc, #408]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a65      	ldr	r2, [pc, #404]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d013      	beq.n	8003b14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fe fcde 	bl	80024ac <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fe fcda 	bl	80024ac <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	@ 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e207      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	4b5b      	ldr	r3, [pc, #364]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0xc0>
 8003b12:	e014      	b.n	8003b3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b14:	f7fe fcca 	bl	80024ac <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b1c:	f7fe fcc6 	bl	80024ac <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	@ 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e1f3      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2e:	4b51      	ldr	r3, [pc, #324]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0xe8>
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d063      	beq.n	8003c12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b56:	4b47      	ldr	r3, [pc, #284]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d11c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b62:	4b44      	ldr	r3, [pc, #272]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d116      	bne.n	8003b9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6e:	4b41      	ldr	r3, [pc, #260]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_RCC_OscConfig+0x152>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d001      	beq.n	8003b86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e1c7      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b86:	4b3b      	ldr	r3, [pc, #236]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4937      	ldr	r1, [pc, #220]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9a:	e03a      	b.n	8003c12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba4:	4b34      	ldr	r3, [pc, #208]	@ (8003c78 <HAL_RCC_OscConfig+0x244>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fe fc7f 	bl	80024ac <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb2:	f7fe fc7b 	bl	80024ac <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e1a8      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd0:	4b28      	ldr	r3, [pc, #160]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4925      	ldr	r1, [pc, #148]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	600b      	str	r3, [r1, #0]
 8003be4:	e015      	b.n	8003c12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003be6:	4b24      	ldr	r3, [pc, #144]	@ (8003c78 <HAL_RCC_OscConfig+0x244>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fe fc5e 	bl	80024ac <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf4:	f7fe fc5a 	bl	80024ac <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e187      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c06:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d036      	beq.n	8003c8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d016      	beq.n	8003c54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c26:	4b15      	ldr	r3, [pc, #84]	@ (8003c7c <HAL_RCC_OscConfig+0x248>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fe fc3e 	bl	80024ac <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c34:	f7fe fc3a 	bl	80024ac <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e167      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c46:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x200>
 8003c52:	e01b      	b.n	8003c8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c54:	4b09      	ldr	r3, [pc, #36]	@ (8003c7c <HAL_RCC_OscConfig+0x248>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5a:	f7fe fc27 	bl	80024ac <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c60:	e00e      	b.n	8003c80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c62:	f7fe fc23 	bl	80024ac <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d907      	bls.n	8003c80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e150      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
 8003c74:	40023800 	.word	0x40023800
 8003c78:	42470000 	.word	0x42470000
 8003c7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	4b88      	ldr	r3, [pc, #544]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ea      	bne.n	8003c62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8097 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9e:	4b81      	ldr	r3, [pc, #516]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10f      	bne.n	8003cca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	4b7d      	ldr	r3, [pc, #500]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cba:	4b7a      	ldr	r3, [pc, #488]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cca:	4b77      	ldr	r3, [pc, #476]	@ (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d118      	bne.n	8003d08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd6:	4b74      	ldr	r3, [pc, #464]	@ (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a73      	ldr	r2, [pc, #460]	@ (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce2:	f7fe fbe3 	bl	80024ac <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cea:	f7fe fbdf 	bl	80024ac <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e10c      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfc:	4b6a      	ldr	r3, [pc, #424]	@ (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d106      	bne.n	8003d1e <HAL_RCC_OscConfig+0x2ea>
 8003d10:	4b64      	ldr	r3, [pc, #400]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d14:	4a63      	ldr	r2, [pc, #396]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d1c:	e01c      	b.n	8003d58 <HAL_RCC_OscConfig+0x324>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b05      	cmp	r3, #5
 8003d24:	d10c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x30c>
 8003d26:	4b5f      	ldr	r3, [pc, #380]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	f043 0304 	orr.w	r3, r3, #4
 8003d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d32:	4b5c      	ldr	r3, [pc, #368]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d36:	4a5b      	ldr	r2, [pc, #364]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d3e:	e00b      	b.n	8003d58 <HAL_RCC_OscConfig+0x324>
 8003d40:	4b58      	ldr	r3, [pc, #352]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d44:	4a57      	ldr	r2, [pc, #348]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d4c:	4b55      	ldr	r3, [pc, #340]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d50:	4a54      	ldr	r2, [pc, #336]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d52:	f023 0304 	bic.w	r3, r3, #4
 8003d56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d015      	beq.n	8003d8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d60:	f7fe fba4 	bl	80024ac <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d68:	f7fe fba0 	bl	80024ac <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e0cb      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7e:	4b49      	ldr	r3, [pc, #292]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0ee      	beq.n	8003d68 <HAL_RCC_OscConfig+0x334>
 8003d8a:	e014      	b.n	8003db6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d8c:	f7fe fb8e 	bl	80024ac <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d94:	f7fe fb8a 	bl	80024ac <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e0b5      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003daa:	4b3e      	ldr	r3, [pc, #248]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1ee      	bne.n	8003d94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d105      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dbc:	4b39      	ldr	r3, [pc, #228]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	4a38      	ldr	r2, [pc, #224]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80a1 	beq.w	8003f14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dd2:	4b34      	ldr	r3, [pc, #208]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d05c      	beq.n	8003e98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d141      	bne.n	8003e6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de6:	4b31      	ldr	r3, [pc, #196]	@ (8003eac <HAL_RCC_OscConfig+0x478>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fe fb5e 	bl	80024ac <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df4:	f7fe fb5a 	bl	80024ac <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e087      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e06:	4b27      	ldr	r3, [pc, #156]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	019b      	lsls	r3, r3, #6
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	041b      	lsls	r3, r3, #16
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e34:	061b      	lsls	r3, r3, #24
 8003e36:	491b      	ldr	r1, [pc, #108]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003eac <HAL_RCC_OscConfig+0x478>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e42:	f7fe fb33 	bl	80024ac <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4a:	f7fe fb2f 	bl	80024ac <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e05c      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x416>
 8003e68:	e054      	b.n	8003f14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6a:	4b10      	ldr	r3, [pc, #64]	@ (8003eac <HAL_RCC_OscConfig+0x478>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7fe fb1c 	bl	80024ac <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e78:	f7fe fb18 	bl	80024ac <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e045      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x444>
 8003e96:	e03d      	b.n	8003f14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e038      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f20 <HAL_RCC_OscConfig+0x4ec>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d028      	beq.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d121      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d11a      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ee6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d111      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef6:	085b      	lsrs	r3, r3, #1
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d107      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800

08003f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0cc      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f38:	4b68      	ldr	r3, [pc, #416]	@ (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d90c      	bls.n	8003f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b65      	ldr	r3, [pc, #404]	@ (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4e:	4b63      	ldr	r3, [pc, #396]	@ (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0b8      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d020      	beq.n	8003fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f78:	4b59      	ldr	r3, [pc, #356]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4a58      	ldr	r2, [pc, #352]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f90:	4b53      	ldr	r3, [pc, #332]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4a52      	ldr	r2, [pc, #328]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f9c:	4b50      	ldr	r3, [pc, #320]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	494d      	ldr	r1, [pc, #308]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d044      	beq.n	8004044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d107      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	4b47      	ldr	r3, [pc, #284]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d119      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e07f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe2:	4b3f      	ldr	r3, [pc, #252]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e06f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e067      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004002:	4b37      	ldr	r3, [pc, #220]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f023 0203 	bic.w	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4934      	ldr	r1, [pc, #208]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	4313      	orrs	r3, r2
 8004012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004014:	f7fe fa4a 	bl	80024ac <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401a:	e00a      	b.n	8004032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401c:	f7fe fa46 	bl	80024ac <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e04f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004032:	4b2b      	ldr	r3, [pc, #172]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 020c 	and.w	r2, r3, #12
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	429a      	cmp	r2, r3
 8004042:	d1eb      	bne.n	800401c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004044:	4b25      	ldr	r3, [pc, #148]	@ (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d20c      	bcs.n	800406c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b22      	ldr	r3, [pc, #136]	@ (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b20      	ldr	r3, [pc, #128]	@ (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e032      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004078:	4b19      	ldr	r3, [pc, #100]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4916      	ldr	r1, [pc, #88]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004096:	4b12      	ldr	r3, [pc, #72]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	490e      	ldr	r1, [pc, #56]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040aa:	f000 f821 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80040ae:	4602      	mov	r2, r0
 80040b0:	4b0b      	ldr	r3, [pc, #44]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	490a      	ldr	r1, [pc, #40]	@ (80040e4 <HAL_RCC_ClockConfig+0x1c0>)
 80040bc:	5ccb      	ldrb	r3, [r1, r3]
 80040be:	fa22 f303 	lsr.w	r3, r2, r3
 80040c2:	4a09      	ldr	r2, [pc, #36]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040c6:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fe f9aa 	bl	8002424 <HAL_InitTick>

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40023c00 	.word	0x40023c00
 80040e0:	40023800 	.word	0x40023800
 80040e4:	0800aab8 	.word	0x0800aab8
 80040e8:	20000010 	.word	0x20000010
 80040ec:	20000014 	.word	0x20000014

080040f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f4:	b090      	sub	sp, #64	@ 0x40
 80040f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004108:	4b59      	ldr	r3, [pc, #356]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x180>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 030c 	and.w	r3, r3, #12
 8004110:	2b08      	cmp	r3, #8
 8004112:	d00d      	beq.n	8004130 <HAL_RCC_GetSysClockFreq+0x40>
 8004114:	2b08      	cmp	r3, #8
 8004116:	f200 80a1 	bhi.w	800425c <HAL_RCC_GetSysClockFreq+0x16c>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x34>
 800411e:	2b04      	cmp	r3, #4
 8004120:	d003      	beq.n	800412a <HAL_RCC_GetSysClockFreq+0x3a>
 8004122:	e09b      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004124:	4b53      	ldr	r3, [pc, #332]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x184>)
 8004126:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004128:	e09b      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800412a:	4b53      	ldr	r3, [pc, #332]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x188>)
 800412c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800412e:	e098      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004130:	4b4f      	ldr	r3, [pc, #316]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x180>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004138:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800413a:	4b4d      	ldr	r3, [pc, #308]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x180>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d028      	beq.n	8004198 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004146:	4b4a      	ldr	r3, [pc, #296]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x180>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	099b      	lsrs	r3, r3, #6
 800414c:	2200      	movs	r2, #0
 800414e:	623b      	str	r3, [r7, #32]
 8004150:	627a      	str	r2, [r7, #36]	@ 0x24
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004158:	2100      	movs	r1, #0
 800415a:	4b47      	ldr	r3, [pc, #284]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x188>)
 800415c:	fb03 f201 	mul.w	r2, r3, r1
 8004160:	2300      	movs	r3, #0
 8004162:	fb00 f303 	mul.w	r3, r0, r3
 8004166:	4413      	add	r3, r2
 8004168:	4a43      	ldr	r2, [pc, #268]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x188>)
 800416a:	fba0 1202 	umull	r1, r2, r0, r2
 800416e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004170:	460a      	mov	r2, r1
 8004172:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004174:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004176:	4413      	add	r3, r2
 8004178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800417a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417c:	2200      	movs	r2, #0
 800417e:	61bb      	str	r3, [r7, #24]
 8004180:	61fa      	str	r2, [r7, #28]
 8004182:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004186:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800418a:	f7fc fea3 	bl	8000ed4 <__aeabi_uldivmod>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4613      	mov	r3, r2
 8004194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004196:	e053      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004198:	4b35      	ldr	r3, [pc, #212]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x180>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	099b      	lsrs	r3, r3, #6
 800419e:	2200      	movs	r2, #0
 80041a0:	613b      	str	r3, [r7, #16]
 80041a2:	617a      	str	r2, [r7, #20]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041aa:	f04f 0b00 	mov.w	fp, #0
 80041ae:	4652      	mov	r2, sl
 80041b0:	465b      	mov	r3, fp
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f04f 0100 	mov.w	r1, #0
 80041ba:	0159      	lsls	r1, r3, #5
 80041bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041c0:	0150      	lsls	r0, r2, #5
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	ebb2 080a 	subs.w	r8, r2, sl
 80041ca:	eb63 090b 	sbc.w	r9, r3, fp
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041e2:	ebb2 0408 	subs.w	r4, r2, r8
 80041e6:	eb63 0509 	sbc.w	r5, r3, r9
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	00eb      	lsls	r3, r5, #3
 80041f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f8:	00e2      	lsls	r2, r4, #3
 80041fa:	4614      	mov	r4, r2
 80041fc:	461d      	mov	r5, r3
 80041fe:	eb14 030a 	adds.w	r3, r4, sl
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	eb45 030b 	adc.w	r3, r5, fp
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004216:	4629      	mov	r1, r5
 8004218:	028b      	lsls	r3, r1, #10
 800421a:	4621      	mov	r1, r4
 800421c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004220:	4621      	mov	r1, r4
 8004222:	028a      	lsls	r2, r1, #10
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800422a:	2200      	movs	r2, #0
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	60fa      	str	r2, [r7, #12]
 8004230:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004234:	f7fc fe4e 	bl	8000ed4 <__aeabi_uldivmod>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4613      	mov	r3, r2
 800423e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004240:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x180>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	3301      	adds	r3, #1
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004250:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004254:	fbb2 f3f3 	udiv	r3, r2, r3
 8004258:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800425a:	e002      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800425c:	4b05      	ldr	r3, [pc, #20]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x184>)
 800425e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004264:	4618      	mov	r0, r3
 8004266:	3740      	adds	r7, #64	@ 0x40
 8004268:	46bd      	mov	sp, r7
 800426a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800
 8004274:	00f42400 	.word	0x00f42400
 8004278:	017d7840 	.word	0x017d7840

0800427c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004280:	4b03      	ldr	r3, [pc, #12]	@ (8004290 <HAL_RCC_GetHCLKFreq+0x14>)
 8004282:	681b      	ldr	r3, [r3, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000010 	.word	0x20000010

08004294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004298:	f7ff fff0 	bl	800427c <HAL_RCC_GetHCLKFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	4b05      	ldr	r3, [pc, #20]	@ (80042b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	0a9b      	lsrs	r3, r3, #10
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4903      	ldr	r1, [pc, #12]	@ (80042b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042aa:	5ccb      	ldrb	r3, [r1, r3]
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40023800 	.word	0x40023800
 80042b8:	0800aac8 	.word	0x0800aac8

080042bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042c0:	f7ff ffdc 	bl	800427c <HAL_RCC_GetHCLKFreq>
 80042c4:	4602      	mov	r2, r0
 80042c6:	4b05      	ldr	r3, [pc, #20]	@ (80042dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	0b5b      	lsrs	r3, r3, #13
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	4903      	ldr	r1, [pc, #12]	@ (80042e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042d2:	5ccb      	ldrb	r3, [r1, r3]
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d8:	4618      	mov	r0, r3
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40023800 	.word	0x40023800
 80042e0:	0800aac8 	.word	0x0800aac8

080042e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e041      	b.n	800437a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fd fe6e 	bl	8001fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f000 fa70 	bl	8004808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	d001      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e044      	b.n	8004426 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004434 <HAL_TIM_Base_Start_IT+0xb0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d018      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x6c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043c6:	d013      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x6c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004438 <HAL_TIM_Base_Start_IT+0xb4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00e      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x6c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a19      	ldr	r2, [pc, #100]	@ (800443c <HAL_TIM_Base_Start_IT+0xb8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d009      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x6c>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a17      	ldr	r2, [pc, #92]	@ (8004440 <HAL_TIM_Base_Start_IT+0xbc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d004      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x6c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a16      	ldr	r2, [pc, #88]	@ (8004444 <HAL_TIM_Base_Start_IT+0xc0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d111      	bne.n	8004414 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b06      	cmp	r3, #6
 8004400:	d010      	beq.n	8004424 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 0201 	orr.w	r2, r2, #1
 8004410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004412:	e007      	b.n	8004424 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40010000 	.word	0x40010000
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40000c00 	.word	0x40000c00
 8004444:	40014000 	.word	0x40014000

08004448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d020      	beq.n	80044ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01b      	beq.n	80044ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0202 	mvn.w	r2, #2
 800447c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f999 	bl	80047ca <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f98b 	bl	80047b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f99c 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d020      	beq.n	80044f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01b      	beq.n	80044f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0204 	mvn.w	r2, #4
 80044c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f973 	bl	80047ca <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f965 	bl	80047b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f976 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d020      	beq.n	8004544 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01b      	beq.n	8004544 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0208 	mvn.w	r2, #8
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2204      	movs	r2, #4
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f94d 	bl	80047ca <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f93f 	bl	80047b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f950 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b00      	cmp	r3, #0
 800454c:	d020      	beq.n	8004590 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01b      	beq.n	8004590 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0210 	mvn.w	r2, #16
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2208      	movs	r2, #8
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f927 	bl	80047ca <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f919 	bl	80047b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f92a 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00c      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0201 	mvn.w	r2, #1
 80045ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fd f9b8 	bl	8001924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00c      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fab6 	bl	8004b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00c      	beq.n	80045fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f8fb 	bl	80047f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00c      	beq.n	8004620 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b00      	cmp	r3, #0
 800460e:	d007      	beq.n	8004620 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0220 	mvn.w	r2, #32
 8004618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fa88 	bl	8004b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_TIM_ConfigClockSource+0x1c>
 8004640:	2302      	movs	r3, #2
 8004642:	e0b4      	b.n	80047ae <HAL_TIM_ConfigClockSource+0x186>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800466a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800467c:	d03e      	beq.n	80046fc <HAL_TIM_ConfigClockSource+0xd4>
 800467e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004682:	f200 8087 	bhi.w	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 8004686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468a:	f000 8086 	beq.w	800479a <HAL_TIM_ConfigClockSource+0x172>
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004692:	d87f      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 8004694:	2b70      	cmp	r3, #112	@ 0x70
 8004696:	d01a      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0xa6>
 8004698:	2b70      	cmp	r3, #112	@ 0x70
 800469a:	d87b      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 800469c:	2b60      	cmp	r3, #96	@ 0x60
 800469e:	d050      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x11a>
 80046a0:	2b60      	cmp	r3, #96	@ 0x60
 80046a2:	d877      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 80046a4:	2b50      	cmp	r3, #80	@ 0x50
 80046a6:	d03c      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0xfa>
 80046a8:	2b50      	cmp	r3, #80	@ 0x50
 80046aa:	d873      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 80046ac:	2b40      	cmp	r3, #64	@ 0x40
 80046ae:	d058      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x13a>
 80046b0:	2b40      	cmp	r3, #64	@ 0x40
 80046b2:	d86f      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 80046b4:	2b30      	cmp	r3, #48	@ 0x30
 80046b6:	d064      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x15a>
 80046b8:	2b30      	cmp	r3, #48	@ 0x30
 80046ba:	d86b      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d060      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x15a>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d867      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d05c      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x15a>
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d05a      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x15a>
 80046cc:	e062      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046de:	f000 f999 	bl	8004a14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	609a      	str	r2, [r3, #8]
      break;
 80046fa:	e04f      	b.n	800479c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800470c:	f000 f982 	bl	8004a14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800471e:	609a      	str	r2, [r3, #8]
      break;
 8004720:	e03c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800472e:	461a      	mov	r2, r3
 8004730:	f000 f8f6 	bl	8004920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2150      	movs	r1, #80	@ 0x50
 800473a:	4618      	mov	r0, r3
 800473c:	f000 f94f 	bl	80049de <TIM_ITRx_SetConfig>
      break;
 8004740:	e02c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800474e:	461a      	mov	r2, r3
 8004750:	f000 f915 	bl	800497e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2160      	movs	r1, #96	@ 0x60
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f93f 	bl	80049de <TIM_ITRx_SetConfig>
      break;
 8004760:	e01c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800476e:	461a      	mov	r2, r3
 8004770:	f000 f8d6 	bl	8004920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2140      	movs	r1, #64	@ 0x40
 800477a:	4618      	mov	r0, r3
 800477c:	f000 f92f 	bl	80049de <TIM_ITRx_SetConfig>
      break;
 8004780:	e00c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4619      	mov	r1, r3
 800478c:	4610      	mov	r0, r2
 800478e:	f000 f926 	bl	80049de <TIM_ITRx_SetConfig>
      break;
 8004792:	e003      	b.n	800479c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
      break;
 8004798:	e000      	b.n	800479c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800479a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
	...

08004808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3a      	ldr	r2, [pc, #232]	@ (8004904 <TIM_Base_SetConfig+0xfc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00f      	beq.n	8004840 <TIM_Base_SetConfig+0x38>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004826:	d00b      	beq.n	8004840 <TIM_Base_SetConfig+0x38>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a37      	ldr	r2, [pc, #220]	@ (8004908 <TIM_Base_SetConfig+0x100>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d007      	beq.n	8004840 <TIM_Base_SetConfig+0x38>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a36      	ldr	r2, [pc, #216]	@ (800490c <TIM_Base_SetConfig+0x104>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_Base_SetConfig+0x38>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a35      	ldr	r2, [pc, #212]	@ (8004910 <TIM_Base_SetConfig+0x108>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d108      	bne.n	8004852 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2b      	ldr	r2, [pc, #172]	@ (8004904 <TIM_Base_SetConfig+0xfc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01b      	beq.n	8004892 <TIM_Base_SetConfig+0x8a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004860:	d017      	beq.n	8004892 <TIM_Base_SetConfig+0x8a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a28      	ldr	r2, [pc, #160]	@ (8004908 <TIM_Base_SetConfig+0x100>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <TIM_Base_SetConfig+0x8a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a27      	ldr	r2, [pc, #156]	@ (800490c <TIM_Base_SetConfig+0x104>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00f      	beq.n	8004892 <TIM_Base_SetConfig+0x8a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a26      	ldr	r2, [pc, #152]	@ (8004910 <TIM_Base_SetConfig+0x108>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00b      	beq.n	8004892 <TIM_Base_SetConfig+0x8a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a25      	ldr	r2, [pc, #148]	@ (8004914 <TIM_Base_SetConfig+0x10c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d007      	beq.n	8004892 <TIM_Base_SetConfig+0x8a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a24      	ldr	r2, [pc, #144]	@ (8004918 <TIM_Base_SetConfig+0x110>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d003      	beq.n	8004892 <TIM_Base_SetConfig+0x8a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a23      	ldr	r2, [pc, #140]	@ (800491c <TIM_Base_SetConfig+0x114>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d108      	bne.n	80048a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004904 <TIM_Base_SetConfig+0xfc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d103      	bne.n	80048d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d105      	bne.n	80048f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f023 0201 	bic.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	611a      	str	r2, [r3, #16]
  }
}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40010000 	.word	0x40010000
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40014000 	.word	0x40014000
 8004918:	40014400 	.word	0x40014400
 800491c:	40014800 	.word	0x40014800

08004920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0201 	bic.w	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800494a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f023 030a 	bic.w	r3, r3, #10
 800495c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	621a      	str	r2, [r3, #32]
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800497e:	b480      	push	{r7}
 8004980:	b087      	sub	sp, #28
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	f023 0210 	bic.w	r2, r3, #16
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	031b      	lsls	r3, r3, #12
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049de:	b480      	push	{r7}
 80049e0:	b085      	sub	sp, #20
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f043 0307 	orr.w	r3, r3, #7
 8004a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	609a      	str	r2, [r3, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	021a      	lsls	r2, r3, #8
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	609a      	str	r2, [r3, #8]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e050      	b.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d018      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab8:	d013      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a18      	ldr	r2, [pc, #96]	@ (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00e      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a16      	ldr	r2, [pc, #88]	@ (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d009      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a15      	ldr	r2, [pc, #84]	@ (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a13      	ldr	r2, [pc, #76]	@ (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d10c      	bne.n	8004afc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40010000 	.word	0x40010000
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40000800 	.word	0x40000800
 8004b28:	40000c00 	.word	0x40000c00
 8004b2c:	40014000 	.word	0x40014000

08004b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e042      	b.n	8004bf0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fd fa5c 	bl	800203c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2224      	movs	r2, #36	@ 0x24
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 ff85 	bl	8005aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	@ 0x28
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d175      	bne.n	8004d04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_UART_Transmit+0x2c>
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e06e      	b.n	8004d06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2221      	movs	r2, #33	@ 0x21
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c36:	f7fd fc39 	bl	80024ac <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	88fa      	ldrh	r2, [r7, #6]
 8004c46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c50:	d108      	bne.n	8004c64 <HAL_UART_Transmit+0x6c>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d104      	bne.n	8004c64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	e003      	b.n	8004c6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c6c:	e02e      	b.n	8004ccc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	2180      	movs	r1, #128	@ 0x80
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fc5d 	bl	8005538 <UART_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e03a      	b.n	8004d06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10b      	bne.n	8004cae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ca4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	3302      	adds	r3, #2
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	e007      	b.n	8004cbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	781a      	ldrb	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1cb      	bne.n	8004c6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2140      	movs	r1, #64	@ 0x40
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 fc29 	bl	8005538 <UART_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e006      	b.n	8004d06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	e000      	b.n	8004d06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d04:	2302      	movs	r3, #2
  }
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3720      	adds	r7, #32
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b08c      	sub	sp, #48	@ 0x30
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d14a      	bne.n	8004dbe <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e043      	b.n	8004dc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	461a      	mov	r2, r3
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 fc4e 	bl	80055ec <UART_Start_Receive_DMA>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004d56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d12c      	bne.n	8004db8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d125      	bne.n	8004db2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d66:	2300      	movs	r3, #0
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	617b      	str	r3, [r7, #20]
   return(result);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f043 0310 	orr.w	r3, r3, #16
 8004d92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d9c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6a39      	ldr	r1, [r7, #32]
 8004da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e5      	bne.n	8004d7c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004db0:	e002      	b.n	8004db8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004db8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004dbc:	e000      	b.n	8004dc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004dbe:	2302      	movs	r3, #2
  }
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3730      	adds	r7, #48	@ 0x30
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b0ba      	sub	sp, #232	@ 0xe8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10f      	bne.n	8004e2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d009      	beq.n	8004e2e <HAL_UART_IRQHandler+0x66>
 8004e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fd81 	bl	800592e <UART_Receive_IT>
      return;
 8004e2c:	e25b      	b.n	80052e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 80de 	beq.w	8004ff4 <HAL_UART_IRQHandler+0x22c>
 8004e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80d1 	beq.w	8004ff4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <HAL_UART_IRQHandler+0xae>
 8004e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6e:	f043 0201 	orr.w	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00b      	beq.n	8004e9a <HAL_UART_IRQHandler+0xd2>
 8004e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e92:	f043 0202 	orr.w	r2, r3, #2
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00b      	beq.n	8004ebe <HAL_UART_IRQHandler+0xf6>
 8004ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb6:	f043 0204 	orr.w	r2, r3, #4
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d011      	beq.n	8004eee <HAL_UART_IRQHandler+0x126>
 8004eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d105      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee6:	f043 0208 	orr.w	r2, r3, #8
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 81f2 	beq.w	80052dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <HAL_UART_IRQHandler+0x14e>
 8004f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fd0c 	bl	800592e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f20:	2b40      	cmp	r3, #64	@ 0x40
 8004f22:	bf0c      	ite	eq
 8004f24:	2301      	moveq	r3, #1
 8004f26:	2300      	movne	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <HAL_UART_IRQHandler+0x17a>
 8004f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d04f      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fc14 	bl	8005770 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f52:	2b40      	cmp	r3, #64	@ 0x40
 8004f54:	d141      	bne.n	8004fda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3314      	adds	r3, #20
 8004f5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3314      	adds	r3, #20
 8004f7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1d9      	bne.n	8004f56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d013      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fae:	4a7e      	ldr	r2, [pc, #504]	@ (80051a8 <HAL_UART_IRQHandler+0x3e0>)
 8004fb0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fe f912 	bl	80031e0 <HAL_DMA_Abort_IT>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d016      	beq.n	8004ff0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004fcc:	4610      	mov	r0, r2
 8004fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd0:	e00e      	b.n	8004ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f9a8 	bl	8005328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd8:	e00a      	b.n	8004ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f9a4 	bl	8005328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe0:	e006      	b.n	8004ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f9a0 	bl	8005328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004fee:	e175      	b.n	80052dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff0:	bf00      	nop
    return;
 8004ff2:	e173      	b.n	80052dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	f040 814f 	bne.w	800529c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 8148 	beq.w	800529c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8141 	beq.w	800529c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503a:	2b40      	cmp	r3, #64	@ 0x40
 800503c:	f040 80b6 	bne.w	80051ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800504c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8145 	beq.w	80052e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800505a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800505e:	429a      	cmp	r2, r3
 8005060:	f080 813e 	bcs.w	80052e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800506a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005076:	f000 8088 	beq.w	800518a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	330c      	adds	r3, #12
 8005080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005090:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80050a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1d9      	bne.n	800507a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3314      	adds	r3, #20
 80050cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3314      	adds	r3, #20
 80050e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e1      	bne.n	80050c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3314      	adds	r3, #20
 8005108:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005118:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3314      	adds	r3, #20
 8005122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005126:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005128:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800512c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e3      	bne.n	8005102 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800515a:	f023 0310 	bic.w	r3, r3, #16
 800515e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800516c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800516e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005172:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005174:	e841 2300 	strex	r3, r2, [r1]
 8005178:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800517a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e3      	bne.n	8005148 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005184:	4618      	mov	r0, r3
 8005186:	f7fd ffbb 	bl	8003100 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2202      	movs	r2, #2
 800518e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005198:	b29b      	uxth	r3, r3
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	b29b      	uxth	r3, r3
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7fc fb87 	bl	80018b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051a6:	e09b      	b.n	80052e0 <HAL_UART_IRQHandler+0x518>
 80051a8:	08005837 	.word	0x08005837
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 808e 	beq.w	80052e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80051c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8089 	beq.w	80052e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	330c      	adds	r3, #12
 80051d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80051f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e3      	bne.n	80051d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3314      	adds	r3, #20
 8005210:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	623b      	str	r3, [r7, #32]
   return(result);
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	f023 0301 	bic.w	r3, r3, #1
 8005220:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3314      	adds	r3, #20
 800522a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800522e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005230:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e3      	bne.n	800520a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0310 	bic.w	r3, r3, #16
 8005266:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005274:	61fa      	str	r2, [r7, #28]
 8005276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	69b9      	ldr	r1, [r7, #24]
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	617b      	str	r3, [r7, #20]
   return(result);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e3      	bne.n	8005250 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800528e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7fc fb0d 	bl	80018b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800529a:	e023      	b.n	80052e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800529c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d009      	beq.n	80052bc <HAL_UART_IRQHandler+0x4f4>
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fad2 	bl	800585e <UART_Transmit_IT>
    return;
 80052ba:	e014      	b.n	80052e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00e      	beq.n	80052e6 <HAL_UART_IRQHandler+0x51e>
 80052c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fb12 	bl	80058fe <UART_EndTransmit_IT>
    return;
 80052da:	e004      	b.n	80052e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80052dc:	bf00      	nop
 80052de:	e002      	b.n	80052e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80052e0:	bf00      	nop
 80052e2:	e000      	b.n	80052e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80052e4:	bf00      	nop
  }
}
 80052e6:	37e8      	adds	r7, #232	@ 0xe8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b09c      	sub	sp, #112	@ 0x70
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005348:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005354:	2b00      	cmp	r3, #0
 8005356:	d172      	bne.n	800543e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800535a:	2200      	movs	r2, #0
 800535c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800535e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	330c      	adds	r3, #12
 8005364:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800536e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005374:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005376:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	330c      	adds	r3, #12
 800537c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800537e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005380:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005384:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800538c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e5      	bne.n	800535e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3314      	adds	r3, #20
 8005398:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80053aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3314      	adds	r3, #20
 80053b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80053b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80053b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e5      	bne.n	8005392 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3314      	adds	r3, #20
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	e853 3f00 	ldrex	r3, [r3]
 80053d4:	623b      	str	r3, [r7, #32]
   return(result);
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80053de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3314      	adds	r3, #20
 80053e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80053e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80053e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e5      	bne.n	80053c6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053fc:	2220      	movs	r2, #32
 80053fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005406:	2b01      	cmp	r3, #1
 8005408:	d119      	bne.n	800543e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800540a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	330c      	adds	r3, #12
 8005410:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	60fb      	str	r3, [r7, #12]
   return(result);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f023 0310 	bic.w	r3, r3, #16
 8005420:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	330c      	adds	r3, #12
 8005428:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800542a:	61fa      	str	r2, [r7, #28]
 800542c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	69b9      	ldr	r1, [r7, #24]
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	617b      	str	r3, [r7, #20]
   return(result);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e5      	bne.n	800540a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800543e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005440:	2200      	movs	r2, #0
 8005442:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005448:	2b01      	cmp	r3, #1
 800544a:	d106      	bne.n	800545a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800544c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800544e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005450:	4619      	mov	r1, r3
 8005452:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005454:	f7fc fa2e 	bl	80018b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005458:	e002      	b.n	8005460 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800545a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800545c:	f7ff ff50 	bl	8005300 <HAL_UART_RxCpltCallback>
}
 8005460:	bf00      	nop
 8005462:	3770      	adds	r7, #112	@ 0x70
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005474:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005480:	2b01      	cmp	r3, #1
 8005482:	d108      	bne.n	8005496 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	b29b      	uxth	r3, r3
 800548c:	4619      	mov	r1, r3
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f7fc fa10 	bl	80018b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005494:	e002      	b.n	800549c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7ff ff3c 	bl	8005314 <HAL_UART_RxHalfCpltCallback>
}
 800549c:	bf00      	nop
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c0:	2b80      	cmp	r3, #128	@ 0x80
 80054c2:	bf0c      	ite	eq
 80054c4:	2301      	moveq	r3, #1
 80054c6:	2300      	movne	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b21      	cmp	r3, #33	@ 0x21
 80054d6:	d108      	bne.n	80054ea <UART_DMAError+0x46>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2200      	movs	r2, #0
 80054e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80054e4:	68b8      	ldr	r0, [r7, #8]
 80054e6:	f000 f91b 	bl	8005720 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f4:	2b40      	cmp	r3, #64	@ 0x40
 80054f6:	bf0c      	ite	eq
 80054f8:	2301      	moveq	r3, #1
 80054fa:	2300      	movne	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b22      	cmp	r3, #34	@ 0x22
 800550a:	d108      	bne.n	800551e <UART_DMAError+0x7a>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2200      	movs	r2, #0
 8005516:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005518:	68b8      	ldr	r0, [r7, #8]
 800551a:	f000 f929 	bl	8005770 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005522:	f043 0210 	orr.w	r2, r3, #16
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800552a:	68b8      	ldr	r0, [r7, #8]
 800552c:	f7ff fefc 	bl	8005328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005530:	bf00      	nop
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	4613      	mov	r3, r2
 8005546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005548:	e03b      	b.n	80055c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d037      	beq.n	80055c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005552:	f7fc ffab 	bl	80024ac <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	6a3a      	ldr	r2, [r7, #32]
 800555e:	429a      	cmp	r2, r3
 8005560:	d302      	bcc.n	8005568 <UART_WaitOnFlagUntilTimeout+0x30>
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e03a      	b.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	d023      	beq.n	80055c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b80      	cmp	r3, #128	@ 0x80
 800557e:	d020      	beq.n	80055c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b40      	cmp	r3, #64	@ 0x40
 8005584:	d01d      	beq.n	80055c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b08      	cmp	r3, #8
 8005592:	d116      	bne.n	80055c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f8e0 	bl	8005770 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2208      	movs	r2, #8
 80055b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e00f      	b.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4013      	ands	r3, r2
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	bf0c      	ite	eq
 80055d2:	2301      	moveq	r3, #1
 80055d4:	2300      	movne	r3, #0
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d0b4      	beq.n	800554a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b098      	sub	sp, #96	@ 0x60
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	88fa      	ldrh	r2, [r7, #6]
 8005604:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2222      	movs	r2, #34	@ 0x22
 8005610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005618:	4a3e      	ldr	r2, [pc, #248]	@ (8005714 <UART_Start_Receive_DMA+0x128>)
 800561a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005620:	4a3d      	ldr	r2, [pc, #244]	@ (8005718 <UART_Start_Receive_DMA+0x12c>)
 8005622:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005628:	4a3c      	ldr	r2, [pc, #240]	@ (800571c <UART_Start_Receive_DMA+0x130>)
 800562a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005630:	2200      	movs	r2, #0
 8005632:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005634:	f107 0308 	add.w	r3, r7, #8
 8005638:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3304      	adds	r3, #4
 8005644:	4619      	mov	r1, r3
 8005646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	f7fd fd00 	bl	8003050 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005650:	2300      	movs	r3, #0
 8005652:	613b      	str	r3, [r7, #16]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d019      	beq.n	80056a2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	330c      	adds	r3, #12
 8005674:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800567e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005684:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800568e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005690:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005694:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800569c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e5      	bne.n	800566e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3314      	adds	r3, #20
 80056a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3314      	adds	r3, #20
 80056c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056c2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80056c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80056c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e5      	bne.n	80056a2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3314      	adds	r3, #20
 80056dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	617b      	str	r3, [r7, #20]
   return(result);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3314      	adds	r3, #20
 80056f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80056f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80056f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	6a39      	ldr	r1, [r7, #32]
 80056fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	61fb      	str	r3, [r7, #28]
   return(result);
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e5      	bne.n	80056d6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3760      	adds	r7, #96	@ 0x60
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	0800533d 	.word	0x0800533d
 8005718:	08005469 	.word	0x08005469
 800571c:	080054a5 	.word	0x080054a5

08005720 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005720:	b480      	push	{r7}
 8005722:	b089      	sub	sp, #36	@ 0x24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	330c      	adds	r3, #12
 800572e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	e853 3f00 	ldrex	r3, [r3]
 8005736:	60bb      	str	r3, [r7, #8]
   return(result);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	330c      	adds	r3, #12
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	61ba      	str	r2, [r7, #24]
 800574a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6979      	ldr	r1, [r7, #20]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	613b      	str	r3, [r7, #16]
   return(result);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e5      	bne.n	8005728 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005764:	bf00      	nop
 8005766:	3724      	adds	r7, #36	@ 0x24
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005770:	b480      	push	{r7}
 8005772:	b095      	sub	sp, #84	@ 0x54
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	330c      	adds	r3, #12
 800577e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800578e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	330c      	adds	r3, #12
 8005796:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005798:	643a      	str	r2, [r7, #64]	@ 0x40
 800579a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800579e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e5      	bne.n	8005778 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3314      	adds	r3, #20
 80057b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f023 0301 	bic.w	r3, r3, #1
 80057c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3314      	adds	r3, #20
 80057ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e5      	bne.n	80057ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d119      	bne.n	800581c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	330c      	adds	r3, #12
 80057ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f023 0310 	bic.w	r3, r3, #16
 80057fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005808:	61ba      	str	r2, [r7, #24]
 800580a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6979      	ldr	r1, [r7, #20]
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	613b      	str	r3, [r7, #16]
   return(result);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e5      	bne.n	80057e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800582a:	bf00      	nop
 800582c:	3754      	adds	r7, #84	@ 0x54
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b084      	sub	sp, #16
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f7ff fd69 	bl	8005328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005856:	bf00      	nop
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b21      	cmp	r3, #33	@ 0x21
 8005870:	d13e      	bne.n	80058f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800587a:	d114      	bne.n	80058a6 <UART_Transmit_IT+0x48>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d110      	bne.n	80058a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005898:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	1c9a      	adds	r2, r3, #2
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	621a      	str	r2, [r3, #32]
 80058a4:	e008      	b.n	80058b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	1c59      	adds	r1, r3, #1
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6211      	str	r1, [r2, #32]
 80058b0:	781a      	ldrb	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	4619      	mov	r1, r3
 80058c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10f      	bne.n	80058ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	e000      	b.n	80058f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058f0:	2302      	movs	r3, #2
  }
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005914:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7ff fce4 	bl	80052ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b08c      	sub	sp, #48	@ 0x30
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b22      	cmp	r3, #34	@ 0x22
 8005940:	f040 80ae 	bne.w	8005aa0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800594c:	d117      	bne.n	800597e <UART_Receive_IT+0x50>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d113      	bne.n	800597e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800596c:	b29a      	uxth	r2, r3
 800596e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005970:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005976:	1c9a      	adds	r2, r3, #2
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	629a      	str	r2, [r3, #40]	@ 0x28
 800597c:	e026      	b.n	80059cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005982:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005984:	2300      	movs	r3, #0
 8005986:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005990:	d007      	beq.n	80059a2 <UART_Receive_IT+0x74>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10a      	bne.n	80059b0 <UART_Receive_IT+0x82>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	e008      	b.n	80059c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	4619      	mov	r1, r3
 80059da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d15d      	bne.n	8005a9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0220 	bic.w	r2, r2, #32
 80059ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0201 	bic.w	r2, r2, #1
 8005a0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d135      	bne.n	8005a92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	330c      	adds	r3, #12
 8005a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f023 0310 	bic.w	r3, r3, #16
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	330c      	adds	r3, #12
 8005a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a4c:	623a      	str	r2, [r7, #32]
 8005a4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	69f9      	ldr	r1, [r7, #28]
 8005a52:	6a3a      	ldr	r2, [r7, #32]
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e5      	bne.n	8005a2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0310 	and.w	r3, r3, #16
 8005a6a:	2b10      	cmp	r3, #16
 8005a6c:	d10a      	bne.n	8005a84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fb ff12 	bl	80018b4 <HAL_UARTEx_RxEventCallback>
 8005a90:	e002      	b.n	8005a98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fc34 	bl	8005300 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e002      	b.n	8005aa2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	e000      	b.n	8005aa2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005aa0:	2302      	movs	r3, #2
  }
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3730      	adds	r7, #48	@ 0x30
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ab0:	b0c0      	sub	sp, #256	@ 0x100
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac8:	68d9      	ldr	r1, [r3, #12]
 8005aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	ea40 0301 	orr.w	r3, r0, r1
 8005ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b04:	f021 010c 	bic.w	r1, r1, #12
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b12:	430b      	orrs	r3, r1
 8005b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b26:	6999      	ldr	r1, [r3, #24]
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	ea40 0301 	orr.w	r3, r0, r1
 8005b32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b8f      	ldr	r3, [pc, #572]	@ (8005d78 <UART_SetConfig+0x2cc>)
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d005      	beq.n	8005b4c <UART_SetConfig+0xa0>
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4b8d      	ldr	r3, [pc, #564]	@ (8005d7c <UART_SetConfig+0x2d0>)
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d104      	bne.n	8005b56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b4c:	f7fe fbb6 	bl	80042bc <HAL_RCC_GetPCLK2Freq>
 8005b50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b54:	e003      	b.n	8005b5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b56:	f7fe fb9d 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 8005b5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b68:	f040 810c 	bne.w	8005d84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b70:	2200      	movs	r2, #0
 8005b72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b7e:	4622      	mov	r2, r4
 8005b80:	462b      	mov	r3, r5
 8005b82:	1891      	adds	r1, r2, r2
 8005b84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b86:	415b      	adcs	r3, r3
 8005b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b8e:	4621      	mov	r1, r4
 8005b90:	eb12 0801 	adds.w	r8, r2, r1
 8005b94:	4629      	mov	r1, r5
 8005b96:	eb43 0901 	adc.w	r9, r3, r1
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bae:	4690      	mov	r8, r2
 8005bb0:	4699      	mov	r9, r3
 8005bb2:	4623      	mov	r3, r4
 8005bb4:	eb18 0303 	adds.w	r3, r8, r3
 8005bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	eb49 0303 	adc.w	r3, r9, r3
 8005bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bda:	460b      	mov	r3, r1
 8005bdc:	18db      	adds	r3, r3, r3
 8005bde:	653b      	str	r3, [r7, #80]	@ 0x50
 8005be0:	4613      	mov	r3, r2
 8005be2:	eb42 0303 	adc.w	r3, r2, r3
 8005be6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005be8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005bec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005bf0:	f7fb f970 	bl	8000ed4 <__aeabi_uldivmod>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4b61      	ldr	r3, [pc, #388]	@ (8005d80 <UART_SetConfig+0x2d4>)
 8005bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	011c      	lsls	r4, r3, #4
 8005c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c14:	4642      	mov	r2, r8
 8005c16:	464b      	mov	r3, r9
 8005c18:	1891      	adds	r1, r2, r2
 8005c1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c1c:	415b      	adcs	r3, r3
 8005c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c24:	4641      	mov	r1, r8
 8005c26:	eb12 0a01 	adds.w	sl, r2, r1
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	eb43 0b01 	adc.w	fp, r3, r1
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c44:	4692      	mov	sl, r2
 8005c46:	469b      	mov	fp, r3
 8005c48:	4643      	mov	r3, r8
 8005c4a:	eb1a 0303 	adds.w	r3, sl, r3
 8005c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c52:	464b      	mov	r3, r9
 8005c54:	eb4b 0303 	adc.w	r3, fp, r3
 8005c58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c70:	460b      	mov	r3, r1
 8005c72:	18db      	adds	r3, r3, r3
 8005c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c76:	4613      	mov	r3, r2
 8005c78:	eb42 0303 	adc.w	r3, r2, r3
 8005c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c86:	f7fb f925 	bl	8000ed4 <__aeabi_uldivmod>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4b3b      	ldr	r3, [pc, #236]	@ (8005d80 <UART_SetConfig+0x2d4>)
 8005c92:	fba3 2301 	umull	r2, r3, r3, r1
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	2264      	movs	r2, #100	@ 0x64
 8005c9a:	fb02 f303 	mul.w	r3, r2, r3
 8005c9e:	1acb      	subs	r3, r1, r3
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005ca6:	4b36      	ldr	r3, [pc, #216]	@ (8005d80 <UART_SetConfig+0x2d4>)
 8005ca8:	fba3 2302 	umull	r2, r3, r3, r2
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005cb4:	441c      	add	r4, r3
 8005cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005cc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005cc8:	4642      	mov	r2, r8
 8005cca:	464b      	mov	r3, r9
 8005ccc:	1891      	adds	r1, r2, r2
 8005cce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005cd0:	415b      	adcs	r3, r3
 8005cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005cd8:	4641      	mov	r1, r8
 8005cda:	1851      	adds	r1, r2, r1
 8005cdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005cde:	4649      	mov	r1, r9
 8005ce0:	414b      	adcs	r3, r1
 8005ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005cf0:	4659      	mov	r1, fp
 8005cf2:	00cb      	lsls	r3, r1, #3
 8005cf4:	4651      	mov	r1, sl
 8005cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cfa:	4651      	mov	r1, sl
 8005cfc:	00ca      	lsls	r2, r1, #3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	4619      	mov	r1, r3
 8005d02:	4603      	mov	r3, r0
 8005d04:	4642      	mov	r2, r8
 8005d06:	189b      	adds	r3, r3, r2
 8005d08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d0c:	464b      	mov	r3, r9
 8005d0e:	460a      	mov	r2, r1
 8005d10:	eb42 0303 	adc.w	r3, r2, r3
 8005d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	18db      	adds	r3, r3, r3
 8005d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d32:	4613      	mov	r3, r2
 8005d34:	eb42 0303 	adc.w	r3, r2, r3
 8005d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d42:	f7fb f8c7 	bl	8000ed4 <__aeabi_uldivmod>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d80 <UART_SetConfig+0x2d4>)
 8005d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	2164      	movs	r1, #100	@ 0x64
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	3332      	adds	r3, #50	@ 0x32
 8005d5e:	4a08      	ldr	r2, [pc, #32]	@ (8005d80 <UART_SetConfig+0x2d4>)
 8005d60:	fba2 2303 	umull	r2, r3, r2, r3
 8005d64:	095b      	lsrs	r3, r3, #5
 8005d66:	f003 0207 	and.w	r2, r3, #7
 8005d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4422      	add	r2, r4
 8005d72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d74:	e106      	b.n	8005f84 <UART_SetConfig+0x4d8>
 8005d76:	bf00      	nop
 8005d78:	40011000 	.word	0x40011000
 8005d7c:	40011400 	.word	0x40011400
 8005d80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d96:	4642      	mov	r2, r8
 8005d98:	464b      	mov	r3, r9
 8005d9a:	1891      	adds	r1, r2, r2
 8005d9c:	6239      	str	r1, [r7, #32]
 8005d9e:	415b      	adcs	r3, r3
 8005da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005da6:	4641      	mov	r1, r8
 8005da8:	1854      	adds	r4, r2, r1
 8005daa:	4649      	mov	r1, r9
 8005dac:	eb43 0501 	adc.w	r5, r3, r1
 8005db0:	f04f 0200 	mov.w	r2, #0
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	00eb      	lsls	r3, r5, #3
 8005dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dbe:	00e2      	lsls	r2, r4, #3
 8005dc0:	4614      	mov	r4, r2
 8005dc2:	461d      	mov	r5, r3
 8005dc4:	4643      	mov	r3, r8
 8005dc6:	18e3      	adds	r3, r4, r3
 8005dc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005dcc:	464b      	mov	r3, r9
 8005dce:	eb45 0303 	adc.w	r3, r5, r3
 8005dd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005de2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005de6:	f04f 0200 	mov.w	r2, #0
 8005dea:	f04f 0300 	mov.w	r3, #0
 8005dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005df2:	4629      	mov	r1, r5
 8005df4:	008b      	lsls	r3, r1, #2
 8005df6:	4621      	mov	r1, r4
 8005df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	008a      	lsls	r2, r1, #2
 8005e00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e04:	f7fb f866 	bl	8000ed4 <__aeabi_uldivmod>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4b60      	ldr	r3, [pc, #384]	@ (8005f90 <UART_SetConfig+0x4e4>)
 8005e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	011c      	lsls	r4, r3, #4
 8005e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e28:	4642      	mov	r2, r8
 8005e2a:	464b      	mov	r3, r9
 8005e2c:	1891      	adds	r1, r2, r2
 8005e2e:	61b9      	str	r1, [r7, #24]
 8005e30:	415b      	adcs	r3, r3
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e38:	4641      	mov	r1, r8
 8005e3a:	1851      	adds	r1, r2, r1
 8005e3c:	6139      	str	r1, [r7, #16]
 8005e3e:	4649      	mov	r1, r9
 8005e40:	414b      	adcs	r3, r1
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	f04f 0300 	mov.w	r3, #0
 8005e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e50:	4659      	mov	r1, fp
 8005e52:	00cb      	lsls	r3, r1, #3
 8005e54:	4651      	mov	r1, sl
 8005e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e5a:	4651      	mov	r1, sl
 8005e5c:	00ca      	lsls	r2, r1, #3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	4619      	mov	r1, r3
 8005e62:	4603      	mov	r3, r0
 8005e64:	4642      	mov	r2, r8
 8005e66:	189b      	adds	r3, r3, r2
 8005e68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e6c:	464b      	mov	r3, r9
 8005e6e:	460a      	mov	r2, r1
 8005e70:	eb42 0303 	adc.w	r3, r2, r3
 8005e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e90:	4649      	mov	r1, r9
 8005e92:	008b      	lsls	r3, r1, #2
 8005e94:	4641      	mov	r1, r8
 8005e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e9a:	4641      	mov	r1, r8
 8005e9c:	008a      	lsls	r2, r1, #2
 8005e9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005ea2:	f7fb f817 	bl	8000ed4 <__aeabi_uldivmod>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4611      	mov	r1, r2
 8005eac:	4b38      	ldr	r3, [pc, #224]	@ (8005f90 <UART_SetConfig+0x4e4>)
 8005eae:	fba3 2301 	umull	r2, r3, r3, r1
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	2264      	movs	r2, #100	@ 0x64
 8005eb6:	fb02 f303 	mul.w	r3, r2, r3
 8005eba:	1acb      	subs	r3, r1, r3
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	3332      	adds	r3, #50	@ 0x32
 8005ec0:	4a33      	ldr	r2, [pc, #204]	@ (8005f90 <UART_SetConfig+0x4e4>)
 8005ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ecc:	441c      	add	r4, r3
 8005ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ed6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ed8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005edc:	4642      	mov	r2, r8
 8005ede:	464b      	mov	r3, r9
 8005ee0:	1891      	adds	r1, r2, r2
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	415b      	adcs	r3, r3
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005eec:	4641      	mov	r1, r8
 8005eee:	1851      	adds	r1, r2, r1
 8005ef0:	6039      	str	r1, [r7, #0]
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	414b      	adcs	r3, r1
 8005ef6:	607b      	str	r3, [r7, #4]
 8005ef8:	f04f 0200 	mov.w	r2, #0
 8005efc:	f04f 0300 	mov.w	r3, #0
 8005f00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f04:	4659      	mov	r1, fp
 8005f06:	00cb      	lsls	r3, r1, #3
 8005f08:	4651      	mov	r1, sl
 8005f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f0e:	4651      	mov	r1, sl
 8005f10:	00ca      	lsls	r2, r1, #3
 8005f12:	4610      	mov	r0, r2
 8005f14:	4619      	mov	r1, r3
 8005f16:	4603      	mov	r3, r0
 8005f18:	4642      	mov	r2, r8
 8005f1a:	189b      	adds	r3, r3, r2
 8005f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f1e:	464b      	mov	r3, r9
 8005f20:	460a      	mov	r2, r1
 8005f22:	eb42 0303 	adc.w	r3, r2, r3
 8005f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f32:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f40:	4649      	mov	r1, r9
 8005f42:	008b      	lsls	r3, r1, #2
 8005f44:	4641      	mov	r1, r8
 8005f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f4a:	4641      	mov	r1, r8
 8005f4c:	008a      	lsls	r2, r1, #2
 8005f4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f52:	f7fa ffbf 	bl	8000ed4 <__aeabi_uldivmod>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f90 <UART_SetConfig+0x4e4>)
 8005f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	2164      	movs	r1, #100	@ 0x64
 8005f64:	fb01 f303 	mul.w	r3, r1, r3
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	3332      	adds	r3, #50	@ 0x32
 8005f6e:	4a08      	ldr	r2, [pc, #32]	@ (8005f90 <UART_SetConfig+0x4e4>)
 8005f70:	fba2 2303 	umull	r2, r3, r2, r3
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	f003 020f 	and.w	r2, r3, #15
 8005f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4422      	add	r2, r4
 8005f82:	609a      	str	r2, [r3, #8]
}
 8005f84:	bf00      	nop
 8005f86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f90:	51eb851f 	.word	0x51eb851f

08005f94 <__cvt>:
 8005f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f98:	ec57 6b10 	vmov	r6, r7, d0
 8005f9c:	2f00      	cmp	r7, #0
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	463b      	mov	r3, r7
 8005fa4:	bfbb      	ittet	lt
 8005fa6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005faa:	461f      	movlt	r7, r3
 8005fac:	2300      	movge	r3, #0
 8005fae:	232d      	movlt	r3, #45	@ 0x2d
 8005fb0:	700b      	strb	r3, [r1, #0]
 8005fb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005fb8:	4691      	mov	r9, r2
 8005fba:	f023 0820 	bic.w	r8, r3, #32
 8005fbe:	bfbc      	itt	lt
 8005fc0:	4632      	movlt	r2, r6
 8005fc2:	4616      	movlt	r6, r2
 8005fc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fc8:	d005      	beq.n	8005fd6 <__cvt+0x42>
 8005fca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005fce:	d100      	bne.n	8005fd2 <__cvt+0x3e>
 8005fd0:	3401      	adds	r4, #1
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	e000      	b.n	8005fd8 <__cvt+0x44>
 8005fd6:	2103      	movs	r1, #3
 8005fd8:	ab03      	add	r3, sp, #12
 8005fda:	9301      	str	r3, [sp, #4]
 8005fdc:	ab02      	add	r3, sp, #8
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	ec47 6b10 	vmov	d0, r6, r7
 8005fe4:	4653      	mov	r3, sl
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	f001 f876 	bl	80070d8 <_dtoa_r>
 8005fec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005ff0:	4605      	mov	r5, r0
 8005ff2:	d119      	bne.n	8006028 <__cvt+0x94>
 8005ff4:	f019 0f01 	tst.w	r9, #1
 8005ff8:	d00e      	beq.n	8006018 <__cvt+0x84>
 8005ffa:	eb00 0904 	add.w	r9, r0, r4
 8005ffe:	2200      	movs	r2, #0
 8006000:	2300      	movs	r3, #0
 8006002:	4630      	mov	r0, r6
 8006004:	4639      	mov	r1, r7
 8006006:	f7fa fd77 	bl	8000af8 <__aeabi_dcmpeq>
 800600a:	b108      	cbz	r0, 8006010 <__cvt+0x7c>
 800600c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006010:	2230      	movs	r2, #48	@ 0x30
 8006012:	9b03      	ldr	r3, [sp, #12]
 8006014:	454b      	cmp	r3, r9
 8006016:	d31e      	bcc.n	8006056 <__cvt+0xc2>
 8006018:	9b03      	ldr	r3, [sp, #12]
 800601a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800601c:	1b5b      	subs	r3, r3, r5
 800601e:	4628      	mov	r0, r5
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	b004      	add	sp, #16
 8006024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006028:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800602c:	eb00 0904 	add.w	r9, r0, r4
 8006030:	d1e5      	bne.n	8005ffe <__cvt+0x6a>
 8006032:	7803      	ldrb	r3, [r0, #0]
 8006034:	2b30      	cmp	r3, #48	@ 0x30
 8006036:	d10a      	bne.n	800604e <__cvt+0xba>
 8006038:	2200      	movs	r2, #0
 800603a:	2300      	movs	r3, #0
 800603c:	4630      	mov	r0, r6
 800603e:	4639      	mov	r1, r7
 8006040:	f7fa fd5a 	bl	8000af8 <__aeabi_dcmpeq>
 8006044:	b918      	cbnz	r0, 800604e <__cvt+0xba>
 8006046:	f1c4 0401 	rsb	r4, r4, #1
 800604a:	f8ca 4000 	str.w	r4, [sl]
 800604e:	f8da 3000 	ldr.w	r3, [sl]
 8006052:	4499      	add	r9, r3
 8006054:	e7d3      	b.n	8005ffe <__cvt+0x6a>
 8006056:	1c59      	adds	r1, r3, #1
 8006058:	9103      	str	r1, [sp, #12]
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	e7d9      	b.n	8006012 <__cvt+0x7e>

0800605e <__exponent>:
 800605e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006060:	2900      	cmp	r1, #0
 8006062:	bfba      	itte	lt
 8006064:	4249      	neglt	r1, r1
 8006066:	232d      	movlt	r3, #45	@ 0x2d
 8006068:	232b      	movge	r3, #43	@ 0x2b
 800606a:	2909      	cmp	r1, #9
 800606c:	7002      	strb	r2, [r0, #0]
 800606e:	7043      	strb	r3, [r0, #1]
 8006070:	dd29      	ble.n	80060c6 <__exponent+0x68>
 8006072:	f10d 0307 	add.w	r3, sp, #7
 8006076:	461d      	mov	r5, r3
 8006078:	270a      	movs	r7, #10
 800607a:	461a      	mov	r2, r3
 800607c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006080:	fb07 1416 	mls	r4, r7, r6, r1
 8006084:	3430      	adds	r4, #48	@ 0x30
 8006086:	f802 4c01 	strb.w	r4, [r2, #-1]
 800608a:	460c      	mov	r4, r1
 800608c:	2c63      	cmp	r4, #99	@ 0x63
 800608e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006092:	4631      	mov	r1, r6
 8006094:	dcf1      	bgt.n	800607a <__exponent+0x1c>
 8006096:	3130      	adds	r1, #48	@ 0x30
 8006098:	1e94      	subs	r4, r2, #2
 800609a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800609e:	1c41      	adds	r1, r0, #1
 80060a0:	4623      	mov	r3, r4
 80060a2:	42ab      	cmp	r3, r5
 80060a4:	d30a      	bcc.n	80060bc <__exponent+0x5e>
 80060a6:	f10d 0309 	add.w	r3, sp, #9
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	42ac      	cmp	r4, r5
 80060ae:	bf88      	it	hi
 80060b0:	2300      	movhi	r3, #0
 80060b2:	3302      	adds	r3, #2
 80060b4:	4403      	add	r3, r0
 80060b6:	1a18      	subs	r0, r3, r0
 80060b8:	b003      	add	sp, #12
 80060ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80060c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80060c4:	e7ed      	b.n	80060a2 <__exponent+0x44>
 80060c6:	2330      	movs	r3, #48	@ 0x30
 80060c8:	3130      	adds	r1, #48	@ 0x30
 80060ca:	7083      	strb	r3, [r0, #2]
 80060cc:	70c1      	strb	r1, [r0, #3]
 80060ce:	1d03      	adds	r3, r0, #4
 80060d0:	e7f1      	b.n	80060b6 <__exponent+0x58>
	...

080060d4 <_printf_float>:
 80060d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	b08d      	sub	sp, #52	@ 0x34
 80060da:	460c      	mov	r4, r1
 80060dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80060e0:	4616      	mov	r6, r2
 80060e2:	461f      	mov	r7, r3
 80060e4:	4605      	mov	r5, r0
 80060e6:	f000 feef 	bl	8006ec8 <_localeconv_r>
 80060ea:	6803      	ldr	r3, [r0, #0]
 80060ec:	9304      	str	r3, [sp, #16]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fa f8d6 	bl	80002a0 <strlen>
 80060f4:	2300      	movs	r3, #0
 80060f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80060f8:	f8d8 3000 	ldr.w	r3, [r8]
 80060fc:	9005      	str	r0, [sp, #20]
 80060fe:	3307      	adds	r3, #7
 8006100:	f023 0307 	bic.w	r3, r3, #7
 8006104:	f103 0208 	add.w	r2, r3, #8
 8006108:	f894 a018 	ldrb.w	sl, [r4, #24]
 800610c:	f8d4 b000 	ldr.w	fp, [r4]
 8006110:	f8c8 2000 	str.w	r2, [r8]
 8006114:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006118:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800611c:	9307      	str	r3, [sp, #28]
 800611e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006122:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006126:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800612a:	4b9c      	ldr	r3, [pc, #624]	@ (800639c <_printf_float+0x2c8>)
 800612c:	f04f 32ff 	mov.w	r2, #4294967295
 8006130:	f7fa fd14 	bl	8000b5c <__aeabi_dcmpun>
 8006134:	bb70      	cbnz	r0, 8006194 <_printf_float+0xc0>
 8006136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800613a:	4b98      	ldr	r3, [pc, #608]	@ (800639c <_printf_float+0x2c8>)
 800613c:	f04f 32ff 	mov.w	r2, #4294967295
 8006140:	f7fa fcee 	bl	8000b20 <__aeabi_dcmple>
 8006144:	bb30      	cbnz	r0, 8006194 <_printf_float+0xc0>
 8006146:	2200      	movs	r2, #0
 8006148:	2300      	movs	r3, #0
 800614a:	4640      	mov	r0, r8
 800614c:	4649      	mov	r1, r9
 800614e:	f7fa fcdd 	bl	8000b0c <__aeabi_dcmplt>
 8006152:	b110      	cbz	r0, 800615a <_printf_float+0x86>
 8006154:	232d      	movs	r3, #45	@ 0x2d
 8006156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800615a:	4a91      	ldr	r2, [pc, #580]	@ (80063a0 <_printf_float+0x2cc>)
 800615c:	4b91      	ldr	r3, [pc, #580]	@ (80063a4 <_printf_float+0x2d0>)
 800615e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006162:	bf94      	ite	ls
 8006164:	4690      	movls	r8, r2
 8006166:	4698      	movhi	r8, r3
 8006168:	2303      	movs	r3, #3
 800616a:	6123      	str	r3, [r4, #16]
 800616c:	f02b 0304 	bic.w	r3, fp, #4
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	f04f 0900 	mov.w	r9, #0
 8006176:	9700      	str	r7, [sp, #0]
 8006178:	4633      	mov	r3, r6
 800617a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800617c:	4621      	mov	r1, r4
 800617e:	4628      	mov	r0, r5
 8006180:	f000 f9d2 	bl	8006528 <_printf_common>
 8006184:	3001      	adds	r0, #1
 8006186:	f040 808d 	bne.w	80062a4 <_printf_float+0x1d0>
 800618a:	f04f 30ff 	mov.w	r0, #4294967295
 800618e:	b00d      	add	sp, #52	@ 0x34
 8006190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006194:	4642      	mov	r2, r8
 8006196:	464b      	mov	r3, r9
 8006198:	4640      	mov	r0, r8
 800619a:	4649      	mov	r1, r9
 800619c:	f7fa fcde 	bl	8000b5c <__aeabi_dcmpun>
 80061a0:	b140      	cbz	r0, 80061b4 <_printf_float+0xe0>
 80061a2:	464b      	mov	r3, r9
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bfbc      	itt	lt
 80061a8:	232d      	movlt	r3, #45	@ 0x2d
 80061aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80061ae:	4a7e      	ldr	r2, [pc, #504]	@ (80063a8 <_printf_float+0x2d4>)
 80061b0:	4b7e      	ldr	r3, [pc, #504]	@ (80063ac <_printf_float+0x2d8>)
 80061b2:	e7d4      	b.n	800615e <_printf_float+0x8a>
 80061b4:	6863      	ldr	r3, [r4, #4]
 80061b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80061ba:	9206      	str	r2, [sp, #24]
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	d13b      	bne.n	8006238 <_printf_float+0x164>
 80061c0:	2306      	movs	r3, #6
 80061c2:	6063      	str	r3, [r4, #4]
 80061c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80061c8:	2300      	movs	r3, #0
 80061ca:	6022      	str	r2, [r4, #0]
 80061cc:	9303      	str	r3, [sp, #12]
 80061ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80061d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80061d4:	ab09      	add	r3, sp, #36	@ 0x24
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	6861      	ldr	r1, [r4, #4]
 80061da:	ec49 8b10 	vmov	d0, r8, r9
 80061de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80061e2:	4628      	mov	r0, r5
 80061e4:	f7ff fed6 	bl	8005f94 <__cvt>
 80061e8:	9b06      	ldr	r3, [sp, #24]
 80061ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061ec:	2b47      	cmp	r3, #71	@ 0x47
 80061ee:	4680      	mov	r8, r0
 80061f0:	d129      	bne.n	8006246 <_printf_float+0x172>
 80061f2:	1cc8      	adds	r0, r1, #3
 80061f4:	db02      	blt.n	80061fc <_printf_float+0x128>
 80061f6:	6863      	ldr	r3, [r4, #4]
 80061f8:	4299      	cmp	r1, r3
 80061fa:	dd41      	ble.n	8006280 <_printf_float+0x1ac>
 80061fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006200:	fa5f fa8a 	uxtb.w	sl, sl
 8006204:	3901      	subs	r1, #1
 8006206:	4652      	mov	r2, sl
 8006208:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800620c:	9109      	str	r1, [sp, #36]	@ 0x24
 800620e:	f7ff ff26 	bl	800605e <__exponent>
 8006212:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006214:	1813      	adds	r3, r2, r0
 8006216:	2a01      	cmp	r2, #1
 8006218:	4681      	mov	r9, r0
 800621a:	6123      	str	r3, [r4, #16]
 800621c:	dc02      	bgt.n	8006224 <_printf_float+0x150>
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	07d2      	lsls	r2, r2, #31
 8006222:	d501      	bpl.n	8006228 <_printf_float+0x154>
 8006224:	3301      	adds	r3, #1
 8006226:	6123      	str	r3, [r4, #16]
 8006228:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0a2      	beq.n	8006176 <_printf_float+0xa2>
 8006230:	232d      	movs	r3, #45	@ 0x2d
 8006232:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006236:	e79e      	b.n	8006176 <_printf_float+0xa2>
 8006238:	9a06      	ldr	r2, [sp, #24]
 800623a:	2a47      	cmp	r2, #71	@ 0x47
 800623c:	d1c2      	bne.n	80061c4 <_printf_float+0xf0>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1c0      	bne.n	80061c4 <_printf_float+0xf0>
 8006242:	2301      	movs	r3, #1
 8006244:	e7bd      	b.n	80061c2 <_printf_float+0xee>
 8006246:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800624a:	d9db      	bls.n	8006204 <_printf_float+0x130>
 800624c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006250:	d118      	bne.n	8006284 <_printf_float+0x1b0>
 8006252:	2900      	cmp	r1, #0
 8006254:	6863      	ldr	r3, [r4, #4]
 8006256:	dd0b      	ble.n	8006270 <_printf_float+0x19c>
 8006258:	6121      	str	r1, [r4, #16]
 800625a:	b913      	cbnz	r3, 8006262 <_printf_float+0x18e>
 800625c:	6822      	ldr	r2, [r4, #0]
 800625e:	07d0      	lsls	r0, r2, #31
 8006260:	d502      	bpl.n	8006268 <_printf_float+0x194>
 8006262:	3301      	adds	r3, #1
 8006264:	440b      	add	r3, r1
 8006266:	6123      	str	r3, [r4, #16]
 8006268:	65a1      	str	r1, [r4, #88]	@ 0x58
 800626a:	f04f 0900 	mov.w	r9, #0
 800626e:	e7db      	b.n	8006228 <_printf_float+0x154>
 8006270:	b913      	cbnz	r3, 8006278 <_printf_float+0x1a4>
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	07d2      	lsls	r2, r2, #31
 8006276:	d501      	bpl.n	800627c <_printf_float+0x1a8>
 8006278:	3302      	adds	r3, #2
 800627a:	e7f4      	b.n	8006266 <_printf_float+0x192>
 800627c:	2301      	movs	r3, #1
 800627e:	e7f2      	b.n	8006266 <_printf_float+0x192>
 8006280:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006286:	4299      	cmp	r1, r3
 8006288:	db05      	blt.n	8006296 <_printf_float+0x1c2>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	6121      	str	r1, [r4, #16]
 800628e:	07d8      	lsls	r0, r3, #31
 8006290:	d5ea      	bpl.n	8006268 <_printf_float+0x194>
 8006292:	1c4b      	adds	r3, r1, #1
 8006294:	e7e7      	b.n	8006266 <_printf_float+0x192>
 8006296:	2900      	cmp	r1, #0
 8006298:	bfd4      	ite	le
 800629a:	f1c1 0202 	rsble	r2, r1, #2
 800629e:	2201      	movgt	r2, #1
 80062a0:	4413      	add	r3, r2
 80062a2:	e7e0      	b.n	8006266 <_printf_float+0x192>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	055a      	lsls	r2, r3, #21
 80062a8:	d407      	bmi.n	80062ba <_printf_float+0x1e6>
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	4642      	mov	r2, r8
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b8      	blx	r7
 80062b4:	3001      	adds	r0, #1
 80062b6:	d12b      	bne.n	8006310 <_printf_float+0x23c>
 80062b8:	e767      	b.n	800618a <_printf_float+0xb6>
 80062ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062be:	f240 80dd 	bls.w	800647c <_printf_float+0x3a8>
 80062c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062c6:	2200      	movs	r2, #0
 80062c8:	2300      	movs	r3, #0
 80062ca:	f7fa fc15 	bl	8000af8 <__aeabi_dcmpeq>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d033      	beq.n	800633a <_printf_float+0x266>
 80062d2:	4a37      	ldr	r2, [pc, #220]	@ (80063b0 <_printf_float+0x2dc>)
 80062d4:	2301      	movs	r3, #1
 80062d6:	4631      	mov	r1, r6
 80062d8:	4628      	mov	r0, r5
 80062da:	47b8      	blx	r7
 80062dc:	3001      	adds	r0, #1
 80062de:	f43f af54 	beq.w	800618a <_printf_float+0xb6>
 80062e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80062e6:	4543      	cmp	r3, r8
 80062e8:	db02      	blt.n	80062f0 <_printf_float+0x21c>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	07d8      	lsls	r0, r3, #31
 80062ee:	d50f      	bpl.n	8006310 <_printf_float+0x23c>
 80062f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062f4:	4631      	mov	r1, r6
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	f43f af45 	beq.w	800618a <_printf_float+0xb6>
 8006300:	f04f 0900 	mov.w	r9, #0
 8006304:	f108 38ff 	add.w	r8, r8, #4294967295
 8006308:	f104 0a1a 	add.w	sl, r4, #26
 800630c:	45c8      	cmp	r8, r9
 800630e:	dc09      	bgt.n	8006324 <_printf_float+0x250>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	079b      	lsls	r3, r3, #30
 8006314:	f100 8103 	bmi.w	800651e <_printf_float+0x44a>
 8006318:	68e0      	ldr	r0, [r4, #12]
 800631a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800631c:	4298      	cmp	r0, r3
 800631e:	bfb8      	it	lt
 8006320:	4618      	movlt	r0, r3
 8006322:	e734      	b.n	800618e <_printf_float+0xba>
 8006324:	2301      	movs	r3, #1
 8006326:	4652      	mov	r2, sl
 8006328:	4631      	mov	r1, r6
 800632a:	4628      	mov	r0, r5
 800632c:	47b8      	blx	r7
 800632e:	3001      	adds	r0, #1
 8006330:	f43f af2b 	beq.w	800618a <_printf_float+0xb6>
 8006334:	f109 0901 	add.w	r9, r9, #1
 8006338:	e7e8      	b.n	800630c <_printf_float+0x238>
 800633a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	dc39      	bgt.n	80063b4 <_printf_float+0x2e0>
 8006340:	4a1b      	ldr	r2, [pc, #108]	@ (80063b0 <_printf_float+0x2dc>)
 8006342:	2301      	movs	r3, #1
 8006344:	4631      	mov	r1, r6
 8006346:	4628      	mov	r0, r5
 8006348:	47b8      	blx	r7
 800634a:	3001      	adds	r0, #1
 800634c:	f43f af1d 	beq.w	800618a <_printf_float+0xb6>
 8006350:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006354:	ea59 0303 	orrs.w	r3, r9, r3
 8006358:	d102      	bne.n	8006360 <_printf_float+0x28c>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	07d9      	lsls	r1, r3, #31
 800635e:	d5d7      	bpl.n	8006310 <_printf_float+0x23c>
 8006360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006364:	4631      	mov	r1, r6
 8006366:	4628      	mov	r0, r5
 8006368:	47b8      	blx	r7
 800636a:	3001      	adds	r0, #1
 800636c:	f43f af0d 	beq.w	800618a <_printf_float+0xb6>
 8006370:	f04f 0a00 	mov.w	sl, #0
 8006374:	f104 0b1a 	add.w	fp, r4, #26
 8006378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800637a:	425b      	negs	r3, r3
 800637c:	4553      	cmp	r3, sl
 800637e:	dc01      	bgt.n	8006384 <_printf_float+0x2b0>
 8006380:	464b      	mov	r3, r9
 8006382:	e793      	b.n	80062ac <_printf_float+0x1d8>
 8006384:	2301      	movs	r3, #1
 8006386:	465a      	mov	r2, fp
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	47b8      	blx	r7
 800638e:	3001      	adds	r0, #1
 8006390:	f43f aefb 	beq.w	800618a <_printf_float+0xb6>
 8006394:	f10a 0a01 	add.w	sl, sl, #1
 8006398:	e7ee      	b.n	8006378 <_printf_float+0x2a4>
 800639a:	bf00      	nop
 800639c:	7fefffff 	.word	0x7fefffff
 80063a0:	0800aad8 	.word	0x0800aad8
 80063a4:	0800aadc 	.word	0x0800aadc
 80063a8:	0800aae0 	.word	0x0800aae0
 80063ac:	0800aae4 	.word	0x0800aae4
 80063b0:	0800aae8 	.word	0x0800aae8
 80063b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063ba:	4553      	cmp	r3, sl
 80063bc:	bfa8      	it	ge
 80063be:	4653      	movge	r3, sl
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	4699      	mov	r9, r3
 80063c4:	dc36      	bgt.n	8006434 <_printf_float+0x360>
 80063c6:	f04f 0b00 	mov.w	fp, #0
 80063ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063ce:	f104 021a 	add.w	r2, r4, #26
 80063d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063d4:	9306      	str	r3, [sp, #24]
 80063d6:	eba3 0309 	sub.w	r3, r3, r9
 80063da:	455b      	cmp	r3, fp
 80063dc:	dc31      	bgt.n	8006442 <_printf_float+0x36e>
 80063de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063e0:	459a      	cmp	sl, r3
 80063e2:	dc3a      	bgt.n	800645a <_printf_float+0x386>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	07da      	lsls	r2, r3, #31
 80063e8:	d437      	bmi.n	800645a <_printf_float+0x386>
 80063ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ec:	ebaa 0903 	sub.w	r9, sl, r3
 80063f0:	9b06      	ldr	r3, [sp, #24]
 80063f2:	ebaa 0303 	sub.w	r3, sl, r3
 80063f6:	4599      	cmp	r9, r3
 80063f8:	bfa8      	it	ge
 80063fa:	4699      	movge	r9, r3
 80063fc:	f1b9 0f00 	cmp.w	r9, #0
 8006400:	dc33      	bgt.n	800646a <_printf_float+0x396>
 8006402:	f04f 0800 	mov.w	r8, #0
 8006406:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800640a:	f104 0b1a 	add.w	fp, r4, #26
 800640e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006410:	ebaa 0303 	sub.w	r3, sl, r3
 8006414:	eba3 0309 	sub.w	r3, r3, r9
 8006418:	4543      	cmp	r3, r8
 800641a:	f77f af79 	ble.w	8006310 <_printf_float+0x23c>
 800641e:	2301      	movs	r3, #1
 8006420:	465a      	mov	r2, fp
 8006422:	4631      	mov	r1, r6
 8006424:	4628      	mov	r0, r5
 8006426:	47b8      	blx	r7
 8006428:	3001      	adds	r0, #1
 800642a:	f43f aeae 	beq.w	800618a <_printf_float+0xb6>
 800642e:	f108 0801 	add.w	r8, r8, #1
 8006432:	e7ec      	b.n	800640e <_printf_float+0x33a>
 8006434:	4642      	mov	r2, r8
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	d1c2      	bne.n	80063c6 <_printf_float+0x2f2>
 8006440:	e6a3      	b.n	800618a <_printf_float+0xb6>
 8006442:	2301      	movs	r3, #1
 8006444:	4631      	mov	r1, r6
 8006446:	4628      	mov	r0, r5
 8006448:	9206      	str	r2, [sp, #24]
 800644a:	47b8      	blx	r7
 800644c:	3001      	adds	r0, #1
 800644e:	f43f ae9c 	beq.w	800618a <_printf_float+0xb6>
 8006452:	9a06      	ldr	r2, [sp, #24]
 8006454:	f10b 0b01 	add.w	fp, fp, #1
 8006458:	e7bb      	b.n	80063d2 <_printf_float+0x2fe>
 800645a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800645e:	4631      	mov	r1, r6
 8006460:	4628      	mov	r0, r5
 8006462:	47b8      	blx	r7
 8006464:	3001      	adds	r0, #1
 8006466:	d1c0      	bne.n	80063ea <_printf_float+0x316>
 8006468:	e68f      	b.n	800618a <_printf_float+0xb6>
 800646a:	9a06      	ldr	r2, [sp, #24]
 800646c:	464b      	mov	r3, r9
 800646e:	4442      	add	r2, r8
 8006470:	4631      	mov	r1, r6
 8006472:	4628      	mov	r0, r5
 8006474:	47b8      	blx	r7
 8006476:	3001      	adds	r0, #1
 8006478:	d1c3      	bne.n	8006402 <_printf_float+0x32e>
 800647a:	e686      	b.n	800618a <_printf_float+0xb6>
 800647c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006480:	f1ba 0f01 	cmp.w	sl, #1
 8006484:	dc01      	bgt.n	800648a <_printf_float+0x3b6>
 8006486:	07db      	lsls	r3, r3, #31
 8006488:	d536      	bpl.n	80064f8 <_printf_float+0x424>
 800648a:	2301      	movs	r3, #1
 800648c:	4642      	mov	r2, r8
 800648e:	4631      	mov	r1, r6
 8006490:	4628      	mov	r0, r5
 8006492:	47b8      	blx	r7
 8006494:	3001      	adds	r0, #1
 8006496:	f43f ae78 	beq.w	800618a <_printf_float+0xb6>
 800649a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800649e:	4631      	mov	r1, r6
 80064a0:	4628      	mov	r0, r5
 80064a2:	47b8      	blx	r7
 80064a4:	3001      	adds	r0, #1
 80064a6:	f43f ae70 	beq.w	800618a <_printf_float+0xb6>
 80064aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064ae:	2200      	movs	r2, #0
 80064b0:	2300      	movs	r3, #0
 80064b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064b6:	f7fa fb1f 	bl	8000af8 <__aeabi_dcmpeq>
 80064ba:	b9c0      	cbnz	r0, 80064ee <_printf_float+0x41a>
 80064bc:	4653      	mov	r3, sl
 80064be:	f108 0201 	add.w	r2, r8, #1
 80064c2:	4631      	mov	r1, r6
 80064c4:	4628      	mov	r0, r5
 80064c6:	47b8      	blx	r7
 80064c8:	3001      	adds	r0, #1
 80064ca:	d10c      	bne.n	80064e6 <_printf_float+0x412>
 80064cc:	e65d      	b.n	800618a <_printf_float+0xb6>
 80064ce:	2301      	movs	r3, #1
 80064d0:	465a      	mov	r2, fp
 80064d2:	4631      	mov	r1, r6
 80064d4:	4628      	mov	r0, r5
 80064d6:	47b8      	blx	r7
 80064d8:	3001      	adds	r0, #1
 80064da:	f43f ae56 	beq.w	800618a <_printf_float+0xb6>
 80064de:	f108 0801 	add.w	r8, r8, #1
 80064e2:	45d0      	cmp	r8, sl
 80064e4:	dbf3      	blt.n	80064ce <_printf_float+0x3fa>
 80064e6:	464b      	mov	r3, r9
 80064e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80064ec:	e6df      	b.n	80062ae <_printf_float+0x1da>
 80064ee:	f04f 0800 	mov.w	r8, #0
 80064f2:	f104 0b1a 	add.w	fp, r4, #26
 80064f6:	e7f4      	b.n	80064e2 <_printf_float+0x40e>
 80064f8:	2301      	movs	r3, #1
 80064fa:	4642      	mov	r2, r8
 80064fc:	e7e1      	b.n	80064c2 <_printf_float+0x3ee>
 80064fe:	2301      	movs	r3, #1
 8006500:	464a      	mov	r2, r9
 8006502:	4631      	mov	r1, r6
 8006504:	4628      	mov	r0, r5
 8006506:	47b8      	blx	r7
 8006508:	3001      	adds	r0, #1
 800650a:	f43f ae3e 	beq.w	800618a <_printf_float+0xb6>
 800650e:	f108 0801 	add.w	r8, r8, #1
 8006512:	68e3      	ldr	r3, [r4, #12]
 8006514:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006516:	1a5b      	subs	r3, r3, r1
 8006518:	4543      	cmp	r3, r8
 800651a:	dcf0      	bgt.n	80064fe <_printf_float+0x42a>
 800651c:	e6fc      	b.n	8006318 <_printf_float+0x244>
 800651e:	f04f 0800 	mov.w	r8, #0
 8006522:	f104 0919 	add.w	r9, r4, #25
 8006526:	e7f4      	b.n	8006512 <_printf_float+0x43e>

08006528 <_printf_common>:
 8006528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800652c:	4616      	mov	r6, r2
 800652e:	4698      	mov	r8, r3
 8006530:	688a      	ldr	r2, [r1, #8]
 8006532:	690b      	ldr	r3, [r1, #16]
 8006534:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006538:	4293      	cmp	r3, r2
 800653a:	bfb8      	it	lt
 800653c:	4613      	movlt	r3, r2
 800653e:	6033      	str	r3, [r6, #0]
 8006540:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006544:	4607      	mov	r7, r0
 8006546:	460c      	mov	r4, r1
 8006548:	b10a      	cbz	r2, 800654e <_printf_common+0x26>
 800654a:	3301      	adds	r3, #1
 800654c:	6033      	str	r3, [r6, #0]
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	0699      	lsls	r1, r3, #26
 8006552:	bf42      	ittt	mi
 8006554:	6833      	ldrmi	r3, [r6, #0]
 8006556:	3302      	addmi	r3, #2
 8006558:	6033      	strmi	r3, [r6, #0]
 800655a:	6825      	ldr	r5, [r4, #0]
 800655c:	f015 0506 	ands.w	r5, r5, #6
 8006560:	d106      	bne.n	8006570 <_printf_common+0x48>
 8006562:	f104 0a19 	add.w	sl, r4, #25
 8006566:	68e3      	ldr	r3, [r4, #12]
 8006568:	6832      	ldr	r2, [r6, #0]
 800656a:	1a9b      	subs	r3, r3, r2
 800656c:	42ab      	cmp	r3, r5
 800656e:	dc26      	bgt.n	80065be <_printf_common+0x96>
 8006570:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006574:	6822      	ldr	r2, [r4, #0]
 8006576:	3b00      	subs	r3, #0
 8006578:	bf18      	it	ne
 800657a:	2301      	movne	r3, #1
 800657c:	0692      	lsls	r2, r2, #26
 800657e:	d42b      	bmi.n	80065d8 <_printf_common+0xb0>
 8006580:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006584:	4641      	mov	r1, r8
 8006586:	4638      	mov	r0, r7
 8006588:	47c8      	blx	r9
 800658a:	3001      	adds	r0, #1
 800658c:	d01e      	beq.n	80065cc <_printf_common+0xa4>
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	6922      	ldr	r2, [r4, #16]
 8006592:	f003 0306 	and.w	r3, r3, #6
 8006596:	2b04      	cmp	r3, #4
 8006598:	bf02      	ittt	eq
 800659a:	68e5      	ldreq	r5, [r4, #12]
 800659c:	6833      	ldreq	r3, [r6, #0]
 800659e:	1aed      	subeq	r5, r5, r3
 80065a0:	68a3      	ldr	r3, [r4, #8]
 80065a2:	bf0c      	ite	eq
 80065a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065a8:	2500      	movne	r5, #0
 80065aa:	4293      	cmp	r3, r2
 80065ac:	bfc4      	itt	gt
 80065ae:	1a9b      	subgt	r3, r3, r2
 80065b0:	18ed      	addgt	r5, r5, r3
 80065b2:	2600      	movs	r6, #0
 80065b4:	341a      	adds	r4, #26
 80065b6:	42b5      	cmp	r5, r6
 80065b8:	d11a      	bne.n	80065f0 <_printf_common+0xc8>
 80065ba:	2000      	movs	r0, #0
 80065bc:	e008      	b.n	80065d0 <_printf_common+0xa8>
 80065be:	2301      	movs	r3, #1
 80065c0:	4652      	mov	r2, sl
 80065c2:	4641      	mov	r1, r8
 80065c4:	4638      	mov	r0, r7
 80065c6:	47c8      	blx	r9
 80065c8:	3001      	adds	r0, #1
 80065ca:	d103      	bne.n	80065d4 <_printf_common+0xac>
 80065cc:	f04f 30ff 	mov.w	r0, #4294967295
 80065d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d4:	3501      	adds	r5, #1
 80065d6:	e7c6      	b.n	8006566 <_printf_common+0x3e>
 80065d8:	18e1      	adds	r1, r4, r3
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	2030      	movs	r0, #48	@ 0x30
 80065de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065e2:	4422      	add	r2, r4
 80065e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065ec:	3302      	adds	r3, #2
 80065ee:	e7c7      	b.n	8006580 <_printf_common+0x58>
 80065f0:	2301      	movs	r3, #1
 80065f2:	4622      	mov	r2, r4
 80065f4:	4641      	mov	r1, r8
 80065f6:	4638      	mov	r0, r7
 80065f8:	47c8      	blx	r9
 80065fa:	3001      	adds	r0, #1
 80065fc:	d0e6      	beq.n	80065cc <_printf_common+0xa4>
 80065fe:	3601      	adds	r6, #1
 8006600:	e7d9      	b.n	80065b6 <_printf_common+0x8e>
	...

08006604 <_printf_i>:
 8006604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006608:	7e0f      	ldrb	r7, [r1, #24]
 800660a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800660c:	2f78      	cmp	r7, #120	@ 0x78
 800660e:	4691      	mov	r9, r2
 8006610:	4680      	mov	r8, r0
 8006612:	460c      	mov	r4, r1
 8006614:	469a      	mov	sl, r3
 8006616:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800661a:	d807      	bhi.n	800662c <_printf_i+0x28>
 800661c:	2f62      	cmp	r7, #98	@ 0x62
 800661e:	d80a      	bhi.n	8006636 <_printf_i+0x32>
 8006620:	2f00      	cmp	r7, #0
 8006622:	f000 80d2 	beq.w	80067ca <_printf_i+0x1c6>
 8006626:	2f58      	cmp	r7, #88	@ 0x58
 8006628:	f000 80b9 	beq.w	800679e <_printf_i+0x19a>
 800662c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006630:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006634:	e03a      	b.n	80066ac <_printf_i+0xa8>
 8006636:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800663a:	2b15      	cmp	r3, #21
 800663c:	d8f6      	bhi.n	800662c <_printf_i+0x28>
 800663e:	a101      	add	r1, pc, #4	@ (adr r1, 8006644 <_printf_i+0x40>)
 8006640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006644:	0800669d 	.word	0x0800669d
 8006648:	080066b1 	.word	0x080066b1
 800664c:	0800662d 	.word	0x0800662d
 8006650:	0800662d 	.word	0x0800662d
 8006654:	0800662d 	.word	0x0800662d
 8006658:	0800662d 	.word	0x0800662d
 800665c:	080066b1 	.word	0x080066b1
 8006660:	0800662d 	.word	0x0800662d
 8006664:	0800662d 	.word	0x0800662d
 8006668:	0800662d 	.word	0x0800662d
 800666c:	0800662d 	.word	0x0800662d
 8006670:	080067b1 	.word	0x080067b1
 8006674:	080066db 	.word	0x080066db
 8006678:	0800676b 	.word	0x0800676b
 800667c:	0800662d 	.word	0x0800662d
 8006680:	0800662d 	.word	0x0800662d
 8006684:	080067d3 	.word	0x080067d3
 8006688:	0800662d 	.word	0x0800662d
 800668c:	080066db 	.word	0x080066db
 8006690:	0800662d 	.word	0x0800662d
 8006694:	0800662d 	.word	0x0800662d
 8006698:	08006773 	.word	0x08006773
 800669c:	6833      	ldr	r3, [r6, #0]
 800669e:	1d1a      	adds	r2, r3, #4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6032      	str	r2, [r6, #0]
 80066a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066ac:	2301      	movs	r3, #1
 80066ae:	e09d      	b.n	80067ec <_printf_i+0x1e8>
 80066b0:	6833      	ldr	r3, [r6, #0]
 80066b2:	6820      	ldr	r0, [r4, #0]
 80066b4:	1d19      	adds	r1, r3, #4
 80066b6:	6031      	str	r1, [r6, #0]
 80066b8:	0606      	lsls	r6, r0, #24
 80066ba:	d501      	bpl.n	80066c0 <_printf_i+0xbc>
 80066bc:	681d      	ldr	r5, [r3, #0]
 80066be:	e003      	b.n	80066c8 <_printf_i+0xc4>
 80066c0:	0645      	lsls	r5, r0, #25
 80066c2:	d5fb      	bpl.n	80066bc <_printf_i+0xb8>
 80066c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066c8:	2d00      	cmp	r5, #0
 80066ca:	da03      	bge.n	80066d4 <_printf_i+0xd0>
 80066cc:	232d      	movs	r3, #45	@ 0x2d
 80066ce:	426d      	negs	r5, r5
 80066d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066d4:	4859      	ldr	r0, [pc, #356]	@ (800683c <_printf_i+0x238>)
 80066d6:	230a      	movs	r3, #10
 80066d8:	e011      	b.n	80066fe <_printf_i+0xfa>
 80066da:	6821      	ldr	r1, [r4, #0]
 80066dc:	6833      	ldr	r3, [r6, #0]
 80066de:	0608      	lsls	r0, r1, #24
 80066e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80066e4:	d402      	bmi.n	80066ec <_printf_i+0xe8>
 80066e6:	0649      	lsls	r1, r1, #25
 80066e8:	bf48      	it	mi
 80066ea:	b2ad      	uxthmi	r5, r5
 80066ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80066ee:	4853      	ldr	r0, [pc, #332]	@ (800683c <_printf_i+0x238>)
 80066f0:	6033      	str	r3, [r6, #0]
 80066f2:	bf14      	ite	ne
 80066f4:	230a      	movne	r3, #10
 80066f6:	2308      	moveq	r3, #8
 80066f8:	2100      	movs	r1, #0
 80066fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066fe:	6866      	ldr	r6, [r4, #4]
 8006700:	60a6      	str	r6, [r4, #8]
 8006702:	2e00      	cmp	r6, #0
 8006704:	bfa2      	ittt	ge
 8006706:	6821      	ldrge	r1, [r4, #0]
 8006708:	f021 0104 	bicge.w	r1, r1, #4
 800670c:	6021      	strge	r1, [r4, #0]
 800670e:	b90d      	cbnz	r5, 8006714 <_printf_i+0x110>
 8006710:	2e00      	cmp	r6, #0
 8006712:	d04b      	beq.n	80067ac <_printf_i+0x1a8>
 8006714:	4616      	mov	r6, r2
 8006716:	fbb5 f1f3 	udiv	r1, r5, r3
 800671a:	fb03 5711 	mls	r7, r3, r1, r5
 800671e:	5dc7      	ldrb	r7, [r0, r7]
 8006720:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006724:	462f      	mov	r7, r5
 8006726:	42bb      	cmp	r3, r7
 8006728:	460d      	mov	r5, r1
 800672a:	d9f4      	bls.n	8006716 <_printf_i+0x112>
 800672c:	2b08      	cmp	r3, #8
 800672e:	d10b      	bne.n	8006748 <_printf_i+0x144>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	07df      	lsls	r7, r3, #31
 8006734:	d508      	bpl.n	8006748 <_printf_i+0x144>
 8006736:	6923      	ldr	r3, [r4, #16]
 8006738:	6861      	ldr	r1, [r4, #4]
 800673a:	4299      	cmp	r1, r3
 800673c:	bfde      	ittt	le
 800673e:	2330      	movle	r3, #48	@ 0x30
 8006740:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006744:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006748:	1b92      	subs	r2, r2, r6
 800674a:	6122      	str	r2, [r4, #16]
 800674c:	f8cd a000 	str.w	sl, [sp]
 8006750:	464b      	mov	r3, r9
 8006752:	aa03      	add	r2, sp, #12
 8006754:	4621      	mov	r1, r4
 8006756:	4640      	mov	r0, r8
 8006758:	f7ff fee6 	bl	8006528 <_printf_common>
 800675c:	3001      	adds	r0, #1
 800675e:	d14a      	bne.n	80067f6 <_printf_i+0x1f2>
 8006760:	f04f 30ff 	mov.w	r0, #4294967295
 8006764:	b004      	add	sp, #16
 8006766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	f043 0320 	orr.w	r3, r3, #32
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	4833      	ldr	r0, [pc, #204]	@ (8006840 <_printf_i+0x23c>)
 8006774:	2778      	movs	r7, #120	@ 0x78
 8006776:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	6831      	ldr	r1, [r6, #0]
 800677e:	061f      	lsls	r7, r3, #24
 8006780:	f851 5b04 	ldr.w	r5, [r1], #4
 8006784:	d402      	bmi.n	800678c <_printf_i+0x188>
 8006786:	065f      	lsls	r7, r3, #25
 8006788:	bf48      	it	mi
 800678a:	b2ad      	uxthmi	r5, r5
 800678c:	6031      	str	r1, [r6, #0]
 800678e:	07d9      	lsls	r1, r3, #31
 8006790:	bf44      	itt	mi
 8006792:	f043 0320 	orrmi.w	r3, r3, #32
 8006796:	6023      	strmi	r3, [r4, #0]
 8006798:	b11d      	cbz	r5, 80067a2 <_printf_i+0x19e>
 800679a:	2310      	movs	r3, #16
 800679c:	e7ac      	b.n	80066f8 <_printf_i+0xf4>
 800679e:	4827      	ldr	r0, [pc, #156]	@ (800683c <_printf_i+0x238>)
 80067a0:	e7e9      	b.n	8006776 <_printf_i+0x172>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	f023 0320 	bic.w	r3, r3, #32
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	e7f6      	b.n	800679a <_printf_i+0x196>
 80067ac:	4616      	mov	r6, r2
 80067ae:	e7bd      	b.n	800672c <_printf_i+0x128>
 80067b0:	6833      	ldr	r3, [r6, #0]
 80067b2:	6825      	ldr	r5, [r4, #0]
 80067b4:	6961      	ldr	r1, [r4, #20]
 80067b6:	1d18      	adds	r0, r3, #4
 80067b8:	6030      	str	r0, [r6, #0]
 80067ba:	062e      	lsls	r6, r5, #24
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	d501      	bpl.n	80067c4 <_printf_i+0x1c0>
 80067c0:	6019      	str	r1, [r3, #0]
 80067c2:	e002      	b.n	80067ca <_printf_i+0x1c6>
 80067c4:	0668      	lsls	r0, r5, #25
 80067c6:	d5fb      	bpl.n	80067c0 <_printf_i+0x1bc>
 80067c8:	8019      	strh	r1, [r3, #0]
 80067ca:	2300      	movs	r3, #0
 80067cc:	6123      	str	r3, [r4, #16]
 80067ce:	4616      	mov	r6, r2
 80067d0:	e7bc      	b.n	800674c <_printf_i+0x148>
 80067d2:	6833      	ldr	r3, [r6, #0]
 80067d4:	1d1a      	adds	r2, r3, #4
 80067d6:	6032      	str	r2, [r6, #0]
 80067d8:	681e      	ldr	r6, [r3, #0]
 80067da:	6862      	ldr	r2, [r4, #4]
 80067dc:	2100      	movs	r1, #0
 80067de:	4630      	mov	r0, r6
 80067e0:	f7f9 fd0e 	bl	8000200 <memchr>
 80067e4:	b108      	cbz	r0, 80067ea <_printf_i+0x1e6>
 80067e6:	1b80      	subs	r0, r0, r6
 80067e8:	6060      	str	r0, [r4, #4]
 80067ea:	6863      	ldr	r3, [r4, #4]
 80067ec:	6123      	str	r3, [r4, #16]
 80067ee:	2300      	movs	r3, #0
 80067f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067f4:	e7aa      	b.n	800674c <_printf_i+0x148>
 80067f6:	6923      	ldr	r3, [r4, #16]
 80067f8:	4632      	mov	r2, r6
 80067fa:	4649      	mov	r1, r9
 80067fc:	4640      	mov	r0, r8
 80067fe:	47d0      	blx	sl
 8006800:	3001      	adds	r0, #1
 8006802:	d0ad      	beq.n	8006760 <_printf_i+0x15c>
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	079b      	lsls	r3, r3, #30
 8006808:	d413      	bmi.n	8006832 <_printf_i+0x22e>
 800680a:	68e0      	ldr	r0, [r4, #12]
 800680c:	9b03      	ldr	r3, [sp, #12]
 800680e:	4298      	cmp	r0, r3
 8006810:	bfb8      	it	lt
 8006812:	4618      	movlt	r0, r3
 8006814:	e7a6      	b.n	8006764 <_printf_i+0x160>
 8006816:	2301      	movs	r3, #1
 8006818:	4632      	mov	r2, r6
 800681a:	4649      	mov	r1, r9
 800681c:	4640      	mov	r0, r8
 800681e:	47d0      	blx	sl
 8006820:	3001      	adds	r0, #1
 8006822:	d09d      	beq.n	8006760 <_printf_i+0x15c>
 8006824:	3501      	adds	r5, #1
 8006826:	68e3      	ldr	r3, [r4, #12]
 8006828:	9903      	ldr	r1, [sp, #12]
 800682a:	1a5b      	subs	r3, r3, r1
 800682c:	42ab      	cmp	r3, r5
 800682e:	dcf2      	bgt.n	8006816 <_printf_i+0x212>
 8006830:	e7eb      	b.n	800680a <_printf_i+0x206>
 8006832:	2500      	movs	r5, #0
 8006834:	f104 0619 	add.w	r6, r4, #25
 8006838:	e7f5      	b.n	8006826 <_printf_i+0x222>
 800683a:	bf00      	nop
 800683c:	0800aaea 	.word	0x0800aaea
 8006840:	0800aafb 	.word	0x0800aafb

08006844 <_scanf_float>:
 8006844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006848:	b087      	sub	sp, #28
 800684a:	4617      	mov	r7, r2
 800684c:	9303      	str	r3, [sp, #12]
 800684e:	688b      	ldr	r3, [r1, #8]
 8006850:	1e5a      	subs	r2, r3, #1
 8006852:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006856:	bf81      	itttt	hi
 8006858:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800685c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006860:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006864:	608b      	strhi	r3, [r1, #8]
 8006866:	680b      	ldr	r3, [r1, #0]
 8006868:	460a      	mov	r2, r1
 800686a:	f04f 0500 	mov.w	r5, #0
 800686e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006872:	f842 3b1c 	str.w	r3, [r2], #28
 8006876:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800687a:	4680      	mov	r8, r0
 800687c:	460c      	mov	r4, r1
 800687e:	bf98      	it	ls
 8006880:	f04f 0b00 	movls.w	fp, #0
 8006884:	9201      	str	r2, [sp, #4]
 8006886:	4616      	mov	r6, r2
 8006888:	46aa      	mov	sl, r5
 800688a:	46a9      	mov	r9, r5
 800688c:	9502      	str	r5, [sp, #8]
 800688e:	68a2      	ldr	r2, [r4, #8]
 8006890:	b152      	cbz	r2, 80068a8 <_scanf_float+0x64>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b4e      	cmp	r3, #78	@ 0x4e
 8006898:	d864      	bhi.n	8006964 <_scanf_float+0x120>
 800689a:	2b40      	cmp	r3, #64	@ 0x40
 800689c:	d83c      	bhi.n	8006918 <_scanf_float+0xd4>
 800689e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80068a2:	b2c8      	uxtb	r0, r1
 80068a4:	280e      	cmp	r0, #14
 80068a6:	d93a      	bls.n	800691e <_scanf_float+0xda>
 80068a8:	f1b9 0f00 	cmp.w	r9, #0
 80068ac:	d003      	beq.n	80068b6 <_scanf_float+0x72>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068ba:	f1ba 0f01 	cmp.w	sl, #1
 80068be:	f200 8117 	bhi.w	8006af0 <_scanf_float+0x2ac>
 80068c2:	9b01      	ldr	r3, [sp, #4]
 80068c4:	429e      	cmp	r6, r3
 80068c6:	f200 8108 	bhi.w	8006ada <_scanf_float+0x296>
 80068ca:	2001      	movs	r0, #1
 80068cc:	b007      	add	sp, #28
 80068ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80068d6:	2a0d      	cmp	r2, #13
 80068d8:	d8e6      	bhi.n	80068a8 <_scanf_float+0x64>
 80068da:	a101      	add	r1, pc, #4	@ (adr r1, 80068e0 <_scanf_float+0x9c>)
 80068dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80068e0:	08006a27 	.word	0x08006a27
 80068e4:	080068a9 	.word	0x080068a9
 80068e8:	080068a9 	.word	0x080068a9
 80068ec:	080068a9 	.word	0x080068a9
 80068f0:	08006a87 	.word	0x08006a87
 80068f4:	08006a5f 	.word	0x08006a5f
 80068f8:	080068a9 	.word	0x080068a9
 80068fc:	080068a9 	.word	0x080068a9
 8006900:	08006a35 	.word	0x08006a35
 8006904:	080068a9 	.word	0x080068a9
 8006908:	080068a9 	.word	0x080068a9
 800690c:	080068a9 	.word	0x080068a9
 8006910:	080068a9 	.word	0x080068a9
 8006914:	080069ed 	.word	0x080069ed
 8006918:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800691c:	e7db      	b.n	80068d6 <_scanf_float+0x92>
 800691e:	290e      	cmp	r1, #14
 8006920:	d8c2      	bhi.n	80068a8 <_scanf_float+0x64>
 8006922:	a001      	add	r0, pc, #4	@ (adr r0, 8006928 <_scanf_float+0xe4>)
 8006924:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006928:	080069dd 	.word	0x080069dd
 800692c:	080068a9 	.word	0x080068a9
 8006930:	080069dd 	.word	0x080069dd
 8006934:	08006a73 	.word	0x08006a73
 8006938:	080068a9 	.word	0x080068a9
 800693c:	08006985 	.word	0x08006985
 8006940:	080069c3 	.word	0x080069c3
 8006944:	080069c3 	.word	0x080069c3
 8006948:	080069c3 	.word	0x080069c3
 800694c:	080069c3 	.word	0x080069c3
 8006950:	080069c3 	.word	0x080069c3
 8006954:	080069c3 	.word	0x080069c3
 8006958:	080069c3 	.word	0x080069c3
 800695c:	080069c3 	.word	0x080069c3
 8006960:	080069c3 	.word	0x080069c3
 8006964:	2b6e      	cmp	r3, #110	@ 0x6e
 8006966:	d809      	bhi.n	800697c <_scanf_float+0x138>
 8006968:	2b60      	cmp	r3, #96	@ 0x60
 800696a:	d8b2      	bhi.n	80068d2 <_scanf_float+0x8e>
 800696c:	2b54      	cmp	r3, #84	@ 0x54
 800696e:	d07b      	beq.n	8006a68 <_scanf_float+0x224>
 8006970:	2b59      	cmp	r3, #89	@ 0x59
 8006972:	d199      	bne.n	80068a8 <_scanf_float+0x64>
 8006974:	2d07      	cmp	r5, #7
 8006976:	d197      	bne.n	80068a8 <_scanf_float+0x64>
 8006978:	2508      	movs	r5, #8
 800697a:	e02c      	b.n	80069d6 <_scanf_float+0x192>
 800697c:	2b74      	cmp	r3, #116	@ 0x74
 800697e:	d073      	beq.n	8006a68 <_scanf_float+0x224>
 8006980:	2b79      	cmp	r3, #121	@ 0x79
 8006982:	e7f6      	b.n	8006972 <_scanf_float+0x12e>
 8006984:	6821      	ldr	r1, [r4, #0]
 8006986:	05c8      	lsls	r0, r1, #23
 8006988:	d51b      	bpl.n	80069c2 <_scanf_float+0x17e>
 800698a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800698e:	6021      	str	r1, [r4, #0]
 8006990:	f109 0901 	add.w	r9, r9, #1
 8006994:	f1bb 0f00 	cmp.w	fp, #0
 8006998:	d003      	beq.n	80069a2 <_scanf_float+0x15e>
 800699a:	3201      	adds	r2, #1
 800699c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069a0:	60a2      	str	r2, [r4, #8]
 80069a2:	68a3      	ldr	r3, [r4, #8]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	60a3      	str	r3, [r4, #8]
 80069a8:	6923      	ldr	r3, [r4, #16]
 80069aa:	3301      	adds	r3, #1
 80069ac:	6123      	str	r3, [r4, #16]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	607b      	str	r3, [r7, #4]
 80069b6:	f340 8087 	ble.w	8006ac8 <_scanf_float+0x284>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	3301      	adds	r3, #1
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	e765      	b.n	800688e <_scanf_float+0x4a>
 80069c2:	eb1a 0105 	adds.w	r1, sl, r5
 80069c6:	f47f af6f 	bne.w	80068a8 <_scanf_float+0x64>
 80069ca:	6822      	ldr	r2, [r4, #0]
 80069cc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80069d0:	6022      	str	r2, [r4, #0]
 80069d2:	460d      	mov	r5, r1
 80069d4:	468a      	mov	sl, r1
 80069d6:	f806 3b01 	strb.w	r3, [r6], #1
 80069da:	e7e2      	b.n	80069a2 <_scanf_float+0x15e>
 80069dc:	6822      	ldr	r2, [r4, #0]
 80069de:	0610      	lsls	r0, r2, #24
 80069e0:	f57f af62 	bpl.w	80068a8 <_scanf_float+0x64>
 80069e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069e8:	6022      	str	r2, [r4, #0]
 80069ea:	e7f4      	b.n	80069d6 <_scanf_float+0x192>
 80069ec:	f1ba 0f00 	cmp.w	sl, #0
 80069f0:	d10e      	bne.n	8006a10 <_scanf_float+0x1cc>
 80069f2:	f1b9 0f00 	cmp.w	r9, #0
 80069f6:	d10e      	bne.n	8006a16 <_scanf_float+0x1d2>
 80069f8:	6822      	ldr	r2, [r4, #0]
 80069fa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80069fe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006a02:	d108      	bne.n	8006a16 <_scanf_float+0x1d2>
 8006a04:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a08:	6022      	str	r2, [r4, #0]
 8006a0a:	f04f 0a01 	mov.w	sl, #1
 8006a0e:	e7e2      	b.n	80069d6 <_scanf_float+0x192>
 8006a10:	f1ba 0f02 	cmp.w	sl, #2
 8006a14:	d055      	beq.n	8006ac2 <_scanf_float+0x27e>
 8006a16:	2d01      	cmp	r5, #1
 8006a18:	d002      	beq.n	8006a20 <_scanf_float+0x1dc>
 8006a1a:	2d04      	cmp	r5, #4
 8006a1c:	f47f af44 	bne.w	80068a8 <_scanf_float+0x64>
 8006a20:	3501      	adds	r5, #1
 8006a22:	b2ed      	uxtb	r5, r5
 8006a24:	e7d7      	b.n	80069d6 <_scanf_float+0x192>
 8006a26:	f1ba 0f01 	cmp.w	sl, #1
 8006a2a:	f47f af3d 	bne.w	80068a8 <_scanf_float+0x64>
 8006a2e:	f04f 0a02 	mov.w	sl, #2
 8006a32:	e7d0      	b.n	80069d6 <_scanf_float+0x192>
 8006a34:	b97d      	cbnz	r5, 8006a56 <_scanf_float+0x212>
 8006a36:	f1b9 0f00 	cmp.w	r9, #0
 8006a3a:	f47f af38 	bne.w	80068ae <_scanf_float+0x6a>
 8006a3e:	6822      	ldr	r2, [r4, #0]
 8006a40:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006a44:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006a48:	f040 8108 	bne.w	8006c5c <_scanf_float+0x418>
 8006a4c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a50:	6022      	str	r2, [r4, #0]
 8006a52:	2501      	movs	r5, #1
 8006a54:	e7bf      	b.n	80069d6 <_scanf_float+0x192>
 8006a56:	2d03      	cmp	r5, #3
 8006a58:	d0e2      	beq.n	8006a20 <_scanf_float+0x1dc>
 8006a5a:	2d05      	cmp	r5, #5
 8006a5c:	e7de      	b.n	8006a1c <_scanf_float+0x1d8>
 8006a5e:	2d02      	cmp	r5, #2
 8006a60:	f47f af22 	bne.w	80068a8 <_scanf_float+0x64>
 8006a64:	2503      	movs	r5, #3
 8006a66:	e7b6      	b.n	80069d6 <_scanf_float+0x192>
 8006a68:	2d06      	cmp	r5, #6
 8006a6a:	f47f af1d 	bne.w	80068a8 <_scanf_float+0x64>
 8006a6e:	2507      	movs	r5, #7
 8006a70:	e7b1      	b.n	80069d6 <_scanf_float+0x192>
 8006a72:	6822      	ldr	r2, [r4, #0]
 8006a74:	0591      	lsls	r1, r2, #22
 8006a76:	f57f af17 	bpl.w	80068a8 <_scanf_float+0x64>
 8006a7a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006a7e:	6022      	str	r2, [r4, #0]
 8006a80:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a84:	e7a7      	b.n	80069d6 <_scanf_float+0x192>
 8006a86:	6822      	ldr	r2, [r4, #0]
 8006a88:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006a8c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006a90:	d006      	beq.n	8006aa0 <_scanf_float+0x25c>
 8006a92:	0550      	lsls	r0, r2, #21
 8006a94:	f57f af08 	bpl.w	80068a8 <_scanf_float+0x64>
 8006a98:	f1b9 0f00 	cmp.w	r9, #0
 8006a9c:	f000 80de 	beq.w	8006c5c <_scanf_float+0x418>
 8006aa0:	0591      	lsls	r1, r2, #22
 8006aa2:	bf58      	it	pl
 8006aa4:	9902      	ldrpl	r1, [sp, #8]
 8006aa6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006aaa:	bf58      	it	pl
 8006aac:	eba9 0101 	subpl.w	r1, r9, r1
 8006ab0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006ab4:	bf58      	it	pl
 8006ab6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006aba:	6022      	str	r2, [r4, #0]
 8006abc:	f04f 0900 	mov.w	r9, #0
 8006ac0:	e789      	b.n	80069d6 <_scanf_float+0x192>
 8006ac2:	f04f 0a03 	mov.w	sl, #3
 8006ac6:	e786      	b.n	80069d6 <_scanf_float+0x192>
 8006ac8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006acc:	4639      	mov	r1, r7
 8006ace:	4640      	mov	r0, r8
 8006ad0:	4798      	blx	r3
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	f43f aedb 	beq.w	800688e <_scanf_float+0x4a>
 8006ad8:	e6e6      	b.n	80068a8 <_scanf_float+0x64>
 8006ada:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ade:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ae2:	463a      	mov	r2, r7
 8006ae4:	4640      	mov	r0, r8
 8006ae6:	4798      	blx	r3
 8006ae8:	6923      	ldr	r3, [r4, #16]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	6123      	str	r3, [r4, #16]
 8006aee:	e6e8      	b.n	80068c2 <_scanf_float+0x7e>
 8006af0:	1e6b      	subs	r3, r5, #1
 8006af2:	2b06      	cmp	r3, #6
 8006af4:	d824      	bhi.n	8006b40 <_scanf_float+0x2fc>
 8006af6:	2d02      	cmp	r5, #2
 8006af8:	d836      	bhi.n	8006b68 <_scanf_float+0x324>
 8006afa:	9b01      	ldr	r3, [sp, #4]
 8006afc:	429e      	cmp	r6, r3
 8006afe:	f67f aee4 	bls.w	80068ca <_scanf_float+0x86>
 8006b02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b0a:	463a      	mov	r2, r7
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	4798      	blx	r3
 8006b10:	6923      	ldr	r3, [r4, #16]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	6123      	str	r3, [r4, #16]
 8006b16:	e7f0      	b.n	8006afa <_scanf_float+0x2b6>
 8006b18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b1c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006b20:	463a      	mov	r2, r7
 8006b22:	4640      	mov	r0, r8
 8006b24:	4798      	blx	r3
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	6123      	str	r3, [r4, #16]
 8006b2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b30:	fa5f fa8a 	uxtb.w	sl, sl
 8006b34:	f1ba 0f02 	cmp.w	sl, #2
 8006b38:	d1ee      	bne.n	8006b18 <_scanf_float+0x2d4>
 8006b3a:	3d03      	subs	r5, #3
 8006b3c:	b2ed      	uxtb	r5, r5
 8006b3e:	1b76      	subs	r6, r6, r5
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	05da      	lsls	r2, r3, #23
 8006b44:	d530      	bpl.n	8006ba8 <_scanf_float+0x364>
 8006b46:	055b      	lsls	r3, r3, #21
 8006b48:	d511      	bpl.n	8006b6e <_scanf_float+0x32a>
 8006b4a:	9b01      	ldr	r3, [sp, #4]
 8006b4c:	429e      	cmp	r6, r3
 8006b4e:	f67f aebc 	bls.w	80068ca <_scanf_float+0x86>
 8006b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b5a:	463a      	mov	r2, r7
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	4798      	blx	r3
 8006b60:	6923      	ldr	r3, [r4, #16]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	6123      	str	r3, [r4, #16]
 8006b66:	e7f0      	b.n	8006b4a <_scanf_float+0x306>
 8006b68:	46aa      	mov	sl, r5
 8006b6a:	46b3      	mov	fp, r6
 8006b6c:	e7de      	b.n	8006b2c <_scanf_float+0x2e8>
 8006b6e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b72:	6923      	ldr	r3, [r4, #16]
 8006b74:	2965      	cmp	r1, #101	@ 0x65
 8006b76:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b7a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006b7e:	6123      	str	r3, [r4, #16]
 8006b80:	d00c      	beq.n	8006b9c <_scanf_float+0x358>
 8006b82:	2945      	cmp	r1, #69	@ 0x45
 8006b84:	d00a      	beq.n	8006b9c <_scanf_float+0x358>
 8006b86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b8a:	463a      	mov	r2, r7
 8006b8c:	4640      	mov	r0, r8
 8006b8e:	4798      	blx	r3
 8006b90:	6923      	ldr	r3, [r4, #16]
 8006b92:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	1eb5      	subs	r5, r6, #2
 8006b9a:	6123      	str	r3, [r4, #16]
 8006b9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ba0:	463a      	mov	r2, r7
 8006ba2:	4640      	mov	r0, r8
 8006ba4:	4798      	blx	r3
 8006ba6:	462e      	mov	r6, r5
 8006ba8:	6822      	ldr	r2, [r4, #0]
 8006baa:	f012 0210 	ands.w	r2, r2, #16
 8006bae:	d001      	beq.n	8006bb4 <_scanf_float+0x370>
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	e68b      	b.n	80068cc <_scanf_float+0x88>
 8006bb4:	7032      	strb	r2, [r6, #0]
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bc0:	d11c      	bne.n	8006bfc <_scanf_float+0x3b8>
 8006bc2:	9b02      	ldr	r3, [sp, #8]
 8006bc4:	454b      	cmp	r3, r9
 8006bc6:	eba3 0209 	sub.w	r2, r3, r9
 8006bca:	d123      	bne.n	8006c14 <_scanf_float+0x3d0>
 8006bcc:	9901      	ldr	r1, [sp, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	4640      	mov	r0, r8
 8006bd2:	f002 fbf9 	bl	80093c8 <_strtod_r>
 8006bd6:	9b03      	ldr	r3, [sp, #12]
 8006bd8:	6821      	ldr	r1, [r4, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f011 0f02 	tst.w	r1, #2
 8006be0:	ec57 6b10 	vmov	r6, r7, d0
 8006be4:	f103 0204 	add.w	r2, r3, #4
 8006be8:	d01f      	beq.n	8006c2a <_scanf_float+0x3e6>
 8006bea:	9903      	ldr	r1, [sp, #12]
 8006bec:	600a      	str	r2, [r1, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	e9c3 6700 	strd	r6, r7, [r3]
 8006bf4:	68e3      	ldr	r3, [r4, #12]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	60e3      	str	r3, [r4, #12]
 8006bfa:	e7d9      	b.n	8006bb0 <_scanf_float+0x36c>
 8006bfc:	9b04      	ldr	r3, [sp, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0e4      	beq.n	8006bcc <_scanf_float+0x388>
 8006c02:	9905      	ldr	r1, [sp, #20]
 8006c04:	230a      	movs	r3, #10
 8006c06:	3101      	adds	r1, #1
 8006c08:	4640      	mov	r0, r8
 8006c0a:	f002 fc5d 	bl	80094c8 <_strtol_r>
 8006c0e:	9b04      	ldr	r3, [sp, #16]
 8006c10:	9e05      	ldr	r6, [sp, #20]
 8006c12:	1ac2      	subs	r2, r0, r3
 8006c14:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006c18:	429e      	cmp	r6, r3
 8006c1a:	bf28      	it	cs
 8006c1c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006c20:	4910      	ldr	r1, [pc, #64]	@ (8006c64 <_scanf_float+0x420>)
 8006c22:	4630      	mov	r0, r6
 8006c24:	f000 f8e4 	bl	8006df0 <siprintf>
 8006c28:	e7d0      	b.n	8006bcc <_scanf_float+0x388>
 8006c2a:	f011 0f04 	tst.w	r1, #4
 8006c2e:	9903      	ldr	r1, [sp, #12]
 8006c30:	600a      	str	r2, [r1, #0]
 8006c32:	d1dc      	bne.n	8006bee <_scanf_float+0x3aa>
 8006c34:	681d      	ldr	r5, [r3, #0]
 8006c36:	4632      	mov	r2, r6
 8006c38:	463b      	mov	r3, r7
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	4639      	mov	r1, r7
 8006c3e:	f7f9 ff8d 	bl	8000b5c <__aeabi_dcmpun>
 8006c42:	b128      	cbz	r0, 8006c50 <_scanf_float+0x40c>
 8006c44:	4808      	ldr	r0, [pc, #32]	@ (8006c68 <_scanf_float+0x424>)
 8006c46:	f000 f9b7 	bl	8006fb8 <nanf>
 8006c4a:	ed85 0a00 	vstr	s0, [r5]
 8006c4e:	e7d1      	b.n	8006bf4 <_scanf_float+0x3b0>
 8006c50:	4630      	mov	r0, r6
 8006c52:	4639      	mov	r1, r7
 8006c54:	f7f9 ffe0 	bl	8000c18 <__aeabi_d2f>
 8006c58:	6028      	str	r0, [r5, #0]
 8006c5a:	e7cb      	b.n	8006bf4 <_scanf_float+0x3b0>
 8006c5c:	f04f 0900 	mov.w	r9, #0
 8006c60:	e629      	b.n	80068b6 <_scanf_float+0x72>
 8006c62:	bf00      	nop
 8006c64:	0800ab0c 	.word	0x0800ab0c
 8006c68:	0800aea5 	.word	0x0800aea5

08006c6c <std>:
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	b510      	push	{r4, lr}
 8006c70:	4604      	mov	r4, r0
 8006c72:	e9c0 3300 	strd	r3, r3, [r0]
 8006c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c7a:	6083      	str	r3, [r0, #8]
 8006c7c:	8181      	strh	r1, [r0, #12]
 8006c7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c80:	81c2      	strh	r2, [r0, #14]
 8006c82:	6183      	str	r3, [r0, #24]
 8006c84:	4619      	mov	r1, r3
 8006c86:	2208      	movs	r2, #8
 8006c88:	305c      	adds	r0, #92	@ 0x5c
 8006c8a:	f000 f914 	bl	8006eb6 <memset>
 8006c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc4 <std+0x58>)
 8006c90:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c92:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc8 <std+0x5c>)
 8006c94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c96:	4b0d      	ldr	r3, [pc, #52]	@ (8006ccc <std+0x60>)
 8006c98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd0 <std+0x64>)
 8006c9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd4 <std+0x68>)
 8006ca0:	6224      	str	r4, [r4, #32]
 8006ca2:	429c      	cmp	r4, r3
 8006ca4:	d006      	beq.n	8006cb4 <std+0x48>
 8006ca6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006caa:	4294      	cmp	r4, r2
 8006cac:	d002      	beq.n	8006cb4 <std+0x48>
 8006cae:	33d0      	adds	r3, #208	@ 0xd0
 8006cb0:	429c      	cmp	r4, r3
 8006cb2:	d105      	bne.n	8006cc0 <std+0x54>
 8006cb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cbc:	f000 b978 	b.w	8006fb0 <__retarget_lock_init_recursive>
 8006cc0:	bd10      	pop	{r4, pc}
 8006cc2:	bf00      	nop
 8006cc4:	08006e31 	.word	0x08006e31
 8006cc8:	08006e53 	.word	0x08006e53
 8006ccc:	08006e8b 	.word	0x08006e8b
 8006cd0:	08006eaf 	.word	0x08006eaf
 8006cd4:	200006ac 	.word	0x200006ac

08006cd8 <stdio_exit_handler>:
 8006cd8:	4a02      	ldr	r2, [pc, #8]	@ (8006ce4 <stdio_exit_handler+0xc>)
 8006cda:	4903      	ldr	r1, [pc, #12]	@ (8006ce8 <stdio_exit_handler+0x10>)
 8006cdc:	4803      	ldr	r0, [pc, #12]	@ (8006cec <stdio_exit_handler+0x14>)
 8006cde:	f000 b869 	b.w	8006db4 <_fwalk_sglue>
 8006ce2:	bf00      	nop
 8006ce4:	2000001c 	.word	0x2000001c
 8006ce8:	08009885 	.word	0x08009885
 8006cec:	2000002c 	.word	0x2000002c

08006cf0 <cleanup_stdio>:
 8006cf0:	6841      	ldr	r1, [r0, #4]
 8006cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d24 <cleanup_stdio+0x34>)
 8006cf4:	4299      	cmp	r1, r3
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	d001      	beq.n	8006d00 <cleanup_stdio+0x10>
 8006cfc:	f002 fdc2 	bl	8009884 <_fflush_r>
 8006d00:	68a1      	ldr	r1, [r4, #8]
 8006d02:	4b09      	ldr	r3, [pc, #36]	@ (8006d28 <cleanup_stdio+0x38>)
 8006d04:	4299      	cmp	r1, r3
 8006d06:	d002      	beq.n	8006d0e <cleanup_stdio+0x1e>
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f002 fdbb 	bl	8009884 <_fflush_r>
 8006d0e:	68e1      	ldr	r1, [r4, #12]
 8006d10:	4b06      	ldr	r3, [pc, #24]	@ (8006d2c <cleanup_stdio+0x3c>)
 8006d12:	4299      	cmp	r1, r3
 8006d14:	d004      	beq.n	8006d20 <cleanup_stdio+0x30>
 8006d16:	4620      	mov	r0, r4
 8006d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d1c:	f002 bdb2 	b.w	8009884 <_fflush_r>
 8006d20:	bd10      	pop	{r4, pc}
 8006d22:	bf00      	nop
 8006d24:	200006ac 	.word	0x200006ac
 8006d28:	20000714 	.word	0x20000714
 8006d2c:	2000077c 	.word	0x2000077c

08006d30 <global_stdio_init.part.0>:
 8006d30:	b510      	push	{r4, lr}
 8006d32:	4b0b      	ldr	r3, [pc, #44]	@ (8006d60 <global_stdio_init.part.0+0x30>)
 8006d34:	4c0b      	ldr	r4, [pc, #44]	@ (8006d64 <global_stdio_init.part.0+0x34>)
 8006d36:	4a0c      	ldr	r2, [pc, #48]	@ (8006d68 <global_stdio_init.part.0+0x38>)
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2104      	movs	r1, #4
 8006d40:	f7ff ff94 	bl	8006c6c <std>
 8006d44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d48:	2201      	movs	r2, #1
 8006d4a:	2109      	movs	r1, #9
 8006d4c:	f7ff ff8e 	bl	8006c6c <std>
 8006d50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d54:	2202      	movs	r2, #2
 8006d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d5a:	2112      	movs	r1, #18
 8006d5c:	f7ff bf86 	b.w	8006c6c <std>
 8006d60:	200007e4 	.word	0x200007e4
 8006d64:	200006ac 	.word	0x200006ac
 8006d68:	08006cd9 	.word	0x08006cd9

08006d6c <__sfp_lock_acquire>:
 8006d6c:	4801      	ldr	r0, [pc, #4]	@ (8006d74 <__sfp_lock_acquire+0x8>)
 8006d6e:	f000 b920 	b.w	8006fb2 <__retarget_lock_acquire_recursive>
 8006d72:	bf00      	nop
 8006d74:	200007ed 	.word	0x200007ed

08006d78 <__sfp_lock_release>:
 8006d78:	4801      	ldr	r0, [pc, #4]	@ (8006d80 <__sfp_lock_release+0x8>)
 8006d7a:	f000 b91b 	b.w	8006fb4 <__retarget_lock_release_recursive>
 8006d7e:	bf00      	nop
 8006d80:	200007ed 	.word	0x200007ed

08006d84 <__sinit>:
 8006d84:	b510      	push	{r4, lr}
 8006d86:	4604      	mov	r4, r0
 8006d88:	f7ff fff0 	bl	8006d6c <__sfp_lock_acquire>
 8006d8c:	6a23      	ldr	r3, [r4, #32]
 8006d8e:	b11b      	cbz	r3, 8006d98 <__sinit+0x14>
 8006d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d94:	f7ff bff0 	b.w	8006d78 <__sfp_lock_release>
 8006d98:	4b04      	ldr	r3, [pc, #16]	@ (8006dac <__sinit+0x28>)
 8006d9a:	6223      	str	r3, [r4, #32]
 8006d9c:	4b04      	ldr	r3, [pc, #16]	@ (8006db0 <__sinit+0x2c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1f5      	bne.n	8006d90 <__sinit+0xc>
 8006da4:	f7ff ffc4 	bl	8006d30 <global_stdio_init.part.0>
 8006da8:	e7f2      	b.n	8006d90 <__sinit+0xc>
 8006daa:	bf00      	nop
 8006dac:	08006cf1 	.word	0x08006cf1
 8006db0:	200007e4 	.word	0x200007e4

08006db4 <_fwalk_sglue>:
 8006db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db8:	4607      	mov	r7, r0
 8006dba:	4688      	mov	r8, r1
 8006dbc:	4614      	mov	r4, r2
 8006dbe:	2600      	movs	r6, #0
 8006dc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dc4:	f1b9 0901 	subs.w	r9, r9, #1
 8006dc8:	d505      	bpl.n	8006dd6 <_fwalk_sglue+0x22>
 8006dca:	6824      	ldr	r4, [r4, #0]
 8006dcc:	2c00      	cmp	r4, #0
 8006dce:	d1f7      	bne.n	8006dc0 <_fwalk_sglue+0xc>
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd6:	89ab      	ldrh	r3, [r5, #12]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d907      	bls.n	8006dec <_fwalk_sglue+0x38>
 8006ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006de0:	3301      	adds	r3, #1
 8006de2:	d003      	beq.n	8006dec <_fwalk_sglue+0x38>
 8006de4:	4629      	mov	r1, r5
 8006de6:	4638      	mov	r0, r7
 8006de8:	47c0      	blx	r8
 8006dea:	4306      	orrs	r6, r0
 8006dec:	3568      	adds	r5, #104	@ 0x68
 8006dee:	e7e9      	b.n	8006dc4 <_fwalk_sglue+0x10>

08006df0 <siprintf>:
 8006df0:	b40e      	push	{r1, r2, r3}
 8006df2:	b500      	push	{lr}
 8006df4:	b09c      	sub	sp, #112	@ 0x70
 8006df6:	ab1d      	add	r3, sp, #116	@ 0x74
 8006df8:	9002      	str	r0, [sp, #8]
 8006dfa:	9006      	str	r0, [sp, #24]
 8006dfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e00:	4809      	ldr	r0, [pc, #36]	@ (8006e28 <siprintf+0x38>)
 8006e02:	9107      	str	r1, [sp, #28]
 8006e04:	9104      	str	r1, [sp, #16]
 8006e06:	4909      	ldr	r1, [pc, #36]	@ (8006e2c <siprintf+0x3c>)
 8006e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e0c:	9105      	str	r1, [sp, #20]
 8006e0e:	6800      	ldr	r0, [r0, #0]
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	a902      	add	r1, sp, #8
 8006e14:	f002 fbb6 	bl	8009584 <_svfiprintf_r>
 8006e18:	9b02      	ldr	r3, [sp, #8]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	b01c      	add	sp, #112	@ 0x70
 8006e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e24:	b003      	add	sp, #12
 8006e26:	4770      	bx	lr
 8006e28:	20000028 	.word	0x20000028
 8006e2c:	ffff0208 	.word	0xffff0208

08006e30 <__sread>:
 8006e30:	b510      	push	{r4, lr}
 8006e32:	460c      	mov	r4, r1
 8006e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e38:	f000 f86c 	bl	8006f14 <_read_r>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	bfab      	itete	ge
 8006e40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e42:	89a3      	ldrhlt	r3, [r4, #12]
 8006e44:	181b      	addge	r3, r3, r0
 8006e46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e4a:	bfac      	ite	ge
 8006e4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e4e:	81a3      	strhlt	r3, [r4, #12]
 8006e50:	bd10      	pop	{r4, pc}

08006e52 <__swrite>:
 8006e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e56:	461f      	mov	r7, r3
 8006e58:	898b      	ldrh	r3, [r1, #12]
 8006e5a:	05db      	lsls	r3, r3, #23
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	460c      	mov	r4, r1
 8006e60:	4616      	mov	r6, r2
 8006e62:	d505      	bpl.n	8006e70 <__swrite+0x1e>
 8006e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e68:	2302      	movs	r3, #2
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f000 f840 	bl	8006ef0 <_lseek_r>
 8006e70:	89a3      	ldrh	r3, [r4, #12]
 8006e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e7a:	81a3      	strh	r3, [r4, #12]
 8006e7c:	4632      	mov	r2, r6
 8006e7e:	463b      	mov	r3, r7
 8006e80:	4628      	mov	r0, r5
 8006e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e86:	f000 b857 	b.w	8006f38 <_write_r>

08006e8a <__sseek>:
 8006e8a:	b510      	push	{r4, lr}
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e92:	f000 f82d 	bl	8006ef0 <_lseek_r>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	bf15      	itete	ne
 8006e9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ea2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ea6:	81a3      	strheq	r3, [r4, #12]
 8006ea8:	bf18      	it	ne
 8006eaa:	81a3      	strhne	r3, [r4, #12]
 8006eac:	bd10      	pop	{r4, pc}

08006eae <__sclose>:
 8006eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb2:	f000 b80d 	b.w	8006ed0 <_close_r>

08006eb6 <memset>:
 8006eb6:	4402      	add	r2, r0
 8006eb8:	4603      	mov	r3, r0
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d100      	bne.n	8006ec0 <memset+0xa>
 8006ebe:	4770      	bx	lr
 8006ec0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ec4:	e7f9      	b.n	8006eba <memset+0x4>
	...

08006ec8 <_localeconv_r>:
 8006ec8:	4800      	ldr	r0, [pc, #0]	@ (8006ecc <_localeconv_r+0x4>)
 8006eca:	4770      	bx	lr
 8006ecc:	20000168 	.word	0x20000168

08006ed0 <_close_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4d06      	ldr	r5, [pc, #24]	@ (8006eec <_close_r+0x1c>)
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	4608      	mov	r0, r1
 8006eda:	602b      	str	r3, [r5, #0]
 8006edc:	f7fb f9da 	bl	8002294 <_close>
 8006ee0:	1c43      	adds	r3, r0, #1
 8006ee2:	d102      	bne.n	8006eea <_close_r+0x1a>
 8006ee4:	682b      	ldr	r3, [r5, #0]
 8006ee6:	b103      	cbz	r3, 8006eea <_close_r+0x1a>
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	bd38      	pop	{r3, r4, r5, pc}
 8006eec:	200007e8 	.word	0x200007e8

08006ef0 <_lseek_r>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	4d07      	ldr	r5, [pc, #28]	@ (8006f10 <_lseek_r+0x20>)
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	4608      	mov	r0, r1
 8006ef8:	4611      	mov	r1, r2
 8006efa:	2200      	movs	r2, #0
 8006efc:	602a      	str	r2, [r5, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	f7fb f9ef 	bl	80022e2 <_lseek>
 8006f04:	1c43      	adds	r3, r0, #1
 8006f06:	d102      	bne.n	8006f0e <_lseek_r+0x1e>
 8006f08:	682b      	ldr	r3, [r5, #0]
 8006f0a:	b103      	cbz	r3, 8006f0e <_lseek_r+0x1e>
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
 8006f10:	200007e8 	.word	0x200007e8

08006f14 <_read_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	4d07      	ldr	r5, [pc, #28]	@ (8006f34 <_read_r+0x20>)
 8006f18:	4604      	mov	r4, r0
 8006f1a:	4608      	mov	r0, r1
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	2200      	movs	r2, #0
 8006f20:	602a      	str	r2, [r5, #0]
 8006f22:	461a      	mov	r2, r3
 8006f24:	f7fb f97d 	bl	8002222 <_read>
 8006f28:	1c43      	adds	r3, r0, #1
 8006f2a:	d102      	bne.n	8006f32 <_read_r+0x1e>
 8006f2c:	682b      	ldr	r3, [r5, #0]
 8006f2e:	b103      	cbz	r3, 8006f32 <_read_r+0x1e>
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	bd38      	pop	{r3, r4, r5, pc}
 8006f34:	200007e8 	.word	0x200007e8

08006f38 <_write_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4d07      	ldr	r5, [pc, #28]	@ (8006f58 <_write_r+0x20>)
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	4608      	mov	r0, r1
 8006f40:	4611      	mov	r1, r2
 8006f42:	2200      	movs	r2, #0
 8006f44:	602a      	str	r2, [r5, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	f7fb f988 	bl	800225c <_write>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d102      	bne.n	8006f56 <_write_r+0x1e>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	b103      	cbz	r3, 8006f56 <_write_r+0x1e>
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	200007e8 	.word	0x200007e8

08006f5c <__errno>:
 8006f5c:	4b01      	ldr	r3, [pc, #4]	@ (8006f64 <__errno+0x8>)
 8006f5e:	6818      	ldr	r0, [r3, #0]
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20000028 	.word	0x20000028

08006f68 <__libc_init_array>:
 8006f68:	b570      	push	{r4, r5, r6, lr}
 8006f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8006fa0 <__libc_init_array+0x38>)
 8006f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8006fa4 <__libc_init_array+0x3c>)
 8006f6e:	1b64      	subs	r4, r4, r5
 8006f70:	10a4      	asrs	r4, r4, #2
 8006f72:	2600      	movs	r6, #0
 8006f74:	42a6      	cmp	r6, r4
 8006f76:	d109      	bne.n	8006f8c <__libc_init_array+0x24>
 8006f78:	4d0b      	ldr	r5, [pc, #44]	@ (8006fa8 <__libc_init_array+0x40>)
 8006f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8006fac <__libc_init_array+0x44>)
 8006f7c:	f003 fd6a 	bl	800aa54 <_init>
 8006f80:	1b64      	subs	r4, r4, r5
 8006f82:	10a4      	asrs	r4, r4, #2
 8006f84:	2600      	movs	r6, #0
 8006f86:	42a6      	cmp	r6, r4
 8006f88:	d105      	bne.n	8006f96 <__libc_init_array+0x2e>
 8006f8a:	bd70      	pop	{r4, r5, r6, pc}
 8006f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f90:	4798      	blx	r3
 8006f92:	3601      	adds	r6, #1
 8006f94:	e7ee      	b.n	8006f74 <__libc_init_array+0xc>
 8006f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f9a:	4798      	blx	r3
 8006f9c:	3601      	adds	r6, #1
 8006f9e:	e7f2      	b.n	8006f86 <__libc_init_array+0x1e>
 8006fa0:	0800af10 	.word	0x0800af10
 8006fa4:	0800af10 	.word	0x0800af10
 8006fa8:	0800af10 	.word	0x0800af10
 8006fac:	0800af14 	.word	0x0800af14

08006fb0 <__retarget_lock_init_recursive>:
 8006fb0:	4770      	bx	lr

08006fb2 <__retarget_lock_acquire_recursive>:
 8006fb2:	4770      	bx	lr

08006fb4 <__retarget_lock_release_recursive>:
 8006fb4:	4770      	bx	lr
	...

08006fb8 <nanf>:
 8006fb8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006fc0 <nanf+0x8>
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	7fc00000 	.word	0x7fc00000

08006fc4 <quorem>:
 8006fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc8:	6903      	ldr	r3, [r0, #16]
 8006fca:	690c      	ldr	r4, [r1, #16]
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	4607      	mov	r7, r0
 8006fd0:	db7e      	blt.n	80070d0 <quorem+0x10c>
 8006fd2:	3c01      	subs	r4, #1
 8006fd4:	f101 0814 	add.w	r8, r1, #20
 8006fd8:	00a3      	lsls	r3, r4, #2
 8006fda:	f100 0514 	add.w	r5, r0, #20
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fe4:	9301      	str	r3, [sp, #4]
 8006fe6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ff6:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ffa:	d32e      	bcc.n	800705a <quorem+0x96>
 8006ffc:	f04f 0a00 	mov.w	sl, #0
 8007000:	46c4      	mov	ip, r8
 8007002:	46ae      	mov	lr, r5
 8007004:	46d3      	mov	fp, sl
 8007006:	f85c 3b04 	ldr.w	r3, [ip], #4
 800700a:	b298      	uxth	r0, r3
 800700c:	fb06 a000 	mla	r0, r6, r0, sl
 8007010:	0c02      	lsrs	r2, r0, #16
 8007012:	0c1b      	lsrs	r3, r3, #16
 8007014:	fb06 2303 	mla	r3, r6, r3, r2
 8007018:	f8de 2000 	ldr.w	r2, [lr]
 800701c:	b280      	uxth	r0, r0
 800701e:	b292      	uxth	r2, r2
 8007020:	1a12      	subs	r2, r2, r0
 8007022:	445a      	add	r2, fp
 8007024:	f8de 0000 	ldr.w	r0, [lr]
 8007028:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800702c:	b29b      	uxth	r3, r3
 800702e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007032:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007036:	b292      	uxth	r2, r2
 8007038:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800703c:	45e1      	cmp	r9, ip
 800703e:	f84e 2b04 	str.w	r2, [lr], #4
 8007042:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007046:	d2de      	bcs.n	8007006 <quorem+0x42>
 8007048:	9b00      	ldr	r3, [sp, #0]
 800704a:	58eb      	ldr	r3, [r5, r3]
 800704c:	b92b      	cbnz	r3, 800705a <quorem+0x96>
 800704e:	9b01      	ldr	r3, [sp, #4]
 8007050:	3b04      	subs	r3, #4
 8007052:	429d      	cmp	r5, r3
 8007054:	461a      	mov	r2, r3
 8007056:	d32f      	bcc.n	80070b8 <quorem+0xf4>
 8007058:	613c      	str	r4, [r7, #16]
 800705a:	4638      	mov	r0, r7
 800705c:	f001 f9c4 	bl	80083e8 <__mcmp>
 8007060:	2800      	cmp	r0, #0
 8007062:	db25      	blt.n	80070b0 <quorem+0xec>
 8007064:	4629      	mov	r1, r5
 8007066:	2000      	movs	r0, #0
 8007068:	f858 2b04 	ldr.w	r2, [r8], #4
 800706c:	f8d1 c000 	ldr.w	ip, [r1]
 8007070:	fa1f fe82 	uxth.w	lr, r2
 8007074:	fa1f f38c 	uxth.w	r3, ip
 8007078:	eba3 030e 	sub.w	r3, r3, lr
 800707c:	4403      	add	r3, r0
 800707e:	0c12      	lsrs	r2, r2, #16
 8007080:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007084:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007088:	b29b      	uxth	r3, r3
 800708a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800708e:	45c1      	cmp	r9, r8
 8007090:	f841 3b04 	str.w	r3, [r1], #4
 8007094:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007098:	d2e6      	bcs.n	8007068 <quorem+0xa4>
 800709a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800709e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070a2:	b922      	cbnz	r2, 80070ae <quorem+0xea>
 80070a4:	3b04      	subs	r3, #4
 80070a6:	429d      	cmp	r5, r3
 80070a8:	461a      	mov	r2, r3
 80070aa:	d30b      	bcc.n	80070c4 <quorem+0x100>
 80070ac:	613c      	str	r4, [r7, #16]
 80070ae:	3601      	adds	r6, #1
 80070b0:	4630      	mov	r0, r6
 80070b2:	b003      	add	sp, #12
 80070b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b8:	6812      	ldr	r2, [r2, #0]
 80070ba:	3b04      	subs	r3, #4
 80070bc:	2a00      	cmp	r2, #0
 80070be:	d1cb      	bne.n	8007058 <quorem+0x94>
 80070c0:	3c01      	subs	r4, #1
 80070c2:	e7c6      	b.n	8007052 <quorem+0x8e>
 80070c4:	6812      	ldr	r2, [r2, #0]
 80070c6:	3b04      	subs	r3, #4
 80070c8:	2a00      	cmp	r2, #0
 80070ca:	d1ef      	bne.n	80070ac <quorem+0xe8>
 80070cc:	3c01      	subs	r4, #1
 80070ce:	e7ea      	b.n	80070a6 <quorem+0xe2>
 80070d0:	2000      	movs	r0, #0
 80070d2:	e7ee      	b.n	80070b2 <quorem+0xee>
 80070d4:	0000      	movs	r0, r0
	...

080070d8 <_dtoa_r>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	69c7      	ldr	r7, [r0, #28]
 80070de:	b099      	sub	sp, #100	@ 0x64
 80070e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80070e4:	ec55 4b10 	vmov	r4, r5, d0
 80070e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80070ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80070ec:	4683      	mov	fp, r0
 80070ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80070f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80070f2:	b97f      	cbnz	r7, 8007114 <_dtoa_r+0x3c>
 80070f4:	2010      	movs	r0, #16
 80070f6:	f000 fdfd 	bl	8007cf4 <malloc>
 80070fa:	4602      	mov	r2, r0
 80070fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007100:	b920      	cbnz	r0, 800710c <_dtoa_r+0x34>
 8007102:	4ba7      	ldr	r3, [pc, #668]	@ (80073a0 <_dtoa_r+0x2c8>)
 8007104:	21ef      	movs	r1, #239	@ 0xef
 8007106:	48a7      	ldr	r0, [pc, #668]	@ (80073a4 <_dtoa_r+0x2cc>)
 8007108:	f002 fc36 	bl	8009978 <__assert_func>
 800710c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007110:	6007      	str	r7, [r0, #0]
 8007112:	60c7      	str	r7, [r0, #12]
 8007114:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007118:	6819      	ldr	r1, [r3, #0]
 800711a:	b159      	cbz	r1, 8007134 <_dtoa_r+0x5c>
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	604a      	str	r2, [r1, #4]
 8007120:	2301      	movs	r3, #1
 8007122:	4093      	lsls	r3, r2
 8007124:	608b      	str	r3, [r1, #8]
 8007126:	4658      	mov	r0, fp
 8007128:	f000 feda 	bl	8007ee0 <_Bfree>
 800712c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	1e2b      	subs	r3, r5, #0
 8007136:	bfb9      	ittee	lt
 8007138:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800713c:	9303      	strlt	r3, [sp, #12]
 800713e:	2300      	movge	r3, #0
 8007140:	6033      	strge	r3, [r6, #0]
 8007142:	9f03      	ldr	r7, [sp, #12]
 8007144:	4b98      	ldr	r3, [pc, #608]	@ (80073a8 <_dtoa_r+0x2d0>)
 8007146:	bfbc      	itt	lt
 8007148:	2201      	movlt	r2, #1
 800714a:	6032      	strlt	r2, [r6, #0]
 800714c:	43bb      	bics	r3, r7
 800714e:	d112      	bne.n	8007176 <_dtoa_r+0x9e>
 8007150:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007152:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800715c:	4323      	orrs	r3, r4
 800715e:	f000 854d 	beq.w	8007bfc <_dtoa_r+0xb24>
 8007162:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007164:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80073bc <_dtoa_r+0x2e4>
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 854f 	beq.w	8007c0c <_dtoa_r+0xb34>
 800716e:	f10a 0303 	add.w	r3, sl, #3
 8007172:	f000 bd49 	b.w	8007c08 <_dtoa_r+0xb30>
 8007176:	ed9d 7b02 	vldr	d7, [sp, #8]
 800717a:	2200      	movs	r2, #0
 800717c:	ec51 0b17 	vmov	r0, r1, d7
 8007180:	2300      	movs	r3, #0
 8007182:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007186:	f7f9 fcb7 	bl	8000af8 <__aeabi_dcmpeq>
 800718a:	4680      	mov	r8, r0
 800718c:	b158      	cbz	r0, 80071a6 <_dtoa_r+0xce>
 800718e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007190:	2301      	movs	r3, #1
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007196:	b113      	cbz	r3, 800719e <_dtoa_r+0xc6>
 8007198:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800719a:	4b84      	ldr	r3, [pc, #528]	@ (80073ac <_dtoa_r+0x2d4>)
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80073c0 <_dtoa_r+0x2e8>
 80071a2:	f000 bd33 	b.w	8007c0c <_dtoa_r+0xb34>
 80071a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80071aa:	aa16      	add	r2, sp, #88	@ 0x58
 80071ac:	a917      	add	r1, sp, #92	@ 0x5c
 80071ae:	4658      	mov	r0, fp
 80071b0:	f001 fa3a 	bl	8008628 <__d2b>
 80071b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80071b8:	4681      	mov	r9, r0
 80071ba:	2e00      	cmp	r6, #0
 80071bc:	d077      	beq.n	80072ae <_dtoa_r+0x1d6>
 80071be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80071c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80071d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80071d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80071d8:	4619      	mov	r1, r3
 80071da:	2200      	movs	r2, #0
 80071dc:	4b74      	ldr	r3, [pc, #464]	@ (80073b0 <_dtoa_r+0x2d8>)
 80071de:	f7f9 f86b 	bl	80002b8 <__aeabi_dsub>
 80071e2:	a369      	add	r3, pc, #420	@ (adr r3, 8007388 <_dtoa_r+0x2b0>)
 80071e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e8:	f7f9 fa1e 	bl	8000628 <__aeabi_dmul>
 80071ec:	a368      	add	r3, pc, #416	@ (adr r3, 8007390 <_dtoa_r+0x2b8>)
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f7f9 f863 	bl	80002bc <__adddf3>
 80071f6:	4604      	mov	r4, r0
 80071f8:	4630      	mov	r0, r6
 80071fa:	460d      	mov	r5, r1
 80071fc:	f7f9 f9aa 	bl	8000554 <__aeabi_i2d>
 8007200:	a365      	add	r3, pc, #404	@ (adr r3, 8007398 <_dtoa_r+0x2c0>)
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	f7f9 fa0f 	bl	8000628 <__aeabi_dmul>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	4620      	mov	r0, r4
 8007210:	4629      	mov	r1, r5
 8007212:	f7f9 f853 	bl	80002bc <__adddf3>
 8007216:	4604      	mov	r4, r0
 8007218:	460d      	mov	r5, r1
 800721a:	f7f9 fcb5 	bl	8000b88 <__aeabi_d2iz>
 800721e:	2200      	movs	r2, #0
 8007220:	4607      	mov	r7, r0
 8007222:	2300      	movs	r3, #0
 8007224:	4620      	mov	r0, r4
 8007226:	4629      	mov	r1, r5
 8007228:	f7f9 fc70 	bl	8000b0c <__aeabi_dcmplt>
 800722c:	b140      	cbz	r0, 8007240 <_dtoa_r+0x168>
 800722e:	4638      	mov	r0, r7
 8007230:	f7f9 f990 	bl	8000554 <__aeabi_i2d>
 8007234:	4622      	mov	r2, r4
 8007236:	462b      	mov	r3, r5
 8007238:	f7f9 fc5e 	bl	8000af8 <__aeabi_dcmpeq>
 800723c:	b900      	cbnz	r0, 8007240 <_dtoa_r+0x168>
 800723e:	3f01      	subs	r7, #1
 8007240:	2f16      	cmp	r7, #22
 8007242:	d851      	bhi.n	80072e8 <_dtoa_r+0x210>
 8007244:	4b5b      	ldr	r3, [pc, #364]	@ (80073b4 <_dtoa_r+0x2dc>)
 8007246:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007252:	f7f9 fc5b 	bl	8000b0c <__aeabi_dcmplt>
 8007256:	2800      	cmp	r0, #0
 8007258:	d048      	beq.n	80072ec <_dtoa_r+0x214>
 800725a:	3f01      	subs	r7, #1
 800725c:	2300      	movs	r3, #0
 800725e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007260:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007262:	1b9b      	subs	r3, r3, r6
 8007264:	1e5a      	subs	r2, r3, #1
 8007266:	bf44      	itt	mi
 8007268:	f1c3 0801 	rsbmi	r8, r3, #1
 800726c:	2300      	movmi	r3, #0
 800726e:	9208      	str	r2, [sp, #32]
 8007270:	bf54      	ite	pl
 8007272:	f04f 0800 	movpl.w	r8, #0
 8007276:	9308      	strmi	r3, [sp, #32]
 8007278:	2f00      	cmp	r7, #0
 800727a:	db39      	blt.n	80072f0 <_dtoa_r+0x218>
 800727c:	9b08      	ldr	r3, [sp, #32]
 800727e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007280:	443b      	add	r3, r7
 8007282:	9308      	str	r3, [sp, #32]
 8007284:	2300      	movs	r3, #0
 8007286:	930a      	str	r3, [sp, #40]	@ 0x28
 8007288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800728a:	2b09      	cmp	r3, #9
 800728c:	d864      	bhi.n	8007358 <_dtoa_r+0x280>
 800728e:	2b05      	cmp	r3, #5
 8007290:	bfc4      	itt	gt
 8007292:	3b04      	subgt	r3, #4
 8007294:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007298:	f1a3 0302 	sub.w	r3, r3, #2
 800729c:	bfcc      	ite	gt
 800729e:	2400      	movgt	r4, #0
 80072a0:	2401      	movle	r4, #1
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d863      	bhi.n	800736e <_dtoa_r+0x296>
 80072a6:	e8df f003 	tbb	[pc, r3]
 80072aa:	372a      	.short	0x372a
 80072ac:	5535      	.short	0x5535
 80072ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80072b2:	441e      	add	r6, r3
 80072b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80072b8:	2b20      	cmp	r3, #32
 80072ba:	bfc1      	itttt	gt
 80072bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80072c0:	409f      	lslgt	r7, r3
 80072c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80072c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80072ca:	bfd6      	itet	le
 80072cc:	f1c3 0320 	rsble	r3, r3, #32
 80072d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80072d4:	fa04 f003 	lslle.w	r0, r4, r3
 80072d8:	f7f9 f92c 	bl	8000534 <__aeabi_ui2d>
 80072dc:	2201      	movs	r2, #1
 80072de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80072e2:	3e01      	subs	r6, #1
 80072e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80072e6:	e777      	b.n	80071d8 <_dtoa_r+0x100>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e7b8      	b.n	800725e <_dtoa_r+0x186>
 80072ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80072ee:	e7b7      	b.n	8007260 <_dtoa_r+0x188>
 80072f0:	427b      	negs	r3, r7
 80072f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80072f4:	2300      	movs	r3, #0
 80072f6:	eba8 0807 	sub.w	r8, r8, r7
 80072fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80072fc:	e7c4      	b.n	8007288 <_dtoa_r+0x1b0>
 80072fe:	2300      	movs	r3, #0
 8007300:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007302:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007304:	2b00      	cmp	r3, #0
 8007306:	dc35      	bgt.n	8007374 <_dtoa_r+0x29c>
 8007308:	2301      	movs	r3, #1
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	9307      	str	r3, [sp, #28]
 800730e:	461a      	mov	r2, r3
 8007310:	920e      	str	r2, [sp, #56]	@ 0x38
 8007312:	e00b      	b.n	800732c <_dtoa_r+0x254>
 8007314:	2301      	movs	r3, #1
 8007316:	e7f3      	b.n	8007300 <_dtoa_r+0x228>
 8007318:	2300      	movs	r3, #0
 800731a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800731c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800731e:	18fb      	adds	r3, r7, r3
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	3301      	adds	r3, #1
 8007324:	2b01      	cmp	r3, #1
 8007326:	9307      	str	r3, [sp, #28]
 8007328:	bfb8      	it	lt
 800732a:	2301      	movlt	r3, #1
 800732c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007330:	2100      	movs	r1, #0
 8007332:	2204      	movs	r2, #4
 8007334:	f102 0514 	add.w	r5, r2, #20
 8007338:	429d      	cmp	r5, r3
 800733a:	d91f      	bls.n	800737c <_dtoa_r+0x2a4>
 800733c:	6041      	str	r1, [r0, #4]
 800733e:	4658      	mov	r0, fp
 8007340:	f000 fd8e 	bl	8007e60 <_Balloc>
 8007344:	4682      	mov	sl, r0
 8007346:	2800      	cmp	r0, #0
 8007348:	d13c      	bne.n	80073c4 <_dtoa_r+0x2ec>
 800734a:	4b1b      	ldr	r3, [pc, #108]	@ (80073b8 <_dtoa_r+0x2e0>)
 800734c:	4602      	mov	r2, r0
 800734e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007352:	e6d8      	b.n	8007106 <_dtoa_r+0x2e>
 8007354:	2301      	movs	r3, #1
 8007356:	e7e0      	b.n	800731a <_dtoa_r+0x242>
 8007358:	2401      	movs	r4, #1
 800735a:	2300      	movs	r3, #0
 800735c:	9309      	str	r3, [sp, #36]	@ 0x24
 800735e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007360:	f04f 33ff 	mov.w	r3, #4294967295
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	9307      	str	r3, [sp, #28]
 8007368:	2200      	movs	r2, #0
 800736a:	2312      	movs	r3, #18
 800736c:	e7d0      	b.n	8007310 <_dtoa_r+0x238>
 800736e:	2301      	movs	r3, #1
 8007370:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007372:	e7f5      	b.n	8007360 <_dtoa_r+0x288>
 8007374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	9307      	str	r3, [sp, #28]
 800737a:	e7d7      	b.n	800732c <_dtoa_r+0x254>
 800737c:	3101      	adds	r1, #1
 800737e:	0052      	lsls	r2, r2, #1
 8007380:	e7d8      	b.n	8007334 <_dtoa_r+0x25c>
 8007382:	bf00      	nop
 8007384:	f3af 8000 	nop.w
 8007388:	636f4361 	.word	0x636f4361
 800738c:	3fd287a7 	.word	0x3fd287a7
 8007390:	8b60c8b3 	.word	0x8b60c8b3
 8007394:	3fc68a28 	.word	0x3fc68a28
 8007398:	509f79fb 	.word	0x509f79fb
 800739c:	3fd34413 	.word	0x3fd34413
 80073a0:	0800ab1e 	.word	0x0800ab1e
 80073a4:	0800ab35 	.word	0x0800ab35
 80073a8:	7ff00000 	.word	0x7ff00000
 80073ac:	0800aae9 	.word	0x0800aae9
 80073b0:	3ff80000 	.word	0x3ff80000
 80073b4:	0800ac30 	.word	0x0800ac30
 80073b8:	0800ab8d 	.word	0x0800ab8d
 80073bc:	0800ab1a 	.word	0x0800ab1a
 80073c0:	0800aae8 	.word	0x0800aae8
 80073c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80073c8:	6018      	str	r0, [r3, #0]
 80073ca:	9b07      	ldr	r3, [sp, #28]
 80073cc:	2b0e      	cmp	r3, #14
 80073ce:	f200 80a4 	bhi.w	800751a <_dtoa_r+0x442>
 80073d2:	2c00      	cmp	r4, #0
 80073d4:	f000 80a1 	beq.w	800751a <_dtoa_r+0x442>
 80073d8:	2f00      	cmp	r7, #0
 80073da:	dd33      	ble.n	8007444 <_dtoa_r+0x36c>
 80073dc:	4bad      	ldr	r3, [pc, #692]	@ (8007694 <_dtoa_r+0x5bc>)
 80073de:	f007 020f 	and.w	r2, r7, #15
 80073e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073e6:	ed93 7b00 	vldr	d7, [r3]
 80073ea:	05f8      	lsls	r0, r7, #23
 80073ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80073f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80073f4:	d516      	bpl.n	8007424 <_dtoa_r+0x34c>
 80073f6:	4ba8      	ldr	r3, [pc, #672]	@ (8007698 <_dtoa_r+0x5c0>)
 80073f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007400:	f7f9 fa3c 	bl	800087c <__aeabi_ddiv>
 8007404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007408:	f004 040f 	and.w	r4, r4, #15
 800740c:	2603      	movs	r6, #3
 800740e:	4da2      	ldr	r5, [pc, #648]	@ (8007698 <_dtoa_r+0x5c0>)
 8007410:	b954      	cbnz	r4, 8007428 <_dtoa_r+0x350>
 8007412:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800741a:	f7f9 fa2f 	bl	800087c <__aeabi_ddiv>
 800741e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007422:	e028      	b.n	8007476 <_dtoa_r+0x39e>
 8007424:	2602      	movs	r6, #2
 8007426:	e7f2      	b.n	800740e <_dtoa_r+0x336>
 8007428:	07e1      	lsls	r1, r4, #31
 800742a:	d508      	bpl.n	800743e <_dtoa_r+0x366>
 800742c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007430:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007434:	f7f9 f8f8 	bl	8000628 <__aeabi_dmul>
 8007438:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800743c:	3601      	adds	r6, #1
 800743e:	1064      	asrs	r4, r4, #1
 8007440:	3508      	adds	r5, #8
 8007442:	e7e5      	b.n	8007410 <_dtoa_r+0x338>
 8007444:	f000 80d2 	beq.w	80075ec <_dtoa_r+0x514>
 8007448:	427c      	negs	r4, r7
 800744a:	4b92      	ldr	r3, [pc, #584]	@ (8007694 <_dtoa_r+0x5bc>)
 800744c:	4d92      	ldr	r5, [pc, #584]	@ (8007698 <_dtoa_r+0x5c0>)
 800744e:	f004 020f 	and.w	r2, r4, #15
 8007452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800745e:	f7f9 f8e3 	bl	8000628 <__aeabi_dmul>
 8007462:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007466:	1124      	asrs	r4, r4, #4
 8007468:	2300      	movs	r3, #0
 800746a:	2602      	movs	r6, #2
 800746c:	2c00      	cmp	r4, #0
 800746e:	f040 80b2 	bne.w	80075d6 <_dtoa_r+0x4fe>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1d3      	bne.n	800741e <_dtoa_r+0x346>
 8007476:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007478:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 80b7 	beq.w	80075f0 <_dtoa_r+0x518>
 8007482:	4b86      	ldr	r3, [pc, #536]	@ (800769c <_dtoa_r+0x5c4>)
 8007484:	2200      	movs	r2, #0
 8007486:	4620      	mov	r0, r4
 8007488:	4629      	mov	r1, r5
 800748a:	f7f9 fb3f 	bl	8000b0c <__aeabi_dcmplt>
 800748e:	2800      	cmp	r0, #0
 8007490:	f000 80ae 	beq.w	80075f0 <_dtoa_r+0x518>
 8007494:	9b07      	ldr	r3, [sp, #28]
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 80aa 	beq.w	80075f0 <_dtoa_r+0x518>
 800749c:	9b00      	ldr	r3, [sp, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	dd37      	ble.n	8007512 <_dtoa_r+0x43a>
 80074a2:	1e7b      	subs	r3, r7, #1
 80074a4:	9304      	str	r3, [sp, #16]
 80074a6:	4620      	mov	r0, r4
 80074a8:	4b7d      	ldr	r3, [pc, #500]	@ (80076a0 <_dtoa_r+0x5c8>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	4629      	mov	r1, r5
 80074ae:	f7f9 f8bb 	bl	8000628 <__aeabi_dmul>
 80074b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074b6:	9c00      	ldr	r4, [sp, #0]
 80074b8:	3601      	adds	r6, #1
 80074ba:	4630      	mov	r0, r6
 80074bc:	f7f9 f84a 	bl	8000554 <__aeabi_i2d>
 80074c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074c4:	f7f9 f8b0 	bl	8000628 <__aeabi_dmul>
 80074c8:	4b76      	ldr	r3, [pc, #472]	@ (80076a4 <_dtoa_r+0x5cc>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	f7f8 fef6 	bl	80002bc <__adddf3>
 80074d0:	4605      	mov	r5, r0
 80074d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80074d6:	2c00      	cmp	r4, #0
 80074d8:	f040 808d 	bne.w	80075f6 <_dtoa_r+0x51e>
 80074dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074e0:	4b71      	ldr	r3, [pc, #452]	@ (80076a8 <_dtoa_r+0x5d0>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	f7f8 fee8 	bl	80002b8 <__aeabi_dsub>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074f0:	462a      	mov	r2, r5
 80074f2:	4633      	mov	r3, r6
 80074f4:	f7f9 fb28 	bl	8000b48 <__aeabi_dcmpgt>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	f040 828b 	bne.w	8007a14 <_dtoa_r+0x93c>
 80074fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007502:	462a      	mov	r2, r5
 8007504:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007508:	f7f9 fb00 	bl	8000b0c <__aeabi_dcmplt>
 800750c:	2800      	cmp	r0, #0
 800750e:	f040 8128 	bne.w	8007762 <_dtoa_r+0x68a>
 8007512:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007516:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800751a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800751c:	2b00      	cmp	r3, #0
 800751e:	f2c0 815a 	blt.w	80077d6 <_dtoa_r+0x6fe>
 8007522:	2f0e      	cmp	r7, #14
 8007524:	f300 8157 	bgt.w	80077d6 <_dtoa_r+0x6fe>
 8007528:	4b5a      	ldr	r3, [pc, #360]	@ (8007694 <_dtoa_r+0x5bc>)
 800752a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800752e:	ed93 7b00 	vldr	d7, [r3]
 8007532:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007534:	2b00      	cmp	r3, #0
 8007536:	ed8d 7b00 	vstr	d7, [sp]
 800753a:	da03      	bge.n	8007544 <_dtoa_r+0x46c>
 800753c:	9b07      	ldr	r3, [sp, #28]
 800753e:	2b00      	cmp	r3, #0
 8007540:	f340 8101 	ble.w	8007746 <_dtoa_r+0x66e>
 8007544:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007548:	4656      	mov	r6, sl
 800754a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800754e:	4620      	mov	r0, r4
 8007550:	4629      	mov	r1, r5
 8007552:	f7f9 f993 	bl	800087c <__aeabi_ddiv>
 8007556:	f7f9 fb17 	bl	8000b88 <__aeabi_d2iz>
 800755a:	4680      	mov	r8, r0
 800755c:	f7f8 fffa 	bl	8000554 <__aeabi_i2d>
 8007560:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007564:	f7f9 f860 	bl	8000628 <__aeabi_dmul>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4620      	mov	r0, r4
 800756e:	4629      	mov	r1, r5
 8007570:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007574:	f7f8 fea0 	bl	80002b8 <__aeabi_dsub>
 8007578:	f806 4b01 	strb.w	r4, [r6], #1
 800757c:	9d07      	ldr	r5, [sp, #28]
 800757e:	eba6 040a 	sub.w	r4, r6, sl
 8007582:	42a5      	cmp	r5, r4
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	f040 8117 	bne.w	80077ba <_dtoa_r+0x6e2>
 800758c:	f7f8 fe96 	bl	80002bc <__adddf3>
 8007590:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007594:	4604      	mov	r4, r0
 8007596:	460d      	mov	r5, r1
 8007598:	f7f9 fad6 	bl	8000b48 <__aeabi_dcmpgt>
 800759c:	2800      	cmp	r0, #0
 800759e:	f040 80f9 	bne.w	8007794 <_dtoa_r+0x6bc>
 80075a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075a6:	4620      	mov	r0, r4
 80075a8:	4629      	mov	r1, r5
 80075aa:	f7f9 faa5 	bl	8000af8 <__aeabi_dcmpeq>
 80075ae:	b118      	cbz	r0, 80075b8 <_dtoa_r+0x4e0>
 80075b0:	f018 0f01 	tst.w	r8, #1
 80075b4:	f040 80ee 	bne.w	8007794 <_dtoa_r+0x6bc>
 80075b8:	4649      	mov	r1, r9
 80075ba:	4658      	mov	r0, fp
 80075bc:	f000 fc90 	bl	8007ee0 <_Bfree>
 80075c0:	2300      	movs	r3, #0
 80075c2:	7033      	strb	r3, [r6, #0]
 80075c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80075c6:	3701      	adds	r7, #1
 80075c8:	601f      	str	r7, [r3, #0]
 80075ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 831d 	beq.w	8007c0c <_dtoa_r+0xb34>
 80075d2:	601e      	str	r6, [r3, #0]
 80075d4:	e31a      	b.n	8007c0c <_dtoa_r+0xb34>
 80075d6:	07e2      	lsls	r2, r4, #31
 80075d8:	d505      	bpl.n	80075e6 <_dtoa_r+0x50e>
 80075da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075de:	f7f9 f823 	bl	8000628 <__aeabi_dmul>
 80075e2:	3601      	adds	r6, #1
 80075e4:	2301      	movs	r3, #1
 80075e6:	1064      	asrs	r4, r4, #1
 80075e8:	3508      	adds	r5, #8
 80075ea:	e73f      	b.n	800746c <_dtoa_r+0x394>
 80075ec:	2602      	movs	r6, #2
 80075ee:	e742      	b.n	8007476 <_dtoa_r+0x39e>
 80075f0:	9c07      	ldr	r4, [sp, #28]
 80075f2:	9704      	str	r7, [sp, #16]
 80075f4:	e761      	b.n	80074ba <_dtoa_r+0x3e2>
 80075f6:	4b27      	ldr	r3, [pc, #156]	@ (8007694 <_dtoa_r+0x5bc>)
 80075f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007602:	4454      	add	r4, sl
 8007604:	2900      	cmp	r1, #0
 8007606:	d053      	beq.n	80076b0 <_dtoa_r+0x5d8>
 8007608:	4928      	ldr	r1, [pc, #160]	@ (80076ac <_dtoa_r+0x5d4>)
 800760a:	2000      	movs	r0, #0
 800760c:	f7f9 f936 	bl	800087c <__aeabi_ddiv>
 8007610:	4633      	mov	r3, r6
 8007612:	462a      	mov	r2, r5
 8007614:	f7f8 fe50 	bl	80002b8 <__aeabi_dsub>
 8007618:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800761c:	4656      	mov	r6, sl
 800761e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007622:	f7f9 fab1 	bl	8000b88 <__aeabi_d2iz>
 8007626:	4605      	mov	r5, r0
 8007628:	f7f8 ff94 	bl	8000554 <__aeabi_i2d>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007634:	f7f8 fe40 	bl	80002b8 <__aeabi_dsub>
 8007638:	3530      	adds	r5, #48	@ 0x30
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007642:	f806 5b01 	strb.w	r5, [r6], #1
 8007646:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800764a:	f7f9 fa5f 	bl	8000b0c <__aeabi_dcmplt>
 800764e:	2800      	cmp	r0, #0
 8007650:	d171      	bne.n	8007736 <_dtoa_r+0x65e>
 8007652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007656:	4911      	ldr	r1, [pc, #68]	@ (800769c <_dtoa_r+0x5c4>)
 8007658:	2000      	movs	r0, #0
 800765a:	f7f8 fe2d 	bl	80002b8 <__aeabi_dsub>
 800765e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007662:	f7f9 fa53 	bl	8000b0c <__aeabi_dcmplt>
 8007666:	2800      	cmp	r0, #0
 8007668:	f040 8095 	bne.w	8007796 <_dtoa_r+0x6be>
 800766c:	42a6      	cmp	r6, r4
 800766e:	f43f af50 	beq.w	8007512 <_dtoa_r+0x43a>
 8007672:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007676:	4b0a      	ldr	r3, [pc, #40]	@ (80076a0 <_dtoa_r+0x5c8>)
 8007678:	2200      	movs	r2, #0
 800767a:	f7f8 ffd5 	bl	8000628 <__aeabi_dmul>
 800767e:	4b08      	ldr	r3, [pc, #32]	@ (80076a0 <_dtoa_r+0x5c8>)
 8007680:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007684:	2200      	movs	r2, #0
 8007686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800768a:	f7f8 ffcd 	bl	8000628 <__aeabi_dmul>
 800768e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007692:	e7c4      	b.n	800761e <_dtoa_r+0x546>
 8007694:	0800ac30 	.word	0x0800ac30
 8007698:	0800ac08 	.word	0x0800ac08
 800769c:	3ff00000 	.word	0x3ff00000
 80076a0:	40240000 	.word	0x40240000
 80076a4:	401c0000 	.word	0x401c0000
 80076a8:	40140000 	.word	0x40140000
 80076ac:	3fe00000 	.word	0x3fe00000
 80076b0:	4631      	mov	r1, r6
 80076b2:	4628      	mov	r0, r5
 80076b4:	f7f8 ffb8 	bl	8000628 <__aeabi_dmul>
 80076b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80076be:	4656      	mov	r6, sl
 80076c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076c4:	f7f9 fa60 	bl	8000b88 <__aeabi_d2iz>
 80076c8:	4605      	mov	r5, r0
 80076ca:	f7f8 ff43 	bl	8000554 <__aeabi_i2d>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076d6:	f7f8 fdef 	bl	80002b8 <__aeabi_dsub>
 80076da:	3530      	adds	r5, #48	@ 0x30
 80076dc:	f806 5b01 	strb.w	r5, [r6], #1
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	42a6      	cmp	r6, r4
 80076e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076ea:	f04f 0200 	mov.w	r2, #0
 80076ee:	d124      	bne.n	800773a <_dtoa_r+0x662>
 80076f0:	4bac      	ldr	r3, [pc, #688]	@ (80079a4 <_dtoa_r+0x8cc>)
 80076f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80076f6:	f7f8 fde1 	bl	80002bc <__adddf3>
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007702:	f7f9 fa21 	bl	8000b48 <__aeabi_dcmpgt>
 8007706:	2800      	cmp	r0, #0
 8007708:	d145      	bne.n	8007796 <_dtoa_r+0x6be>
 800770a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800770e:	49a5      	ldr	r1, [pc, #660]	@ (80079a4 <_dtoa_r+0x8cc>)
 8007710:	2000      	movs	r0, #0
 8007712:	f7f8 fdd1 	bl	80002b8 <__aeabi_dsub>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800771e:	f7f9 f9f5 	bl	8000b0c <__aeabi_dcmplt>
 8007722:	2800      	cmp	r0, #0
 8007724:	f43f aef5 	beq.w	8007512 <_dtoa_r+0x43a>
 8007728:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800772a:	1e73      	subs	r3, r6, #1
 800772c:	9315      	str	r3, [sp, #84]	@ 0x54
 800772e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007732:	2b30      	cmp	r3, #48	@ 0x30
 8007734:	d0f8      	beq.n	8007728 <_dtoa_r+0x650>
 8007736:	9f04      	ldr	r7, [sp, #16]
 8007738:	e73e      	b.n	80075b8 <_dtoa_r+0x4e0>
 800773a:	4b9b      	ldr	r3, [pc, #620]	@ (80079a8 <_dtoa_r+0x8d0>)
 800773c:	f7f8 ff74 	bl	8000628 <__aeabi_dmul>
 8007740:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007744:	e7bc      	b.n	80076c0 <_dtoa_r+0x5e8>
 8007746:	d10c      	bne.n	8007762 <_dtoa_r+0x68a>
 8007748:	4b98      	ldr	r3, [pc, #608]	@ (80079ac <_dtoa_r+0x8d4>)
 800774a:	2200      	movs	r2, #0
 800774c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007750:	f7f8 ff6a 	bl	8000628 <__aeabi_dmul>
 8007754:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007758:	f7f9 f9ec 	bl	8000b34 <__aeabi_dcmpge>
 800775c:	2800      	cmp	r0, #0
 800775e:	f000 8157 	beq.w	8007a10 <_dtoa_r+0x938>
 8007762:	2400      	movs	r4, #0
 8007764:	4625      	mov	r5, r4
 8007766:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007768:	43db      	mvns	r3, r3
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	4656      	mov	r6, sl
 800776e:	2700      	movs	r7, #0
 8007770:	4621      	mov	r1, r4
 8007772:	4658      	mov	r0, fp
 8007774:	f000 fbb4 	bl	8007ee0 <_Bfree>
 8007778:	2d00      	cmp	r5, #0
 800777a:	d0dc      	beq.n	8007736 <_dtoa_r+0x65e>
 800777c:	b12f      	cbz	r7, 800778a <_dtoa_r+0x6b2>
 800777e:	42af      	cmp	r7, r5
 8007780:	d003      	beq.n	800778a <_dtoa_r+0x6b2>
 8007782:	4639      	mov	r1, r7
 8007784:	4658      	mov	r0, fp
 8007786:	f000 fbab 	bl	8007ee0 <_Bfree>
 800778a:	4629      	mov	r1, r5
 800778c:	4658      	mov	r0, fp
 800778e:	f000 fba7 	bl	8007ee0 <_Bfree>
 8007792:	e7d0      	b.n	8007736 <_dtoa_r+0x65e>
 8007794:	9704      	str	r7, [sp, #16]
 8007796:	4633      	mov	r3, r6
 8007798:	461e      	mov	r6, r3
 800779a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800779e:	2a39      	cmp	r2, #57	@ 0x39
 80077a0:	d107      	bne.n	80077b2 <_dtoa_r+0x6da>
 80077a2:	459a      	cmp	sl, r3
 80077a4:	d1f8      	bne.n	8007798 <_dtoa_r+0x6c0>
 80077a6:	9a04      	ldr	r2, [sp, #16]
 80077a8:	3201      	adds	r2, #1
 80077aa:	9204      	str	r2, [sp, #16]
 80077ac:	2230      	movs	r2, #48	@ 0x30
 80077ae:	f88a 2000 	strb.w	r2, [sl]
 80077b2:	781a      	ldrb	r2, [r3, #0]
 80077b4:	3201      	adds	r2, #1
 80077b6:	701a      	strb	r2, [r3, #0]
 80077b8:	e7bd      	b.n	8007736 <_dtoa_r+0x65e>
 80077ba:	4b7b      	ldr	r3, [pc, #492]	@ (80079a8 <_dtoa_r+0x8d0>)
 80077bc:	2200      	movs	r2, #0
 80077be:	f7f8 ff33 	bl	8000628 <__aeabi_dmul>
 80077c2:	2200      	movs	r2, #0
 80077c4:	2300      	movs	r3, #0
 80077c6:	4604      	mov	r4, r0
 80077c8:	460d      	mov	r5, r1
 80077ca:	f7f9 f995 	bl	8000af8 <__aeabi_dcmpeq>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	f43f aebb 	beq.w	800754a <_dtoa_r+0x472>
 80077d4:	e6f0      	b.n	80075b8 <_dtoa_r+0x4e0>
 80077d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80077d8:	2a00      	cmp	r2, #0
 80077da:	f000 80db 	beq.w	8007994 <_dtoa_r+0x8bc>
 80077de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077e0:	2a01      	cmp	r2, #1
 80077e2:	f300 80bf 	bgt.w	8007964 <_dtoa_r+0x88c>
 80077e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80077e8:	2a00      	cmp	r2, #0
 80077ea:	f000 80b7 	beq.w	800795c <_dtoa_r+0x884>
 80077ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80077f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80077f4:	4646      	mov	r6, r8
 80077f6:	9a08      	ldr	r2, [sp, #32]
 80077f8:	2101      	movs	r1, #1
 80077fa:	441a      	add	r2, r3
 80077fc:	4658      	mov	r0, fp
 80077fe:	4498      	add	r8, r3
 8007800:	9208      	str	r2, [sp, #32]
 8007802:	f000 fc6b 	bl	80080dc <__i2b>
 8007806:	4605      	mov	r5, r0
 8007808:	b15e      	cbz	r6, 8007822 <_dtoa_r+0x74a>
 800780a:	9b08      	ldr	r3, [sp, #32]
 800780c:	2b00      	cmp	r3, #0
 800780e:	dd08      	ble.n	8007822 <_dtoa_r+0x74a>
 8007810:	42b3      	cmp	r3, r6
 8007812:	9a08      	ldr	r2, [sp, #32]
 8007814:	bfa8      	it	ge
 8007816:	4633      	movge	r3, r6
 8007818:	eba8 0803 	sub.w	r8, r8, r3
 800781c:	1af6      	subs	r6, r6, r3
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	9308      	str	r3, [sp, #32]
 8007822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007824:	b1f3      	cbz	r3, 8007864 <_dtoa_r+0x78c>
 8007826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 80b7 	beq.w	800799c <_dtoa_r+0x8c4>
 800782e:	b18c      	cbz	r4, 8007854 <_dtoa_r+0x77c>
 8007830:	4629      	mov	r1, r5
 8007832:	4622      	mov	r2, r4
 8007834:	4658      	mov	r0, fp
 8007836:	f000 fd11 	bl	800825c <__pow5mult>
 800783a:	464a      	mov	r2, r9
 800783c:	4601      	mov	r1, r0
 800783e:	4605      	mov	r5, r0
 8007840:	4658      	mov	r0, fp
 8007842:	f000 fc61 	bl	8008108 <__multiply>
 8007846:	4649      	mov	r1, r9
 8007848:	9004      	str	r0, [sp, #16]
 800784a:	4658      	mov	r0, fp
 800784c:	f000 fb48 	bl	8007ee0 <_Bfree>
 8007850:	9b04      	ldr	r3, [sp, #16]
 8007852:	4699      	mov	r9, r3
 8007854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007856:	1b1a      	subs	r2, r3, r4
 8007858:	d004      	beq.n	8007864 <_dtoa_r+0x78c>
 800785a:	4649      	mov	r1, r9
 800785c:	4658      	mov	r0, fp
 800785e:	f000 fcfd 	bl	800825c <__pow5mult>
 8007862:	4681      	mov	r9, r0
 8007864:	2101      	movs	r1, #1
 8007866:	4658      	mov	r0, fp
 8007868:	f000 fc38 	bl	80080dc <__i2b>
 800786c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800786e:	4604      	mov	r4, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 81cf 	beq.w	8007c14 <_dtoa_r+0xb3c>
 8007876:	461a      	mov	r2, r3
 8007878:	4601      	mov	r1, r0
 800787a:	4658      	mov	r0, fp
 800787c:	f000 fcee 	bl	800825c <__pow5mult>
 8007880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007882:	2b01      	cmp	r3, #1
 8007884:	4604      	mov	r4, r0
 8007886:	f300 8095 	bgt.w	80079b4 <_dtoa_r+0x8dc>
 800788a:	9b02      	ldr	r3, [sp, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	f040 8087 	bne.w	80079a0 <_dtoa_r+0x8c8>
 8007892:	9b03      	ldr	r3, [sp, #12]
 8007894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007898:	2b00      	cmp	r3, #0
 800789a:	f040 8089 	bne.w	80079b0 <_dtoa_r+0x8d8>
 800789e:	9b03      	ldr	r3, [sp, #12]
 80078a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078a4:	0d1b      	lsrs	r3, r3, #20
 80078a6:	051b      	lsls	r3, r3, #20
 80078a8:	b12b      	cbz	r3, 80078b6 <_dtoa_r+0x7de>
 80078aa:	9b08      	ldr	r3, [sp, #32]
 80078ac:	3301      	adds	r3, #1
 80078ae:	9308      	str	r3, [sp, #32]
 80078b0:	f108 0801 	add.w	r8, r8, #1
 80078b4:	2301      	movs	r3, #1
 80078b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80078b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 81b0 	beq.w	8007c20 <_dtoa_r+0xb48>
 80078c0:	6923      	ldr	r3, [r4, #16]
 80078c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078c6:	6918      	ldr	r0, [r3, #16]
 80078c8:	f000 fbbc 	bl	8008044 <__hi0bits>
 80078cc:	f1c0 0020 	rsb	r0, r0, #32
 80078d0:	9b08      	ldr	r3, [sp, #32]
 80078d2:	4418      	add	r0, r3
 80078d4:	f010 001f 	ands.w	r0, r0, #31
 80078d8:	d077      	beq.n	80079ca <_dtoa_r+0x8f2>
 80078da:	f1c0 0320 	rsb	r3, r0, #32
 80078de:	2b04      	cmp	r3, #4
 80078e0:	dd6b      	ble.n	80079ba <_dtoa_r+0x8e2>
 80078e2:	9b08      	ldr	r3, [sp, #32]
 80078e4:	f1c0 001c 	rsb	r0, r0, #28
 80078e8:	4403      	add	r3, r0
 80078ea:	4480      	add	r8, r0
 80078ec:	4406      	add	r6, r0
 80078ee:	9308      	str	r3, [sp, #32]
 80078f0:	f1b8 0f00 	cmp.w	r8, #0
 80078f4:	dd05      	ble.n	8007902 <_dtoa_r+0x82a>
 80078f6:	4649      	mov	r1, r9
 80078f8:	4642      	mov	r2, r8
 80078fa:	4658      	mov	r0, fp
 80078fc:	f000 fd08 	bl	8008310 <__lshift>
 8007900:	4681      	mov	r9, r0
 8007902:	9b08      	ldr	r3, [sp, #32]
 8007904:	2b00      	cmp	r3, #0
 8007906:	dd05      	ble.n	8007914 <_dtoa_r+0x83c>
 8007908:	4621      	mov	r1, r4
 800790a:	461a      	mov	r2, r3
 800790c:	4658      	mov	r0, fp
 800790e:	f000 fcff 	bl	8008310 <__lshift>
 8007912:	4604      	mov	r4, r0
 8007914:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007916:	2b00      	cmp	r3, #0
 8007918:	d059      	beq.n	80079ce <_dtoa_r+0x8f6>
 800791a:	4621      	mov	r1, r4
 800791c:	4648      	mov	r0, r9
 800791e:	f000 fd63 	bl	80083e8 <__mcmp>
 8007922:	2800      	cmp	r0, #0
 8007924:	da53      	bge.n	80079ce <_dtoa_r+0x8f6>
 8007926:	1e7b      	subs	r3, r7, #1
 8007928:	9304      	str	r3, [sp, #16]
 800792a:	4649      	mov	r1, r9
 800792c:	2300      	movs	r3, #0
 800792e:	220a      	movs	r2, #10
 8007930:	4658      	mov	r0, fp
 8007932:	f000 faf7 	bl	8007f24 <__multadd>
 8007936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007938:	4681      	mov	r9, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 8172 	beq.w	8007c24 <_dtoa_r+0xb4c>
 8007940:	2300      	movs	r3, #0
 8007942:	4629      	mov	r1, r5
 8007944:	220a      	movs	r2, #10
 8007946:	4658      	mov	r0, fp
 8007948:	f000 faec 	bl	8007f24 <__multadd>
 800794c:	9b00      	ldr	r3, [sp, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	4605      	mov	r5, r0
 8007952:	dc67      	bgt.n	8007a24 <_dtoa_r+0x94c>
 8007954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007956:	2b02      	cmp	r3, #2
 8007958:	dc41      	bgt.n	80079de <_dtoa_r+0x906>
 800795a:	e063      	b.n	8007a24 <_dtoa_r+0x94c>
 800795c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800795e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007962:	e746      	b.n	80077f2 <_dtoa_r+0x71a>
 8007964:	9b07      	ldr	r3, [sp, #28]
 8007966:	1e5c      	subs	r4, r3, #1
 8007968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800796a:	42a3      	cmp	r3, r4
 800796c:	bfbf      	itttt	lt
 800796e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007970:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007972:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007974:	1ae3      	sublt	r3, r4, r3
 8007976:	bfb4      	ite	lt
 8007978:	18d2      	addlt	r2, r2, r3
 800797a:	1b1c      	subge	r4, r3, r4
 800797c:	9b07      	ldr	r3, [sp, #28]
 800797e:	bfbc      	itt	lt
 8007980:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007982:	2400      	movlt	r4, #0
 8007984:	2b00      	cmp	r3, #0
 8007986:	bfb5      	itete	lt
 8007988:	eba8 0603 	sublt.w	r6, r8, r3
 800798c:	9b07      	ldrge	r3, [sp, #28]
 800798e:	2300      	movlt	r3, #0
 8007990:	4646      	movge	r6, r8
 8007992:	e730      	b.n	80077f6 <_dtoa_r+0x71e>
 8007994:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007996:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007998:	4646      	mov	r6, r8
 800799a:	e735      	b.n	8007808 <_dtoa_r+0x730>
 800799c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800799e:	e75c      	b.n	800785a <_dtoa_r+0x782>
 80079a0:	2300      	movs	r3, #0
 80079a2:	e788      	b.n	80078b6 <_dtoa_r+0x7de>
 80079a4:	3fe00000 	.word	0x3fe00000
 80079a8:	40240000 	.word	0x40240000
 80079ac:	40140000 	.word	0x40140000
 80079b0:	9b02      	ldr	r3, [sp, #8]
 80079b2:	e780      	b.n	80078b6 <_dtoa_r+0x7de>
 80079b4:	2300      	movs	r3, #0
 80079b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80079b8:	e782      	b.n	80078c0 <_dtoa_r+0x7e8>
 80079ba:	d099      	beq.n	80078f0 <_dtoa_r+0x818>
 80079bc:	9a08      	ldr	r2, [sp, #32]
 80079be:	331c      	adds	r3, #28
 80079c0:	441a      	add	r2, r3
 80079c2:	4498      	add	r8, r3
 80079c4:	441e      	add	r6, r3
 80079c6:	9208      	str	r2, [sp, #32]
 80079c8:	e792      	b.n	80078f0 <_dtoa_r+0x818>
 80079ca:	4603      	mov	r3, r0
 80079cc:	e7f6      	b.n	80079bc <_dtoa_r+0x8e4>
 80079ce:	9b07      	ldr	r3, [sp, #28]
 80079d0:	9704      	str	r7, [sp, #16]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	dc20      	bgt.n	8007a18 <_dtoa_r+0x940>
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079da:	2b02      	cmp	r3, #2
 80079dc:	dd1e      	ble.n	8007a1c <_dtoa_r+0x944>
 80079de:	9b00      	ldr	r3, [sp, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f47f aec0 	bne.w	8007766 <_dtoa_r+0x68e>
 80079e6:	4621      	mov	r1, r4
 80079e8:	2205      	movs	r2, #5
 80079ea:	4658      	mov	r0, fp
 80079ec:	f000 fa9a 	bl	8007f24 <__multadd>
 80079f0:	4601      	mov	r1, r0
 80079f2:	4604      	mov	r4, r0
 80079f4:	4648      	mov	r0, r9
 80079f6:	f000 fcf7 	bl	80083e8 <__mcmp>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	f77f aeb3 	ble.w	8007766 <_dtoa_r+0x68e>
 8007a00:	4656      	mov	r6, sl
 8007a02:	2331      	movs	r3, #49	@ 0x31
 8007a04:	f806 3b01 	strb.w	r3, [r6], #1
 8007a08:	9b04      	ldr	r3, [sp, #16]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	9304      	str	r3, [sp, #16]
 8007a0e:	e6ae      	b.n	800776e <_dtoa_r+0x696>
 8007a10:	9c07      	ldr	r4, [sp, #28]
 8007a12:	9704      	str	r7, [sp, #16]
 8007a14:	4625      	mov	r5, r4
 8007a16:	e7f3      	b.n	8007a00 <_dtoa_r+0x928>
 8007a18:	9b07      	ldr	r3, [sp, #28]
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 8104 	beq.w	8007c2c <_dtoa_r+0xb54>
 8007a24:	2e00      	cmp	r6, #0
 8007a26:	dd05      	ble.n	8007a34 <_dtoa_r+0x95c>
 8007a28:	4629      	mov	r1, r5
 8007a2a:	4632      	mov	r2, r6
 8007a2c:	4658      	mov	r0, fp
 8007a2e:	f000 fc6f 	bl	8008310 <__lshift>
 8007a32:	4605      	mov	r5, r0
 8007a34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d05a      	beq.n	8007af0 <_dtoa_r+0xa18>
 8007a3a:	6869      	ldr	r1, [r5, #4]
 8007a3c:	4658      	mov	r0, fp
 8007a3e:	f000 fa0f 	bl	8007e60 <_Balloc>
 8007a42:	4606      	mov	r6, r0
 8007a44:	b928      	cbnz	r0, 8007a52 <_dtoa_r+0x97a>
 8007a46:	4b84      	ldr	r3, [pc, #528]	@ (8007c58 <_dtoa_r+0xb80>)
 8007a48:	4602      	mov	r2, r0
 8007a4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a4e:	f7ff bb5a 	b.w	8007106 <_dtoa_r+0x2e>
 8007a52:	692a      	ldr	r2, [r5, #16]
 8007a54:	3202      	adds	r2, #2
 8007a56:	0092      	lsls	r2, r2, #2
 8007a58:	f105 010c 	add.w	r1, r5, #12
 8007a5c:	300c      	adds	r0, #12
 8007a5e:	f001 ff75 	bl	800994c <memcpy>
 8007a62:	2201      	movs	r2, #1
 8007a64:	4631      	mov	r1, r6
 8007a66:	4658      	mov	r0, fp
 8007a68:	f000 fc52 	bl	8008310 <__lshift>
 8007a6c:	f10a 0301 	add.w	r3, sl, #1
 8007a70:	9307      	str	r3, [sp, #28]
 8007a72:	9b00      	ldr	r3, [sp, #0]
 8007a74:	4453      	add	r3, sl
 8007a76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a78:	9b02      	ldr	r3, [sp, #8]
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	462f      	mov	r7, r5
 8007a80:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a82:	4605      	mov	r5, r0
 8007a84:	9b07      	ldr	r3, [sp, #28]
 8007a86:	4621      	mov	r1, r4
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	4648      	mov	r0, r9
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	f7ff fa99 	bl	8006fc4 <quorem>
 8007a92:	4639      	mov	r1, r7
 8007a94:	9002      	str	r0, [sp, #8]
 8007a96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a9a:	4648      	mov	r0, r9
 8007a9c:	f000 fca4 	bl	80083e8 <__mcmp>
 8007aa0:	462a      	mov	r2, r5
 8007aa2:	9008      	str	r0, [sp, #32]
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	4658      	mov	r0, fp
 8007aa8:	f000 fcba 	bl	8008420 <__mdiff>
 8007aac:	68c2      	ldr	r2, [r0, #12]
 8007aae:	4606      	mov	r6, r0
 8007ab0:	bb02      	cbnz	r2, 8007af4 <_dtoa_r+0xa1c>
 8007ab2:	4601      	mov	r1, r0
 8007ab4:	4648      	mov	r0, r9
 8007ab6:	f000 fc97 	bl	80083e8 <__mcmp>
 8007aba:	4602      	mov	r2, r0
 8007abc:	4631      	mov	r1, r6
 8007abe:	4658      	mov	r0, fp
 8007ac0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ac2:	f000 fa0d 	bl	8007ee0 <_Bfree>
 8007ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ac8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007aca:	9e07      	ldr	r6, [sp, #28]
 8007acc:	ea43 0102 	orr.w	r1, r3, r2
 8007ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ad2:	4319      	orrs	r1, r3
 8007ad4:	d110      	bne.n	8007af8 <_dtoa_r+0xa20>
 8007ad6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ada:	d029      	beq.n	8007b30 <_dtoa_r+0xa58>
 8007adc:	9b08      	ldr	r3, [sp, #32]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	dd02      	ble.n	8007ae8 <_dtoa_r+0xa10>
 8007ae2:	9b02      	ldr	r3, [sp, #8]
 8007ae4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007ae8:	9b00      	ldr	r3, [sp, #0]
 8007aea:	f883 8000 	strb.w	r8, [r3]
 8007aee:	e63f      	b.n	8007770 <_dtoa_r+0x698>
 8007af0:	4628      	mov	r0, r5
 8007af2:	e7bb      	b.n	8007a6c <_dtoa_r+0x994>
 8007af4:	2201      	movs	r2, #1
 8007af6:	e7e1      	b.n	8007abc <_dtoa_r+0x9e4>
 8007af8:	9b08      	ldr	r3, [sp, #32]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	db04      	blt.n	8007b08 <_dtoa_r+0xa30>
 8007afe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b00:	430b      	orrs	r3, r1
 8007b02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b04:	430b      	orrs	r3, r1
 8007b06:	d120      	bne.n	8007b4a <_dtoa_r+0xa72>
 8007b08:	2a00      	cmp	r2, #0
 8007b0a:	dded      	ble.n	8007ae8 <_dtoa_r+0xa10>
 8007b0c:	4649      	mov	r1, r9
 8007b0e:	2201      	movs	r2, #1
 8007b10:	4658      	mov	r0, fp
 8007b12:	f000 fbfd 	bl	8008310 <__lshift>
 8007b16:	4621      	mov	r1, r4
 8007b18:	4681      	mov	r9, r0
 8007b1a:	f000 fc65 	bl	80083e8 <__mcmp>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	dc03      	bgt.n	8007b2a <_dtoa_r+0xa52>
 8007b22:	d1e1      	bne.n	8007ae8 <_dtoa_r+0xa10>
 8007b24:	f018 0f01 	tst.w	r8, #1
 8007b28:	d0de      	beq.n	8007ae8 <_dtoa_r+0xa10>
 8007b2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b2e:	d1d8      	bne.n	8007ae2 <_dtoa_r+0xa0a>
 8007b30:	9a00      	ldr	r2, [sp, #0]
 8007b32:	2339      	movs	r3, #57	@ 0x39
 8007b34:	7013      	strb	r3, [r2, #0]
 8007b36:	4633      	mov	r3, r6
 8007b38:	461e      	mov	r6, r3
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b40:	2a39      	cmp	r2, #57	@ 0x39
 8007b42:	d052      	beq.n	8007bea <_dtoa_r+0xb12>
 8007b44:	3201      	adds	r2, #1
 8007b46:	701a      	strb	r2, [r3, #0]
 8007b48:	e612      	b.n	8007770 <_dtoa_r+0x698>
 8007b4a:	2a00      	cmp	r2, #0
 8007b4c:	dd07      	ble.n	8007b5e <_dtoa_r+0xa86>
 8007b4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b52:	d0ed      	beq.n	8007b30 <_dtoa_r+0xa58>
 8007b54:	9a00      	ldr	r2, [sp, #0]
 8007b56:	f108 0301 	add.w	r3, r8, #1
 8007b5a:	7013      	strb	r3, [r2, #0]
 8007b5c:	e608      	b.n	8007770 <_dtoa_r+0x698>
 8007b5e:	9b07      	ldr	r3, [sp, #28]
 8007b60:	9a07      	ldr	r2, [sp, #28]
 8007b62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007b66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d028      	beq.n	8007bbe <_dtoa_r+0xae6>
 8007b6c:	4649      	mov	r1, r9
 8007b6e:	2300      	movs	r3, #0
 8007b70:	220a      	movs	r2, #10
 8007b72:	4658      	mov	r0, fp
 8007b74:	f000 f9d6 	bl	8007f24 <__multadd>
 8007b78:	42af      	cmp	r7, r5
 8007b7a:	4681      	mov	r9, r0
 8007b7c:	f04f 0300 	mov.w	r3, #0
 8007b80:	f04f 020a 	mov.w	r2, #10
 8007b84:	4639      	mov	r1, r7
 8007b86:	4658      	mov	r0, fp
 8007b88:	d107      	bne.n	8007b9a <_dtoa_r+0xac2>
 8007b8a:	f000 f9cb 	bl	8007f24 <__multadd>
 8007b8e:	4607      	mov	r7, r0
 8007b90:	4605      	mov	r5, r0
 8007b92:	9b07      	ldr	r3, [sp, #28]
 8007b94:	3301      	adds	r3, #1
 8007b96:	9307      	str	r3, [sp, #28]
 8007b98:	e774      	b.n	8007a84 <_dtoa_r+0x9ac>
 8007b9a:	f000 f9c3 	bl	8007f24 <__multadd>
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	4607      	mov	r7, r0
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	220a      	movs	r2, #10
 8007ba6:	4658      	mov	r0, fp
 8007ba8:	f000 f9bc 	bl	8007f24 <__multadd>
 8007bac:	4605      	mov	r5, r0
 8007bae:	e7f0      	b.n	8007b92 <_dtoa_r+0xaba>
 8007bb0:	9b00      	ldr	r3, [sp, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bfcc      	ite	gt
 8007bb6:	461e      	movgt	r6, r3
 8007bb8:	2601      	movle	r6, #1
 8007bba:	4456      	add	r6, sl
 8007bbc:	2700      	movs	r7, #0
 8007bbe:	4649      	mov	r1, r9
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	4658      	mov	r0, fp
 8007bc4:	f000 fba4 	bl	8008310 <__lshift>
 8007bc8:	4621      	mov	r1, r4
 8007bca:	4681      	mov	r9, r0
 8007bcc:	f000 fc0c 	bl	80083e8 <__mcmp>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	dcb0      	bgt.n	8007b36 <_dtoa_r+0xa5e>
 8007bd4:	d102      	bne.n	8007bdc <_dtoa_r+0xb04>
 8007bd6:	f018 0f01 	tst.w	r8, #1
 8007bda:	d1ac      	bne.n	8007b36 <_dtoa_r+0xa5e>
 8007bdc:	4633      	mov	r3, r6
 8007bde:	461e      	mov	r6, r3
 8007be0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007be4:	2a30      	cmp	r2, #48	@ 0x30
 8007be6:	d0fa      	beq.n	8007bde <_dtoa_r+0xb06>
 8007be8:	e5c2      	b.n	8007770 <_dtoa_r+0x698>
 8007bea:	459a      	cmp	sl, r3
 8007bec:	d1a4      	bne.n	8007b38 <_dtoa_r+0xa60>
 8007bee:	9b04      	ldr	r3, [sp, #16]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	9304      	str	r3, [sp, #16]
 8007bf4:	2331      	movs	r3, #49	@ 0x31
 8007bf6:	f88a 3000 	strb.w	r3, [sl]
 8007bfa:	e5b9      	b.n	8007770 <_dtoa_r+0x698>
 8007bfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007bfe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007c5c <_dtoa_r+0xb84>
 8007c02:	b11b      	cbz	r3, 8007c0c <_dtoa_r+0xb34>
 8007c04:	f10a 0308 	add.w	r3, sl, #8
 8007c08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	4650      	mov	r0, sl
 8007c0e:	b019      	add	sp, #100	@ 0x64
 8007c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	f77f ae37 	ble.w	800788a <_dtoa_r+0x7b2>
 8007c1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c20:	2001      	movs	r0, #1
 8007c22:	e655      	b.n	80078d0 <_dtoa_r+0x7f8>
 8007c24:	9b00      	ldr	r3, [sp, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f77f aed6 	ble.w	80079d8 <_dtoa_r+0x900>
 8007c2c:	4656      	mov	r6, sl
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4648      	mov	r0, r9
 8007c32:	f7ff f9c7 	bl	8006fc4 <quorem>
 8007c36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c3a:	f806 8b01 	strb.w	r8, [r6], #1
 8007c3e:	9b00      	ldr	r3, [sp, #0]
 8007c40:	eba6 020a 	sub.w	r2, r6, sl
 8007c44:	4293      	cmp	r3, r2
 8007c46:	ddb3      	ble.n	8007bb0 <_dtoa_r+0xad8>
 8007c48:	4649      	mov	r1, r9
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	220a      	movs	r2, #10
 8007c4e:	4658      	mov	r0, fp
 8007c50:	f000 f968 	bl	8007f24 <__multadd>
 8007c54:	4681      	mov	r9, r0
 8007c56:	e7ea      	b.n	8007c2e <_dtoa_r+0xb56>
 8007c58:	0800ab8d 	.word	0x0800ab8d
 8007c5c:	0800ab11 	.word	0x0800ab11

08007c60 <_free_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4605      	mov	r5, r0
 8007c64:	2900      	cmp	r1, #0
 8007c66:	d041      	beq.n	8007cec <_free_r+0x8c>
 8007c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c6c:	1f0c      	subs	r4, r1, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	bfb8      	it	lt
 8007c72:	18e4      	addlt	r4, r4, r3
 8007c74:	f000 f8e8 	bl	8007e48 <__malloc_lock>
 8007c78:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf0 <_free_r+0x90>)
 8007c7a:	6813      	ldr	r3, [r2, #0]
 8007c7c:	b933      	cbnz	r3, 8007c8c <_free_r+0x2c>
 8007c7e:	6063      	str	r3, [r4, #4]
 8007c80:	6014      	str	r4, [r2, #0]
 8007c82:	4628      	mov	r0, r5
 8007c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c88:	f000 b8e4 	b.w	8007e54 <__malloc_unlock>
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	d908      	bls.n	8007ca2 <_free_r+0x42>
 8007c90:	6820      	ldr	r0, [r4, #0]
 8007c92:	1821      	adds	r1, r4, r0
 8007c94:	428b      	cmp	r3, r1
 8007c96:	bf01      	itttt	eq
 8007c98:	6819      	ldreq	r1, [r3, #0]
 8007c9a:	685b      	ldreq	r3, [r3, #4]
 8007c9c:	1809      	addeq	r1, r1, r0
 8007c9e:	6021      	streq	r1, [r4, #0]
 8007ca0:	e7ed      	b.n	8007c7e <_free_r+0x1e>
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	b10b      	cbz	r3, 8007cac <_free_r+0x4c>
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	d9fa      	bls.n	8007ca2 <_free_r+0x42>
 8007cac:	6811      	ldr	r1, [r2, #0]
 8007cae:	1850      	adds	r0, r2, r1
 8007cb0:	42a0      	cmp	r0, r4
 8007cb2:	d10b      	bne.n	8007ccc <_free_r+0x6c>
 8007cb4:	6820      	ldr	r0, [r4, #0]
 8007cb6:	4401      	add	r1, r0
 8007cb8:	1850      	adds	r0, r2, r1
 8007cba:	4283      	cmp	r3, r0
 8007cbc:	6011      	str	r1, [r2, #0]
 8007cbe:	d1e0      	bne.n	8007c82 <_free_r+0x22>
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	6053      	str	r3, [r2, #4]
 8007cc6:	4408      	add	r0, r1
 8007cc8:	6010      	str	r0, [r2, #0]
 8007cca:	e7da      	b.n	8007c82 <_free_r+0x22>
 8007ccc:	d902      	bls.n	8007cd4 <_free_r+0x74>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	602b      	str	r3, [r5, #0]
 8007cd2:	e7d6      	b.n	8007c82 <_free_r+0x22>
 8007cd4:	6820      	ldr	r0, [r4, #0]
 8007cd6:	1821      	adds	r1, r4, r0
 8007cd8:	428b      	cmp	r3, r1
 8007cda:	bf04      	itt	eq
 8007cdc:	6819      	ldreq	r1, [r3, #0]
 8007cde:	685b      	ldreq	r3, [r3, #4]
 8007ce0:	6063      	str	r3, [r4, #4]
 8007ce2:	bf04      	itt	eq
 8007ce4:	1809      	addeq	r1, r1, r0
 8007ce6:	6021      	streq	r1, [r4, #0]
 8007ce8:	6054      	str	r4, [r2, #4]
 8007cea:	e7ca      	b.n	8007c82 <_free_r+0x22>
 8007cec:	bd38      	pop	{r3, r4, r5, pc}
 8007cee:	bf00      	nop
 8007cf0:	200007f4 	.word	0x200007f4

08007cf4 <malloc>:
 8007cf4:	4b02      	ldr	r3, [pc, #8]	@ (8007d00 <malloc+0xc>)
 8007cf6:	4601      	mov	r1, r0
 8007cf8:	6818      	ldr	r0, [r3, #0]
 8007cfa:	f000 b825 	b.w	8007d48 <_malloc_r>
 8007cfe:	bf00      	nop
 8007d00:	20000028 	.word	0x20000028

08007d04 <sbrk_aligned>:
 8007d04:	b570      	push	{r4, r5, r6, lr}
 8007d06:	4e0f      	ldr	r6, [pc, #60]	@ (8007d44 <sbrk_aligned+0x40>)
 8007d08:	460c      	mov	r4, r1
 8007d0a:	6831      	ldr	r1, [r6, #0]
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	b911      	cbnz	r1, 8007d16 <sbrk_aligned+0x12>
 8007d10:	f001 fe0c 	bl	800992c <_sbrk_r>
 8007d14:	6030      	str	r0, [r6, #0]
 8007d16:	4621      	mov	r1, r4
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f001 fe07 	bl	800992c <_sbrk_r>
 8007d1e:	1c43      	adds	r3, r0, #1
 8007d20:	d103      	bne.n	8007d2a <sbrk_aligned+0x26>
 8007d22:	f04f 34ff 	mov.w	r4, #4294967295
 8007d26:	4620      	mov	r0, r4
 8007d28:	bd70      	pop	{r4, r5, r6, pc}
 8007d2a:	1cc4      	adds	r4, r0, #3
 8007d2c:	f024 0403 	bic.w	r4, r4, #3
 8007d30:	42a0      	cmp	r0, r4
 8007d32:	d0f8      	beq.n	8007d26 <sbrk_aligned+0x22>
 8007d34:	1a21      	subs	r1, r4, r0
 8007d36:	4628      	mov	r0, r5
 8007d38:	f001 fdf8 	bl	800992c <_sbrk_r>
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d1f2      	bne.n	8007d26 <sbrk_aligned+0x22>
 8007d40:	e7ef      	b.n	8007d22 <sbrk_aligned+0x1e>
 8007d42:	bf00      	nop
 8007d44:	200007f0 	.word	0x200007f0

08007d48 <_malloc_r>:
 8007d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d4c:	1ccd      	adds	r5, r1, #3
 8007d4e:	f025 0503 	bic.w	r5, r5, #3
 8007d52:	3508      	adds	r5, #8
 8007d54:	2d0c      	cmp	r5, #12
 8007d56:	bf38      	it	cc
 8007d58:	250c      	movcc	r5, #12
 8007d5a:	2d00      	cmp	r5, #0
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	db01      	blt.n	8007d64 <_malloc_r+0x1c>
 8007d60:	42a9      	cmp	r1, r5
 8007d62:	d904      	bls.n	8007d6e <_malloc_r+0x26>
 8007d64:	230c      	movs	r3, #12
 8007d66:	6033      	str	r3, [r6, #0]
 8007d68:	2000      	movs	r0, #0
 8007d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e44 <_malloc_r+0xfc>
 8007d72:	f000 f869 	bl	8007e48 <__malloc_lock>
 8007d76:	f8d8 3000 	ldr.w	r3, [r8]
 8007d7a:	461c      	mov	r4, r3
 8007d7c:	bb44      	cbnz	r4, 8007dd0 <_malloc_r+0x88>
 8007d7e:	4629      	mov	r1, r5
 8007d80:	4630      	mov	r0, r6
 8007d82:	f7ff ffbf 	bl	8007d04 <sbrk_aligned>
 8007d86:	1c43      	adds	r3, r0, #1
 8007d88:	4604      	mov	r4, r0
 8007d8a:	d158      	bne.n	8007e3e <_malloc_r+0xf6>
 8007d8c:	f8d8 4000 	ldr.w	r4, [r8]
 8007d90:	4627      	mov	r7, r4
 8007d92:	2f00      	cmp	r7, #0
 8007d94:	d143      	bne.n	8007e1e <_malloc_r+0xd6>
 8007d96:	2c00      	cmp	r4, #0
 8007d98:	d04b      	beq.n	8007e32 <_malloc_r+0xea>
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	4630      	mov	r0, r6
 8007da0:	eb04 0903 	add.w	r9, r4, r3
 8007da4:	f001 fdc2 	bl	800992c <_sbrk_r>
 8007da8:	4581      	cmp	r9, r0
 8007daa:	d142      	bne.n	8007e32 <_malloc_r+0xea>
 8007dac:	6821      	ldr	r1, [r4, #0]
 8007dae:	1a6d      	subs	r5, r5, r1
 8007db0:	4629      	mov	r1, r5
 8007db2:	4630      	mov	r0, r6
 8007db4:	f7ff ffa6 	bl	8007d04 <sbrk_aligned>
 8007db8:	3001      	adds	r0, #1
 8007dba:	d03a      	beq.n	8007e32 <_malloc_r+0xea>
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	442b      	add	r3, r5
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	f8d8 3000 	ldr.w	r3, [r8]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	bb62      	cbnz	r2, 8007e24 <_malloc_r+0xdc>
 8007dca:	f8c8 7000 	str.w	r7, [r8]
 8007dce:	e00f      	b.n	8007df0 <_malloc_r+0xa8>
 8007dd0:	6822      	ldr	r2, [r4, #0]
 8007dd2:	1b52      	subs	r2, r2, r5
 8007dd4:	d420      	bmi.n	8007e18 <_malloc_r+0xd0>
 8007dd6:	2a0b      	cmp	r2, #11
 8007dd8:	d917      	bls.n	8007e0a <_malloc_r+0xc2>
 8007dda:	1961      	adds	r1, r4, r5
 8007ddc:	42a3      	cmp	r3, r4
 8007dde:	6025      	str	r5, [r4, #0]
 8007de0:	bf18      	it	ne
 8007de2:	6059      	strne	r1, [r3, #4]
 8007de4:	6863      	ldr	r3, [r4, #4]
 8007de6:	bf08      	it	eq
 8007de8:	f8c8 1000 	streq.w	r1, [r8]
 8007dec:	5162      	str	r2, [r4, r5]
 8007dee:	604b      	str	r3, [r1, #4]
 8007df0:	4630      	mov	r0, r6
 8007df2:	f000 f82f 	bl	8007e54 <__malloc_unlock>
 8007df6:	f104 000b 	add.w	r0, r4, #11
 8007dfa:	1d23      	adds	r3, r4, #4
 8007dfc:	f020 0007 	bic.w	r0, r0, #7
 8007e00:	1ac2      	subs	r2, r0, r3
 8007e02:	bf1c      	itt	ne
 8007e04:	1a1b      	subne	r3, r3, r0
 8007e06:	50a3      	strne	r3, [r4, r2]
 8007e08:	e7af      	b.n	8007d6a <_malloc_r+0x22>
 8007e0a:	6862      	ldr	r2, [r4, #4]
 8007e0c:	42a3      	cmp	r3, r4
 8007e0e:	bf0c      	ite	eq
 8007e10:	f8c8 2000 	streq.w	r2, [r8]
 8007e14:	605a      	strne	r2, [r3, #4]
 8007e16:	e7eb      	b.n	8007df0 <_malloc_r+0xa8>
 8007e18:	4623      	mov	r3, r4
 8007e1a:	6864      	ldr	r4, [r4, #4]
 8007e1c:	e7ae      	b.n	8007d7c <_malloc_r+0x34>
 8007e1e:	463c      	mov	r4, r7
 8007e20:	687f      	ldr	r7, [r7, #4]
 8007e22:	e7b6      	b.n	8007d92 <_malloc_r+0x4a>
 8007e24:	461a      	mov	r2, r3
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	42a3      	cmp	r3, r4
 8007e2a:	d1fb      	bne.n	8007e24 <_malloc_r+0xdc>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	6053      	str	r3, [r2, #4]
 8007e30:	e7de      	b.n	8007df0 <_malloc_r+0xa8>
 8007e32:	230c      	movs	r3, #12
 8007e34:	6033      	str	r3, [r6, #0]
 8007e36:	4630      	mov	r0, r6
 8007e38:	f000 f80c 	bl	8007e54 <__malloc_unlock>
 8007e3c:	e794      	b.n	8007d68 <_malloc_r+0x20>
 8007e3e:	6005      	str	r5, [r0, #0]
 8007e40:	e7d6      	b.n	8007df0 <_malloc_r+0xa8>
 8007e42:	bf00      	nop
 8007e44:	200007f4 	.word	0x200007f4

08007e48 <__malloc_lock>:
 8007e48:	4801      	ldr	r0, [pc, #4]	@ (8007e50 <__malloc_lock+0x8>)
 8007e4a:	f7ff b8b2 	b.w	8006fb2 <__retarget_lock_acquire_recursive>
 8007e4e:	bf00      	nop
 8007e50:	200007ec 	.word	0x200007ec

08007e54 <__malloc_unlock>:
 8007e54:	4801      	ldr	r0, [pc, #4]	@ (8007e5c <__malloc_unlock+0x8>)
 8007e56:	f7ff b8ad 	b.w	8006fb4 <__retarget_lock_release_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	200007ec 	.word	0x200007ec

08007e60 <_Balloc>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	69c6      	ldr	r6, [r0, #28]
 8007e64:	4604      	mov	r4, r0
 8007e66:	460d      	mov	r5, r1
 8007e68:	b976      	cbnz	r6, 8007e88 <_Balloc+0x28>
 8007e6a:	2010      	movs	r0, #16
 8007e6c:	f7ff ff42 	bl	8007cf4 <malloc>
 8007e70:	4602      	mov	r2, r0
 8007e72:	61e0      	str	r0, [r4, #28]
 8007e74:	b920      	cbnz	r0, 8007e80 <_Balloc+0x20>
 8007e76:	4b18      	ldr	r3, [pc, #96]	@ (8007ed8 <_Balloc+0x78>)
 8007e78:	4818      	ldr	r0, [pc, #96]	@ (8007edc <_Balloc+0x7c>)
 8007e7a:	216b      	movs	r1, #107	@ 0x6b
 8007e7c:	f001 fd7c 	bl	8009978 <__assert_func>
 8007e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e84:	6006      	str	r6, [r0, #0]
 8007e86:	60c6      	str	r6, [r0, #12]
 8007e88:	69e6      	ldr	r6, [r4, #28]
 8007e8a:	68f3      	ldr	r3, [r6, #12]
 8007e8c:	b183      	cbz	r3, 8007eb0 <_Balloc+0x50>
 8007e8e:	69e3      	ldr	r3, [r4, #28]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e96:	b9b8      	cbnz	r0, 8007ec8 <_Balloc+0x68>
 8007e98:	2101      	movs	r1, #1
 8007e9a:	fa01 f605 	lsl.w	r6, r1, r5
 8007e9e:	1d72      	adds	r2, r6, #5
 8007ea0:	0092      	lsls	r2, r2, #2
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f001 fd86 	bl	80099b4 <_calloc_r>
 8007ea8:	b160      	cbz	r0, 8007ec4 <_Balloc+0x64>
 8007eaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007eae:	e00e      	b.n	8007ece <_Balloc+0x6e>
 8007eb0:	2221      	movs	r2, #33	@ 0x21
 8007eb2:	2104      	movs	r1, #4
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f001 fd7d 	bl	80099b4 <_calloc_r>
 8007eba:	69e3      	ldr	r3, [r4, #28]
 8007ebc:	60f0      	str	r0, [r6, #12]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e4      	bne.n	8007e8e <_Balloc+0x2e>
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}
 8007ec8:	6802      	ldr	r2, [r0, #0]
 8007eca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ed4:	e7f7      	b.n	8007ec6 <_Balloc+0x66>
 8007ed6:	bf00      	nop
 8007ed8:	0800ab1e 	.word	0x0800ab1e
 8007edc:	0800ab9e 	.word	0x0800ab9e

08007ee0 <_Bfree>:
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	69c6      	ldr	r6, [r0, #28]
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	b976      	cbnz	r6, 8007f08 <_Bfree+0x28>
 8007eea:	2010      	movs	r0, #16
 8007eec:	f7ff ff02 	bl	8007cf4 <malloc>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	61e8      	str	r0, [r5, #28]
 8007ef4:	b920      	cbnz	r0, 8007f00 <_Bfree+0x20>
 8007ef6:	4b09      	ldr	r3, [pc, #36]	@ (8007f1c <_Bfree+0x3c>)
 8007ef8:	4809      	ldr	r0, [pc, #36]	@ (8007f20 <_Bfree+0x40>)
 8007efa:	218f      	movs	r1, #143	@ 0x8f
 8007efc:	f001 fd3c 	bl	8009978 <__assert_func>
 8007f00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f04:	6006      	str	r6, [r0, #0]
 8007f06:	60c6      	str	r6, [r0, #12]
 8007f08:	b13c      	cbz	r4, 8007f1a <_Bfree+0x3a>
 8007f0a:	69eb      	ldr	r3, [r5, #28]
 8007f0c:	6862      	ldr	r2, [r4, #4]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f14:	6021      	str	r1, [r4, #0]
 8007f16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}
 8007f1c:	0800ab1e 	.word	0x0800ab1e
 8007f20:	0800ab9e 	.word	0x0800ab9e

08007f24 <__multadd>:
 8007f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f28:	690d      	ldr	r5, [r1, #16]
 8007f2a:	4607      	mov	r7, r0
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	461e      	mov	r6, r3
 8007f30:	f101 0c14 	add.w	ip, r1, #20
 8007f34:	2000      	movs	r0, #0
 8007f36:	f8dc 3000 	ldr.w	r3, [ip]
 8007f3a:	b299      	uxth	r1, r3
 8007f3c:	fb02 6101 	mla	r1, r2, r1, r6
 8007f40:	0c1e      	lsrs	r6, r3, #16
 8007f42:	0c0b      	lsrs	r3, r1, #16
 8007f44:	fb02 3306 	mla	r3, r2, r6, r3
 8007f48:	b289      	uxth	r1, r1
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f50:	4285      	cmp	r5, r0
 8007f52:	f84c 1b04 	str.w	r1, [ip], #4
 8007f56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f5a:	dcec      	bgt.n	8007f36 <__multadd+0x12>
 8007f5c:	b30e      	cbz	r6, 8007fa2 <__multadd+0x7e>
 8007f5e:	68a3      	ldr	r3, [r4, #8]
 8007f60:	42ab      	cmp	r3, r5
 8007f62:	dc19      	bgt.n	8007f98 <__multadd+0x74>
 8007f64:	6861      	ldr	r1, [r4, #4]
 8007f66:	4638      	mov	r0, r7
 8007f68:	3101      	adds	r1, #1
 8007f6a:	f7ff ff79 	bl	8007e60 <_Balloc>
 8007f6e:	4680      	mov	r8, r0
 8007f70:	b928      	cbnz	r0, 8007f7e <__multadd+0x5a>
 8007f72:	4602      	mov	r2, r0
 8007f74:	4b0c      	ldr	r3, [pc, #48]	@ (8007fa8 <__multadd+0x84>)
 8007f76:	480d      	ldr	r0, [pc, #52]	@ (8007fac <__multadd+0x88>)
 8007f78:	21ba      	movs	r1, #186	@ 0xba
 8007f7a:	f001 fcfd 	bl	8009978 <__assert_func>
 8007f7e:	6922      	ldr	r2, [r4, #16]
 8007f80:	3202      	adds	r2, #2
 8007f82:	f104 010c 	add.w	r1, r4, #12
 8007f86:	0092      	lsls	r2, r2, #2
 8007f88:	300c      	adds	r0, #12
 8007f8a:	f001 fcdf 	bl	800994c <memcpy>
 8007f8e:	4621      	mov	r1, r4
 8007f90:	4638      	mov	r0, r7
 8007f92:	f7ff ffa5 	bl	8007ee0 <_Bfree>
 8007f96:	4644      	mov	r4, r8
 8007f98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f9c:	3501      	adds	r5, #1
 8007f9e:	615e      	str	r6, [r3, #20]
 8007fa0:	6125      	str	r5, [r4, #16]
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa8:	0800ab8d 	.word	0x0800ab8d
 8007fac:	0800ab9e 	.word	0x0800ab9e

08007fb0 <__s2b>:
 8007fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	4615      	mov	r5, r2
 8007fb8:	461f      	mov	r7, r3
 8007fba:	2209      	movs	r2, #9
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	db09      	blt.n	8007fe0 <__s2b+0x30>
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f7ff ff47 	bl	8007e60 <_Balloc>
 8007fd2:	b940      	cbnz	r0, 8007fe6 <__s2b+0x36>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	4b19      	ldr	r3, [pc, #100]	@ (800803c <__s2b+0x8c>)
 8007fd8:	4819      	ldr	r0, [pc, #100]	@ (8008040 <__s2b+0x90>)
 8007fda:	21d3      	movs	r1, #211	@ 0xd3
 8007fdc:	f001 fccc 	bl	8009978 <__assert_func>
 8007fe0:	0052      	lsls	r2, r2, #1
 8007fe2:	3101      	adds	r1, #1
 8007fe4:	e7f0      	b.n	8007fc8 <__s2b+0x18>
 8007fe6:	9b08      	ldr	r3, [sp, #32]
 8007fe8:	6143      	str	r3, [r0, #20]
 8007fea:	2d09      	cmp	r5, #9
 8007fec:	f04f 0301 	mov.w	r3, #1
 8007ff0:	6103      	str	r3, [r0, #16]
 8007ff2:	dd16      	ble.n	8008022 <__s2b+0x72>
 8007ff4:	f104 0909 	add.w	r9, r4, #9
 8007ff8:	46c8      	mov	r8, r9
 8007ffa:	442c      	add	r4, r5
 8007ffc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008000:	4601      	mov	r1, r0
 8008002:	3b30      	subs	r3, #48	@ 0x30
 8008004:	220a      	movs	r2, #10
 8008006:	4630      	mov	r0, r6
 8008008:	f7ff ff8c 	bl	8007f24 <__multadd>
 800800c:	45a0      	cmp	r8, r4
 800800e:	d1f5      	bne.n	8007ffc <__s2b+0x4c>
 8008010:	f1a5 0408 	sub.w	r4, r5, #8
 8008014:	444c      	add	r4, r9
 8008016:	1b2d      	subs	r5, r5, r4
 8008018:	1963      	adds	r3, r4, r5
 800801a:	42bb      	cmp	r3, r7
 800801c:	db04      	blt.n	8008028 <__s2b+0x78>
 800801e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008022:	340a      	adds	r4, #10
 8008024:	2509      	movs	r5, #9
 8008026:	e7f6      	b.n	8008016 <__s2b+0x66>
 8008028:	f814 3b01 	ldrb.w	r3, [r4], #1
 800802c:	4601      	mov	r1, r0
 800802e:	3b30      	subs	r3, #48	@ 0x30
 8008030:	220a      	movs	r2, #10
 8008032:	4630      	mov	r0, r6
 8008034:	f7ff ff76 	bl	8007f24 <__multadd>
 8008038:	e7ee      	b.n	8008018 <__s2b+0x68>
 800803a:	bf00      	nop
 800803c:	0800ab8d 	.word	0x0800ab8d
 8008040:	0800ab9e 	.word	0x0800ab9e

08008044 <__hi0bits>:
 8008044:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008048:	4603      	mov	r3, r0
 800804a:	bf36      	itet	cc
 800804c:	0403      	lslcc	r3, r0, #16
 800804e:	2000      	movcs	r0, #0
 8008050:	2010      	movcc	r0, #16
 8008052:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008056:	bf3c      	itt	cc
 8008058:	021b      	lslcc	r3, r3, #8
 800805a:	3008      	addcc	r0, #8
 800805c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008060:	bf3c      	itt	cc
 8008062:	011b      	lslcc	r3, r3, #4
 8008064:	3004      	addcc	r0, #4
 8008066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800806a:	bf3c      	itt	cc
 800806c:	009b      	lslcc	r3, r3, #2
 800806e:	3002      	addcc	r0, #2
 8008070:	2b00      	cmp	r3, #0
 8008072:	db05      	blt.n	8008080 <__hi0bits+0x3c>
 8008074:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008078:	f100 0001 	add.w	r0, r0, #1
 800807c:	bf08      	it	eq
 800807e:	2020      	moveq	r0, #32
 8008080:	4770      	bx	lr

08008082 <__lo0bits>:
 8008082:	6803      	ldr	r3, [r0, #0]
 8008084:	4602      	mov	r2, r0
 8008086:	f013 0007 	ands.w	r0, r3, #7
 800808a:	d00b      	beq.n	80080a4 <__lo0bits+0x22>
 800808c:	07d9      	lsls	r1, r3, #31
 800808e:	d421      	bmi.n	80080d4 <__lo0bits+0x52>
 8008090:	0798      	lsls	r0, r3, #30
 8008092:	bf49      	itett	mi
 8008094:	085b      	lsrmi	r3, r3, #1
 8008096:	089b      	lsrpl	r3, r3, #2
 8008098:	2001      	movmi	r0, #1
 800809a:	6013      	strmi	r3, [r2, #0]
 800809c:	bf5c      	itt	pl
 800809e:	6013      	strpl	r3, [r2, #0]
 80080a0:	2002      	movpl	r0, #2
 80080a2:	4770      	bx	lr
 80080a4:	b299      	uxth	r1, r3
 80080a6:	b909      	cbnz	r1, 80080ac <__lo0bits+0x2a>
 80080a8:	0c1b      	lsrs	r3, r3, #16
 80080aa:	2010      	movs	r0, #16
 80080ac:	b2d9      	uxtb	r1, r3
 80080ae:	b909      	cbnz	r1, 80080b4 <__lo0bits+0x32>
 80080b0:	3008      	adds	r0, #8
 80080b2:	0a1b      	lsrs	r3, r3, #8
 80080b4:	0719      	lsls	r1, r3, #28
 80080b6:	bf04      	itt	eq
 80080b8:	091b      	lsreq	r3, r3, #4
 80080ba:	3004      	addeq	r0, #4
 80080bc:	0799      	lsls	r1, r3, #30
 80080be:	bf04      	itt	eq
 80080c0:	089b      	lsreq	r3, r3, #2
 80080c2:	3002      	addeq	r0, #2
 80080c4:	07d9      	lsls	r1, r3, #31
 80080c6:	d403      	bmi.n	80080d0 <__lo0bits+0x4e>
 80080c8:	085b      	lsrs	r3, r3, #1
 80080ca:	f100 0001 	add.w	r0, r0, #1
 80080ce:	d003      	beq.n	80080d8 <__lo0bits+0x56>
 80080d0:	6013      	str	r3, [r2, #0]
 80080d2:	4770      	bx	lr
 80080d4:	2000      	movs	r0, #0
 80080d6:	4770      	bx	lr
 80080d8:	2020      	movs	r0, #32
 80080da:	4770      	bx	lr

080080dc <__i2b>:
 80080dc:	b510      	push	{r4, lr}
 80080de:	460c      	mov	r4, r1
 80080e0:	2101      	movs	r1, #1
 80080e2:	f7ff febd 	bl	8007e60 <_Balloc>
 80080e6:	4602      	mov	r2, r0
 80080e8:	b928      	cbnz	r0, 80080f6 <__i2b+0x1a>
 80080ea:	4b05      	ldr	r3, [pc, #20]	@ (8008100 <__i2b+0x24>)
 80080ec:	4805      	ldr	r0, [pc, #20]	@ (8008104 <__i2b+0x28>)
 80080ee:	f240 1145 	movw	r1, #325	@ 0x145
 80080f2:	f001 fc41 	bl	8009978 <__assert_func>
 80080f6:	2301      	movs	r3, #1
 80080f8:	6144      	str	r4, [r0, #20]
 80080fa:	6103      	str	r3, [r0, #16]
 80080fc:	bd10      	pop	{r4, pc}
 80080fe:	bf00      	nop
 8008100:	0800ab8d 	.word	0x0800ab8d
 8008104:	0800ab9e 	.word	0x0800ab9e

08008108 <__multiply>:
 8008108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810c:	4614      	mov	r4, r2
 800810e:	690a      	ldr	r2, [r1, #16]
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	429a      	cmp	r2, r3
 8008114:	bfa8      	it	ge
 8008116:	4623      	movge	r3, r4
 8008118:	460f      	mov	r7, r1
 800811a:	bfa4      	itt	ge
 800811c:	460c      	movge	r4, r1
 800811e:	461f      	movge	r7, r3
 8008120:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008124:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008128:	68a3      	ldr	r3, [r4, #8]
 800812a:	6861      	ldr	r1, [r4, #4]
 800812c:	eb0a 0609 	add.w	r6, sl, r9
 8008130:	42b3      	cmp	r3, r6
 8008132:	b085      	sub	sp, #20
 8008134:	bfb8      	it	lt
 8008136:	3101      	addlt	r1, #1
 8008138:	f7ff fe92 	bl	8007e60 <_Balloc>
 800813c:	b930      	cbnz	r0, 800814c <__multiply+0x44>
 800813e:	4602      	mov	r2, r0
 8008140:	4b44      	ldr	r3, [pc, #272]	@ (8008254 <__multiply+0x14c>)
 8008142:	4845      	ldr	r0, [pc, #276]	@ (8008258 <__multiply+0x150>)
 8008144:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008148:	f001 fc16 	bl	8009978 <__assert_func>
 800814c:	f100 0514 	add.w	r5, r0, #20
 8008150:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008154:	462b      	mov	r3, r5
 8008156:	2200      	movs	r2, #0
 8008158:	4543      	cmp	r3, r8
 800815a:	d321      	bcc.n	80081a0 <__multiply+0x98>
 800815c:	f107 0114 	add.w	r1, r7, #20
 8008160:	f104 0214 	add.w	r2, r4, #20
 8008164:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008168:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800816c:	9302      	str	r3, [sp, #8]
 800816e:	1b13      	subs	r3, r2, r4
 8008170:	3b15      	subs	r3, #21
 8008172:	f023 0303 	bic.w	r3, r3, #3
 8008176:	3304      	adds	r3, #4
 8008178:	f104 0715 	add.w	r7, r4, #21
 800817c:	42ba      	cmp	r2, r7
 800817e:	bf38      	it	cc
 8008180:	2304      	movcc	r3, #4
 8008182:	9301      	str	r3, [sp, #4]
 8008184:	9b02      	ldr	r3, [sp, #8]
 8008186:	9103      	str	r1, [sp, #12]
 8008188:	428b      	cmp	r3, r1
 800818a:	d80c      	bhi.n	80081a6 <__multiply+0x9e>
 800818c:	2e00      	cmp	r6, #0
 800818e:	dd03      	ble.n	8008198 <__multiply+0x90>
 8008190:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008194:	2b00      	cmp	r3, #0
 8008196:	d05b      	beq.n	8008250 <__multiply+0x148>
 8008198:	6106      	str	r6, [r0, #16]
 800819a:	b005      	add	sp, #20
 800819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a0:	f843 2b04 	str.w	r2, [r3], #4
 80081a4:	e7d8      	b.n	8008158 <__multiply+0x50>
 80081a6:	f8b1 a000 	ldrh.w	sl, [r1]
 80081aa:	f1ba 0f00 	cmp.w	sl, #0
 80081ae:	d024      	beq.n	80081fa <__multiply+0xf2>
 80081b0:	f104 0e14 	add.w	lr, r4, #20
 80081b4:	46a9      	mov	r9, r5
 80081b6:	f04f 0c00 	mov.w	ip, #0
 80081ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081be:	f8d9 3000 	ldr.w	r3, [r9]
 80081c2:	fa1f fb87 	uxth.w	fp, r7
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	fb0a 330b 	mla	r3, sl, fp, r3
 80081cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80081d0:	f8d9 7000 	ldr.w	r7, [r9]
 80081d4:	4463      	add	r3, ip
 80081d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80081da:	fb0a c70b 	mla	r7, sl, fp, ip
 80081de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80081e8:	4572      	cmp	r2, lr
 80081ea:	f849 3b04 	str.w	r3, [r9], #4
 80081ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80081f2:	d8e2      	bhi.n	80081ba <__multiply+0xb2>
 80081f4:	9b01      	ldr	r3, [sp, #4]
 80081f6:	f845 c003 	str.w	ip, [r5, r3]
 80081fa:	9b03      	ldr	r3, [sp, #12]
 80081fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008200:	3104      	adds	r1, #4
 8008202:	f1b9 0f00 	cmp.w	r9, #0
 8008206:	d021      	beq.n	800824c <__multiply+0x144>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	f104 0c14 	add.w	ip, r4, #20
 800820e:	46ae      	mov	lr, r5
 8008210:	f04f 0a00 	mov.w	sl, #0
 8008214:	f8bc b000 	ldrh.w	fp, [ip]
 8008218:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800821c:	fb09 770b 	mla	r7, r9, fp, r7
 8008220:	4457      	add	r7, sl
 8008222:	b29b      	uxth	r3, r3
 8008224:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008228:	f84e 3b04 	str.w	r3, [lr], #4
 800822c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008230:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008234:	f8be 3000 	ldrh.w	r3, [lr]
 8008238:	fb09 330a 	mla	r3, r9, sl, r3
 800823c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008240:	4562      	cmp	r2, ip
 8008242:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008246:	d8e5      	bhi.n	8008214 <__multiply+0x10c>
 8008248:	9f01      	ldr	r7, [sp, #4]
 800824a:	51eb      	str	r3, [r5, r7]
 800824c:	3504      	adds	r5, #4
 800824e:	e799      	b.n	8008184 <__multiply+0x7c>
 8008250:	3e01      	subs	r6, #1
 8008252:	e79b      	b.n	800818c <__multiply+0x84>
 8008254:	0800ab8d 	.word	0x0800ab8d
 8008258:	0800ab9e 	.word	0x0800ab9e

0800825c <__pow5mult>:
 800825c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008260:	4615      	mov	r5, r2
 8008262:	f012 0203 	ands.w	r2, r2, #3
 8008266:	4607      	mov	r7, r0
 8008268:	460e      	mov	r6, r1
 800826a:	d007      	beq.n	800827c <__pow5mult+0x20>
 800826c:	4c25      	ldr	r4, [pc, #148]	@ (8008304 <__pow5mult+0xa8>)
 800826e:	3a01      	subs	r2, #1
 8008270:	2300      	movs	r3, #0
 8008272:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008276:	f7ff fe55 	bl	8007f24 <__multadd>
 800827a:	4606      	mov	r6, r0
 800827c:	10ad      	asrs	r5, r5, #2
 800827e:	d03d      	beq.n	80082fc <__pow5mult+0xa0>
 8008280:	69fc      	ldr	r4, [r7, #28]
 8008282:	b97c      	cbnz	r4, 80082a4 <__pow5mult+0x48>
 8008284:	2010      	movs	r0, #16
 8008286:	f7ff fd35 	bl	8007cf4 <malloc>
 800828a:	4602      	mov	r2, r0
 800828c:	61f8      	str	r0, [r7, #28]
 800828e:	b928      	cbnz	r0, 800829c <__pow5mult+0x40>
 8008290:	4b1d      	ldr	r3, [pc, #116]	@ (8008308 <__pow5mult+0xac>)
 8008292:	481e      	ldr	r0, [pc, #120]	@ (800830c <__pow5mult+0xb0>)
 8008294:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008298:	f001 fb6e 	bl	8009978 <__assert_func>
 800829c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082a0:	6004      	str	r4, [r0, #0]
 80082a2:	60c4      	str	r4, [r0, #12]
 80082a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80082a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082ac:	b94c      	cbnz	r4, 80082c2 <__pow5mult+0x66>
 80082ae:	f240 2171 	movw	r1, #625	@ 0x271
 80082b2:	4638      	mov	r0, r7
 80082b4:	f7ff ff12 	bl	80080dc <__i2b>
 80082b8:	2300      	movs	r3, #0
 80082ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80082be:	4604      	mov	r4, r0
 80082c0:	6003      	str	r3, [r0, #0]
 80082c2:	f04f 0900 	mov.w	r9, #0
 80082c6:	07eb      	lsls	r3, r5, #31
 80082c8:	d50a      	bpl.n	80082e0 <__pow5mult+0x84>
 80082ca:	4631      	mov	r1, r6
 80082cc:	4622      	mov	r2, r4
 80082ce:	4638      	mov	r0, r7
 80082d0:	f7ff ff1a 	bl	8008108 <__multiply>
 80082d4:	4631      	mov	r1, r6
 80082d6:	4680      	mov	r8, r0
 80082d8:	4638      	mov	r0, r7
 80082da:	f7ff fe01 	bl	8007ee0 <_Bfree>
 80082de:	4646      	mov	r6, r8
 80082e0:	106d      	asrs	r5, r5, #1
 80082e2:	d00b      	beq.n	80082fc <__pow5mult+0xa0>
 80082e4:	6820      	ldr	r0, [r4, #0]
 80082e6:	b938      	cbnz	r0, 80082f8 <__pow5mult+0x9c>
 80082e8:	4622      	mov	r2, r4
 80082ea:	4621      	mov	r1, r4
 80082ec:	4638      	mov	r0, r7
 80082ee:	f7ff ff0b 	bl	8008108 <__multiply>
 80082f2:	6020      	str	r0, [r4, #0]
 80082f4:	f8c0 9000 	str.w	r9, [r0]
 80082f8:	4604      	mov	r4, r0
 80082fa:	e7e4      	b.n	80082c6 <__pow5mult+0x6a>
 80082fc:	4630      	mov	r0, r6
 80082fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008302:	bf00      	nop
 8008304:	0800abf8 	.word	0x0800abf8
 8008308:	0800ab1e 	.word	0x0800ab1e
 800830c:	0800ab9e 	.word	0x0800ab9e

08008310 <__lshift>:
 8008310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008314:	460c      	mov	r4, r1
 8008316:	6849      	ldr	r1, [r1, #4]
 8008318:	6923      	ldr	r3, [r4, #16]
 800831a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800831e:	68a3      	ldr	r3, [r4, #8]
 8008320:	4607      	mov	r7, r0
 8008322:	4691      	mov	r9, r2
 8008324:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008328:	f108 0601 	add.w	r6, r8, #1
 800832c:	42b3      	cmp	r3, r6
 800832e:	db0b      	blt.n	8008348 <__lshift+0x38>
 8008330:	4638      	mov	r0, r7
 8008332:	f7ff fd95 	bl	8007e60 <_Balloc>
 8008336:	4605      	mov	r5, r0
 8008338:	b948      	cbnz	r0, 800834e <__lshift+0x3e>
 800833a:	4602      	mov	r2, r0
 800833c:	4b28      	ldr	r3, [pc, #160]	@ (80083e0 <__lshift+0xd0>)
 800833e:	4829      	ldr	r0, [pc, #164]	@ (80083e4 <__lshift+0xd4>)
 8008340:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008344:	f001 fb18 	bl	8009978 <__assert_func>
 8008348:	3101      	adds	r1, #1
 800834a:	005b      	lsls	r3, r3, #1
 800834c:	e7ee      	b.n	800832c <__lshift+0x1c>
 800834e:	2300      	movs	r3, #0
 8008350:	f100 0114 	add.w	r1, r0, #20
 8008354:	f100 0210 	add.w	r2, r0, #16
 8008358:	4618      	mov	r0, r3
 800835a:	4553      	cmp	r3, sl
 800835c:	db33      	blt.n	80083c6 <__lshift+0xb6>
 800835e:	6920      	ldr	r0, [r4, #16]
 8008360:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008364:	f104 0314 	add.w	r3, r4, #20
 8008368:	f019 091f 	ands.w	r9, r9, #31
 800836c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008370:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008374:	d02b      	beq.n	80083ce <__lshift+0xbe>
 8008376:	f1c9 0e20 	rsb	lr, r9, #32
 800837a:	468a      	mov	sl, r1
 800837c:	2200      	movs	r2, #0
 800837e:	6818      	ldr	r0, [r3, #0]
 8008380:	fa00 f009 	lsl.w	r0, r0, r9
 8008384:	4310      	orrs	r0, r2
 8008386:	f84a 0b04 	str.w	r0, [sl], #4
 800838a:	f853 2b04 	ldr.w	r2, [r3], #4
 800838e:	459c      	cmp	ip, r3
 8008390:	fa22 f20e 	lsr.w	r2, r2, lr
 8008394:	d8f3      	bhi.n	800837e <__lshift+0x6e>
 8008396:	ebac 0304 	sub.w	r3, ip, r4
 800839a:	3b15      	subs	r3, #21
 800839c:	f023 0303 	bic.w	r3, r3, #3
 80083a0:	3304      	adds	r3, #4
 80083a2:	f104 0015 	add.w	r0, r4, #21
 80083a6:	4584      	cmp	ip, r0
 80083a8:	bf38      	it	cc
 80083aa:	2304      	movcc	r3, #4
 80083ac:	50ca      	str	r2, [r1, r3]
 80083ae:	b10a      	cbz	r2, 80083b4 <__lshift+0xa4>
 80083b0:	f108 0602 	add.w	r6, r8, #2
 80083b4:	3e01      	subs	r6, #1
 80083b6:	4638      	mov	r0, r7
 80083b8:	612e      	str	r6, [r5, #16]
 80083ba:	4621      	mov	r1, r4
 80083bc:	f7ff fd90 	bl	8007ee0 <_Bfree>
 80083c0:	4628      	mov	r0, r5
 80083c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80083ca:	3301      	adds	r3, #1
 80083cc:	e7c5      	b.n	800835a <__lshift+0x4a>
 80083ce:	3904      	subs	r1, #4
 80083d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80083d8:	459c      	cmp	ip, r3
 80083da:	d8f9      	bhi.n	80083d0 <__lshift+0xc0>
 80083dc:	e7ea      	b.n	80083b4 <__lshift+0xa4>
 80083de:	bf00      	nop
 80083e0:	0800ab8d 	.word	0x0800ab8d
 80083e4:	0800ab9e 	.word	0x0800ab9e

080083e8 <__mcmp>:
 80083e8:	690a      	ldr	r2, [r1, #16]
 80083ea:	4603      	mov	r3, r0
 80083ec:	6900      	ldr	r0, [r0, #16]
 80083ee:	1a80      	subs	r0, r0, r2
 80083f0:	b530      	push	{r4, r5, lr}
 80083f2:	d10e      	bne.n	8008412 <__mcmp+0x2a>
 80083f4:	3314      	adds	r3, #20
 80083f6:	3114      	adds	r1, #20
 80083f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80083fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008400:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008404:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008408:	4295      	cmp	r5, r2
 800840a:	d003      	beq.n	8008414 <__mcmp+0x2c>
 800840c:	d205      	bcs.n	800841a <__mcmp+0x32>
 800840e:	f04f 30ff 	mov.w	r0, #4294967295
 8008412:	bd30      	pop	{r4, r5, pc}
 8008414:	42a3      	cmp	r3, r4
 8008416:	d3f3      	bcc.n	8008400 <__mcmp+0x18>
 8008418:	e7fb      	b.n	8008412 <__mcmp+0x2a>
 800841a:	2001      	movs	r0, #1
 800841c:	e7f9      	b.n	8008412 <__mcmp+0x2a>
	...

08008420 <__mdiff>:
 8008420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	4689      	mov	r9, r1
 8008426:	4606      	mov	r6, r0
 8008428:	4611      	mov	r1, r2
 800842a:	4648      	mov	r0, r9
 800842c:	4614      	mov	r4, r2
 800842e:	f7ff ffdb 	bl	80083e8 <__mcmp>
 8008432:	1e05      	subs	r5, r0, #0
 8008434:	d112      	bne.n	800845c <__mdiff+0x3c>
 8008436:	4629      	mov	r1, r5
 8008438:	4630      	mov	r0, r6
 800843a:	f7ff fd11 	bl	8007e60 <_Balloc>
 800843e:	4602      	mov	r2, r0
 8008440:	b928      	cbnz	r0, 800844e <__mdiff+0x2e>
 8008442:	4b3f      	ldr	r3, [pc, #252]	@ (8008540 <__mdiff+0x120>)
 8008444:	f240 2137 	movw	r1, #567	@ 0x237
 8008448:	483e      	ldr	r0, [pc, #248]	@ (8008544 <__mdiff+0x124>)
 800844a:	f001 fa95 	bl	8009978 <__assert_func>
 800844e:	2301      	movs	r3, #1
 8008450:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008454:	4610      	mov	r0, r2
 8008456:	b003      	add	sp, #12
 8008458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845c:	bfbc      	itt	lt
 800845e:	464b      	movlt	r3, r9
 8008460:	46a1      	movlt	r9, r4
 8008462:	4630      	mov	r0, r6
 8008464:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008468:	bfba      	itte	lt
 800846a:	461c      	movlt	r4, r3
 800846c:	2501      	movlt	r5, #1
 800846e:	2500      	movge	r5, #0
 8008470:	f7ff fcf6 	bl	8007e60 <_Balloc>
 8008474:	4602      	mov	r2, r0
 8008476:	b918      	cbnz	r0, 8008480 <__mdiff+0x60>
 8008478:	4b31      	ldr	r3, [pc, #196]	@ (8008540 <__mdiff+0x120>)
 800847a:	f240 2145 	movw	r1, #581	@ 0x245
 800847e:	e7e3      	b.n	8008448 <__mdiff+0x28>
 8008480:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008484:	6926      	ldr	r6, [r4, #16]
 8008486:	60c5      	str	r5, [r0, #12]
 8008488:	f109 0310 	add.w	r3, r9, #16
 800848c:	f109 0514 	add.w	r5, r9, #20
 8008490:	f104 0e14 	add.w	lr, r4, #20
 8008494:	f100 0b14 	add.w	fp, r0, #20
 8008498:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800849c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	46d9      	mov	r9, fp
 80084a4:	f04f 0c00 	mov.w	ip, #0
 80084a8:	9b01      	ldr	r3, [sp, #4]
 80084aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80084ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	fa1f f38a 	uxth.w	r3, sl
 80084b8:	4619      	mov	r1, r3
 80084ba:	b283      	uxth	r3, r0
 80084bc:	1acb      	subs	r3, r1, r3
 80084be:	0c00      	lsrs	r0, r0, #16
 80084c0:	4463      	add	r3, ip
 80084c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80084c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80084d0:	4576      	cmp	r6, lr
 80084d2:	f849 3b04 	str.w	r3, [r9], #4
 80084d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80084da:	d8e5      	bhi.n	80084a8 <__mdiff+0x88>
 80084dc:	1b33      	subs	r3, r6, r4
 80084de:	3b15      	subs	r3, #21
 80084e0:	f023 0303 	bic.w	r3, r3, #3
 80084e4:	3415      	adds	r4, #21
 80084e6:	3304      	adds	r3, #4
 80084e8:	42a6      	cmp	r6, r4
 80084ea:	bf38      	it	cc
 80084ec:	2304      	movcc	r3, #4
 80084ee:	441d      	add	r5, r3
 80084f0:	445b      	add	r3, fp
 80084f2:	461e      	mov	r6, r3
 80084f4:	462c      	mov	r4, r5
 80084f6:	4544      	cmp	r4, r8
 80084f8:	d30e      	bcc.n	8008518 <__mdiff+0xf8>
 80084fa:	f108 0103 	add.w	r1, r8, #3
 80084fe:	1b49      	subs	r1, r1, r5
 8008500:	f021 0103 	bic.w	r1, r1, #3
 8008504:	3d03      	subs	r5, #3
 8008506:	45a8      	cmp	r8, r5
 8008508:	bf38      	it	cc
 800850a:	2100      	movcc	r1, #0
 800850c:	440b      	add	r3, r1
 800850e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008512:	b191      	cbz	r1, 800853a <__mdiff+0x11a>
 8008514:	6117      	str	r7, [r2, #16]
 8008516:	e79d      	b.n	8008454 <__mdiff+0x34>
 8008518:	f854 1b04 	ldr.w	r1, [r4], #4
 800851c:	46e6      	mov	lr, ip
 800851e:	0c08      	lsrs	r0, r1, #16
 8008520:	fa1c fc81 	uxtah	ip, ip, r1
 8008524:	4471      	add	r1, lr
 8008526:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800852a:	b289      	uxth	r1, r1
 800852c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008530:	f846 1b04 	str.w	r1, [r6], #4
 8008534:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008538:	e7dd      	b.n	80084f6 <__mdiff+0xd6>
 800853a:	3f01      	subs	r7, #1
 800853c:	e7e7      	b.n	800850e <__mdiff+0xee>
 800853e:	bf00      	nop
 8008540:	0800ab8d 	.word	0x0800ab8d
 8008544:	0800ab9e 	.word	0x0800ab9e

08008548 <__ulp>:
 8008548:	b082      	sub	sp, #8
 800854a:	ed8d 0b00 	vstr	d0, [sp]
 800854e:	9a01      	ldr	r2, [sp, #4]
 8008550:	4b0f      	ldr	r3, [pc, #60]	@ (8008590 <__ulp+0x48>)
 8008552:	4013      	ands	r3, r2
 8008554:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008558:	2b00      	cmp	r3, #0
 800855a:	dc08      	bgt.n	800856e <__ulp+0x26>
 800855c:	425b      	negs	r3, r3
 800855e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008562:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008566:	da04      	bge.n	8008572 <__ulp+0x2a>
 8008568:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800856c:	4113      	asrs	r3, r2
 800856e:	2200      	movs	r2, #0
 8008570:	e008      	b.n	8008584 <__ulp+0x3c>
 8008572:	f1a2 0314 	sub.w	r3, r2, #20
 8008576:	2b1e      	cmp	r3, #30
 8008578:	bfda      	itte	le
 800857a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800857e:	40da      	lsrle	r2, r3
 8008580:	2201      	movgt	r2, #1
 8008582:	2300      	movs	r3, #0
 8008584:	4619      	mov	r1, r3
 8008586:	4610      	mov	r0, r2
 8008588:	ec41 0b10 	vmov	d0, r0, r1
 800858c:	b002      	add	sp, #8
 800858e:	4770      	bx	lr
 8008590:	7ff00000 	.word	0x7ff00000

08008594 <__b2d>:
 8008594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008598:	6906      	ldr	r6, [r0, #16]
 800859a:	f100 0814 	add.w	r8, r0, #20
 800859e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80085a2:	1f37      	subs	r7, r6, #4
 80085a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80085a8:	4610      	mov	r0, r2
 80085aa:	f7ff fd4b 	bl	8008044 <__hi0bits>
 80085ae:	f1c0 0320 	rsb	r3, r0, #32
 80085b2:	280a      	cmp	r0, #10
 80085b4:	600b      	str	r3, [r1, #0]
 80085b6:	491b      	ldr	r1, [pc, #108]	@ (8008624 <__b2d+0x90>)
 80085b8:	dc15      	bgt.n	80085e6 <__b2d+0x52>
 80085ba:	f1c0 0c0b 	rsb	ip, r0, #11
 80085be:	fa22 f30c 	lsr.w	r3, r2, ip
 80085c2:	45b8      	cmp	r8, r7
 80085c4:	ea43 0501 	orr.w	r5, r3, r1
 80085c8:	bf34      	ite	cc
 80085ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80085ce:	2300      	movcs	r3, #0
 80085d0:	3015      	adds	r0, #21
 80085d2:	fa02 f000 	lsl.w	r0, r2, r0
 80085d6:	fa23 f30c 	lsr.w	r3, r3, ip
 80085da:	4303      	orrs	r3, r0
 80085dc:	461c      	mov	r4, r3
 80085de:	ec45 4b10 	vmov	d0, r4, r5
 80085e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e6:	45b8      	cmp	r8, r7
 80085e8:	bf3a      	itte	cc
 80085ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80085ee:	f1a6 0708 	subcc.w	r7, r6, #8
 80085f2:	2300      	movcs	r3, #0
 80085f4:	380b      	subs	r0, #11
 80085f6:	d012      	beq.n	800861e <__b2d+0x8a>
 80085f8:	f1c0 0120 	rsb	r1, r0, #32
 80085fc:	fa23 f401 	lsr.w	r4, r3, r1
 8008600:	4082      	lsls	r2, r0
 8008602:	4322      	orrs	r2, r4
 8008604:	4547      	cmp	r7, r8
 8008606:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800860a:	bf8c      	ite	hi
 800860c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008610:	2200      	movls	r2, #0
 8008612:	4083      	lsls	r3, r0
 8008614:	40ca      	lsrs	r2, r1
 8008616:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800861a:	4313      	orrs	r3, r2
 800861c:	e7de      	b.n	80085dc <__b2d+0x48>
 800861e:	ea42 0501 	orr.w	r5, r2, r1
 8008622:	e7db      	b.n	80085dc <__b2d+0x48>
 8008624:	3ff00000 	.word	0x3ff00000

08008628 <__d2b>:
 8008628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800862c:	460f      	mov	r7, r1
 800862e:	2101      	movs	r1, #1
 8008630:	ec59 8b10 	vmov	r8, r9, d0
 8008634:	4616      	mov	r6, r2
 8008636:	f7ff fc13 	bl	8007e60 <_Balloc>
 800863a:	4604      	mov	r4, r0
 800863c:	b930      	cbnz	r0, 800864c <__d2b+0x24>
 800863e:	4602      	mov	r2, r0
 8008640:	4b23      	ldr	r3, [pc, #140]	@ (80086d0 <__d2b+0xa8>)
 8008642:	4824      	ldr	r0, [pc, #144]	@ (80086d4 <__d2b+0xac>)
 8008644:	f240 310f 	movw	r1, #783	@ 0x30f
 8008648:	f001 f996 	bl	8009978 <__assert_func>
 800864c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008654:	b10d      	cbz	r5, 800865a <__d2b+0x32>
 8008656:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800865a:	9301      	str	r3, [sp, #4]
 800865c:	f1b8 0300 	subs.w	r3, r8, #0
 8008660:	d023      	beq.n	80086aa <__d2b+0x82>
 8008662:	4668      	mov	r0, sp
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	f7ff fd0c 	bl	8008082 <__lo0bits>
 800866a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800866e:	b1d0      	cbz	r0, 80086a6 <__d2b+0x7e>
 8008670:	f1c0 0320 	rsb	r3, r0, #32
 8008674:	fa02 f303 	lsl.w	r3, r2, r3
 8008678:	430b      	orrs	r3, r1
 800867a:	40c2      	lsrs	r2, r0
 800867c:	6163      	str	r3, [r4, #20]
 800867e:	9201      	str	r2, [sp, #4]
 8008680:	9b01      	ldr	r3, [sp, #4]
 8008682:	61a3      	str	r3, [r4, #24]
 8008684:	2b00      	cmp	r3, #0
 8008686:	bf0c      	ite	eq
 8008688:	2201      	moveq	r2, #1
 800868a:	2202      	movne	r2, #2
 800868c:	6122      	str	r2, [r4, #16]
 800868e:	b1a5      	cbz	r5, 80086ba <__d2b+0x92>
 8008690:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008694:	4405      	add	r5, r0
 8008696:	603d      	str	r5, [r7, #0]
 8008698:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800869c:	6030      	str	r0, [r6, #0]
 800869e:	4620      	mov	r0, r4
 80086a0:	b003      	add	sp, #12
 80086a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086a6:	6161      	str	r1, [r4, #20]
 80086a8:	e7ea      	b.n	8008680 <__d2b+0x58>
 80086aa:	a801      	add	r0, sp, #4
 80086ac:	f7ff fce9 	bl	8008082 <__lo0bits>
 80086b0:	9b01      	ldr	r3, [sp, #4]
 80086b2:	6163      	str	r3, [r4, #20]
 80086b4:	3020      	adds	r0, #32
 80086b6:	2201      	movs	r2, #1
 80086b8:	e7e8      	b.n	800868c <__d2b+0x64>
 80086ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80086c2:	6038      	str	r0, [r7, #0]
 80086c4:	6918      	ldr	r0, [r3, #16]
 80086c6:	f7ff fcbd 	bl	8008044 <__hi0bits>
 80086ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086ce:	e7e5      	b.n	800869c <__d2b+0x74>
 80086d0:	0800ab8d 	.word	0x0800ab8d
 80086d4:	0800ab9e 	.word	0x0800ab9e

080086d8 <__ratio>:
 80086d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	b085      	sub	sp, #20
 80086de:	e9cd 1000 	strd	r1, r0, [sp]
 80086e2:	a902      	add	r1, sp, #8
 80086e4:	f7ff ff56 	bl	8008594 <__b2d>
 80086e8:	9800      	ldr	r0, [sp, #0]
 80086ea:	a903      	add	r1, sp, #12
 80086ec:	ec55 4b10 	vmov	r4, r5, d0
 80086f0:	f7ff ff50 	bl	8008594 <__b2d>
 80086f4:	9b01      	ldr	r3, [sp, #4]
 80086f6:	6919      	ldr	r1, [r3, #16]
 80086f8:	9b00      	ldr	r3, [sp, #0]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	1ac9      	subs	r1, r1, r3
 80086fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008702:	1a9b      	subs	r3, r3, r2
 8008704:	ec5b ab10 	vmov	sl, fp, d0
 8008708:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800870c:	2b00      	cmp	r3, #0
 800870e:	bfce      	itee	gt
 8008710:	462a      	movgt	r2, r5
 8008712:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008716:	465a      	movle	r2, fp
 8008718:	462f      	mov	r7, r5
 800871a:	46d9      	mov	r9, fp
 800871c:	bfcc      	ite	gt
 800871e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008722:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008726:	464b      	mov	r3, r9
 8008728:	4652      	mov	r2, sl
 800872a:	4620      	mov	r0, r4
 800872c:	4639      	mov	r1, r7
 800872e:	f7f8 f8a5 	bl	800087c <__aeabi_ddiv>
 8008732:	ec41 0b10 	vmov	d0, r0, r1
 8008736:	b005      	add	sp, #20
 8008738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800873c <__copybits>:
 800873c:	3901      	subs	r1, #1
 800873e:	b570      	push	{r4, r5, r6, lr}
 8008740:	1149      	asrs	r1, r1, #5
 8008742:	6914      	ldr	r4, [r2, #16]
 8008744:	3101      	adds	r1, #1
 8008746:	f102 0314 	add.w	r3, r2, #20
 800874a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800874e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008752:	1f05      	subs	r5, r0, #4
 8008754:	42a3      	cmp	r3, r4
 8008756:	d30c      	bcc.n	8008772 <__copybits+0x36>
 8008758:	1aa3      	subs	r3, r4, r2
 800875a:	3b11      	subs	r3, #17
 800875c:	f023 0303 	bic.w	r3, r3, #3
 8008760:	3211      	adds	r2, #17
 8008762:	42a2      	cmp	r2, r4
 8008764:	bf88      	it	hi
 8008766:	2300      	movhi	r3, #0
 8008768:	4418      	add	r0, r3
 800876a:	2300      	movs	r3, #0
 800876c:	4288      	cmp	r0, r1
 800876e:	d305      	bcc.n	800877c <__copybits+0x40>
 8008770:	bd70      	pop	{r4, r5, r6, pc}
 8008772:	f853 6b04 	ldr.w	r6, [r3], #4
 8008776:	f845 6f04 	str.w	r6, [r5, #4]!
 800877a:	e7eb      	b.n	8008754 <__copybits+0x18>
 800877c:	f840 3b04 	str.w	r3, [r0], #4
 8008780:	e7f4      	b.n	800876c <__copybits+0x30>

08008782 <__any_on>:
 8008782:	f100 0214 	add.w	r2, r0, #20
 8008786:	6900      	ldr	r0, [r0, #16]
 8008788:	114b      	asrs	r3, r1, #5
 800878a:	4298      	cmp	r0, r3
 800878c:	b510      	push	{r4, lr}
 800878e:	db11      	blt.n	80087b4 <__any_on+0x32>
 8008790:	dd0a      	ble.n	80087a8 <__any_on+0x26>
 8008792:	f011 011f 	ands.w	r1, r1, #31
 8008796:	d007      	beq.n	80087a8 <__any_on+0x26>
 8008798:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800879c:	fa24 f001 	lsr.w	r0, r4, r1
 80087a0:	fa00 f101 	lsl.w	r1, r0, r1
 80087a4:	428c      	cmp	r4, r1
 80087a6:	d10b      	bne.n	80087c0 <__any_on+0x3e>
 80087a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d803      	bhi.n	80087b8 <__any_on+0x36>
 80087b0:	2000      	movs	r0, #0
 80087b2:	bd10      	pop	{r4, pc}
 80087b4:	4603      	mov	r3, r0
 80087b6:	e7f7      	b.n	80087a8 <__any_on+0x26>
 80087b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087bc:	2900      	cmp	r1, #0
 80087be:	d0f5      	beq.n	80087ac <__any_on+0x2a>
 80087c0:	2001      	movs	r0, #1
 80087c2:	e7f6      	b.n	80087b2 <__any_on+0x30>

080087c4 <sulp>:
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	4604      	mov	r4, r0
 80087c8:	460d      	mov	r5, r1
 80087ca:	ec45 4b10 	vmov	d0, r4, r5
 80087ce:	4616      	mov	r6, r2
 80087d0:	f7ff feba 	bl	8008548 <__ulp>
 80087d4:	ec51 0b10 	vmov	r0, r1, d0
 80087d8:	b17e      	cbz	r6, 80087fa <sulp+0x36>
 80087da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80087de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	dd09      	ble.n	80087fa <sulp+0x36>
 80087e6:	051b      	lsls	r3, r3, #20
 80087e8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80087ec:	2400      	movs	r4, #0
 80087ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80087f2:	4622      	mov	r2, r4
 80087f4:	462b      	mov	r3, r5
 80087f6:	f7f7 ff17 	bl	8000628 <__aeabi_dmul>
 80087fa:	ec41 0b10 	vmov	d0, r0, r1
 80087fe:	bd70      	pop	{r4, r5, r6, pc}

08008800 <_strtod_l>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	b09f      	sub	sp, #124	@ 0x7c
 8008806:	460c      	mov	r4, r1
 8008808:	9217      	str	r2, [sp, #92]	@ 0x5c
 800880a:	2200      	movs	r2, #0
 800880c:	921a      	str	r2, [sp, #104]	@ 0x68
 800880e:	9005      	str	r0, [sp, #20]
 8008810:	f04f 0a00 	mov.w	sl, #0
 8008814:	f04f 0b00 	mov.w	fp, #0
 8008818:	460a      	mov	r2, r1
 800881a:	9219      	str	r2, [sp, #100]	@ 0x64
 800881c:	7811      	ldrb	r1, [r2, #0]
 800881e:	292b      	cmp	r1, #43	@ 0x2b
 8008820:	d04a      	beq.n	80088b8 <_strtod_l+0xb8>
 8008822:	d838      	bhi.n	8008896 <_strtod_l+0x96>
 8008824:	290d      	cmp	r1, #13
 8008826:	d832      	bhi.n	800888e <_strtod_l+0x8e>
 8008828:	2908      	cmp	r1, #8
 800882a:	d832      	bhi.n	8008892 <_strtod_l+0x92>
 800882c:	2900      	cmp	r1, #0
 800882e:	d03b      	beq.n	80088a8 <_strtod_l+0xa8>
 8008830:	2200      	movs	r2, #0
 8008832:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008834:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008836:	782a      	ldrb	r2, [r5, #0]
 8008838:	2a30      	cmp	r2, #48	@ 0x30
 800883a:	f040 80b3 	bne.w	80089a4 <_strtod_l+0x1a4>
 800883e:	786a      	ldrb	r2, [r5, #1]
 8008840:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008844:	2a58      	cmp	r2, #88	@ 0x58
 8008846:	d16e      	bne.n	8008926 <_strtod_l+0x126>
 8008848:	9302      	str	r3, [sp, #8]
 800884a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800884c:	9301      	str	r3, [sp, #4]
 800884e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	4a8e      	ldr	r2, [pc, #568]	@ (8008a8c <_strtod_l+0x28c>)
 8008854:	9805      	ldr	r0, [sp, #20]
 8008856:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008858:	a919      	add	r1, sp, #100	@ 0x64
 800885a:	f001 f927 	bl	8009aac <__gethex>
 800885e:	f010 060f 	ands.w	r6, r0, #15
 8008862:	4604      	mov	r4, r0
 8008864:	d005      	beq.n	8008872 <_strtod_l+0x72>
 8008866:	2e06      	cmp	r6, #6
 8008868:	d128      	bne.n	80088bc <_strtod_l+0xbc>
 800886a:	3501      	adds	r5, #1
 800886c:	2300      	movs	r3, #0
 800886e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008870:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008872:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008874:	2b00      	cmp	r3, #0
 8008876:	f040 858e 	bne.w	8009396 <_strtod_l+0xb96>
 800887a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800887c:	b1cb      	cbz	r3, 80088b2 <_strtod_l+0xb2>
 800887e:	4652      	mov	r2, sl
 8008880:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008884:	ec43 2b10 	vmov	d0, r2, r3
 8008888:	b01f      	add	sp, #124	@ 0x7c
 800888a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888e:	2920      	cmp	r1, #32
 8008890:	d1ce      	bne.n	8008830 <_strtod_l+0x30>
 8008892:	3201      	adds	r2, #1
 8008894:	e7c1      	b.n	800881a <_strtod_l+0x1a>
 8008896:	292d      	cmp	r1, #45	@ 0x2d
 8008898:	d1ca      	bne.n	8008830 <_strtod_l+0x30>
 800889a:	2101      	movs	r1, #1
 800889c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800889e:	1c51      	adds	r1, r2, #1
 80088a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80088a2:	7852      	ldrb	r2, [r2, #1]
 80088a4:	2a00      	cmp	r2, #0
 80088a6:	d1c5      	bne.n	8008834 <_strtod_l+0x34>
 80088a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80088aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f040 8570 	bne.w	8009392 <_strtod_l+0xb92>
 80088b2:	4652      	mov	r2, sl
 80088b4:	465b      	mov	r3, fp
 80088b6:	e7e5      	b.n	8008884 <_strtod_l+0x84>
 80088b8:	2100      	movs	r1, #0
 80088ba:	e7ef      	b.n	800889c <_strtod_l+0x9c>
 80088bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80088be:	b13a      	cbz	r2, 80088d0 <_strtod_l+0xd0>
 80088c0:	2135      	movs	r1, #53	@ 0x35
 80088c2:	a81c      	add	r0, sp, #112	@ 0x70
 80088c4:	f7ff ff3a 	bl	800873c <__copybits>
 80088c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088ca:	9805      	ldr	r0, [sp, #20]
 80088cc:	f7ff fb08 	bl	8007ee0 <_Bfree>
 80088d0:	3e01      	subs	r6, #1
 80088d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80088d4:	2e04      	cmp	r6, #4
 80088d6:	d806      	bhi.n	80088e6 <_strtod_l+0xe6>
 80088d8:	e8df f006 	tbb	[pc, r6]
 80088dc:	201d0314 	.word	0x201d0314
 80088e0:	14          	.byte	0x14
 80088e1:	00          	.byte	0x00
 80088e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80088e6:	05e1      	lsls	r1, r4, #23
 80088e8:	bf48      	it	mi
 80088ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80088ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80088f2:	0d1b      	lsrs	r3, r3, #20
 80088f4:	051b      	lsls	r3, r3, #20
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1bb      	bne.n	8008872 <_strtod_l+0x72>
 80088fa:	f7fe fb2f 	bl	8006f5c <__errno>
 80088fe:	2322      	movs	r3, #34	@ 0x22
 8008900:	6003      	str	r3, [r0, #0]
 8008902:	e7b6      	b.n	8008872 <_strtod_l+0x72>
 8008904:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008908:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800890c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008910:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008914:	e7e7      	b.n	80088e6 <_strtod_l+0xe6>
 8008916:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008a94 <_strtod_l+0x294>
 800891a:	e7e4      	b.n	80088e6 <_strtod_l+0xe6>
 800891c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008920:	f04f 3aff 	mov.w	sl, #4294967295
 8008924:	e7df      	b.n	80088e6 <_strtod_l+0xe6>
 8008926:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	9219      	str	r2, [sp, #100]	@ 0x64
 800892c:	785b      	ldrb	r3, [r3, #1]
 800892e:	2b30      	cmp	r3, #48	@ 0x30
 8008930:	d0f9      	beq.n	8008926 <_strtod_l+0x126>
 8008932:	2b00      	cmp	r3, #0
 8008934:	d09d      	beq.n	8008872 <_strtod_l+0x72>
 8008936:	2301      	movs	r3, #1
 8008938:	9309      	str	r3, [sp, #36]	@ 0x24
 800893a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800893c:	930c      	str	r3, [sp, #48]	@ 0x30
 800893e:	2300      	movs	r3, #0
 8008940:	9308      	str	r3, [sp, #32]
 8008942:	930a      	str	r3, [sp, #40]	@ 0x28
 8008944:	461f      	mov	r7, r3
 8008946:	220a      	movs	r2, #10
 8008948:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800894a:	7805      	ldrb	r5, [r0, #0]
 800894c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008950:	b2d9      	uxtb	r1, r3
 8008952:	2909      	cmp	r1, #9
 8008954:	d928      	bls.n	80089a8 <_strtod_l+0x1a8>
 8008956:	494e      	ldr	r1, [pc, #312]	@ (8008a90 <_strtod_l+0x290>)
 8008958:	2201      	movs	r2, #1
 800895a:	f000 ffd5 	bl	8009908 <strncmp>
 800895e:	2800      	cmp	r0, #0
 8008960:	d032      	beq.n	80089c8 <_strtod_l+0x1c8>
 8008962:	2000      	movs	r0, #0
 8008964:	462a      	mov	r2, r5
 8008966:	4681      	mov	r9, r0
 8008968:	463d      	mov	r5, r7
 800896a:	4603      	mov	r3, r0
 800896c:	2a65      	cmp	r2, #101	@ 0x65
 800896e:	d001      	beq.n	8008974 <_strtod_l+0x174>
 8008970:	2a45      	cmp	r2, #69	@ 0x45
 8008972:	d114      	bne.n	800899e <_strtod_l+0x19e>
 8008974:	b91d      	cbnz	r5, 800897e <_strtod_l+0x17e>
 8008976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008978:	4302      	orrs	r2, r0
 800897a:	d095      	beq.n	80088a8 <_strtod_l+0xa8>
 800897c:	2500      	movs	r5, #0
 800897e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008980:	1c62      	adds	r2, r4, #1
 8008982:	9219      	str	r2, [sp, #100]	@ 0x64
 8008984:	7862      	ldrb	r2, [r4, #1]
 8008986:	2a2b      	cmp	r2, #43	@ 0x2b
 8008988:	d077      	beq.n	8008a7a <_strtod_l+0x27a>
 800898a:	2a2d      	cmp	r2, #45	@ 0x2d
 800898c:	d07b      	beq.n	8008a86 <_strtod_l+0x286>
 800898e:	f04f 0c00 	mov.w	ip, #0
 8008992:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008996:	2909      	cmp	r1, #9
 8008998:	f240 8082 	bls.w	8008aa0 <_strtod_l+0x2a0>
 800899c:	9419      	str	r4, [sp, #100]	@ 0x64
 800899e:	f04f 0800 	mov.w	r8, #0
 80089a2:	e0a2      	b.n	8008aea <_strtod_l+0x2ea>
 80089a4:	2300      	movs	r3, #0
 80089a6:	e7c7      	b.n	8008938 <_strtod_l+0x138>
 80089a8:	2f08      	cmp	r7, #8
 80089aa:	bfd5      	itete	le
 80089ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80089ae:	9908      	ldrgt	r1, [sp, #32]
 80089b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80089b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80089b8:	f100 0001 	add.w	r0, r0, #1
 80089bc:	bfd4      	ite	le
 80089be:	930a      	strle	r3, [sp, #40]	@ 0x28
 80089c0:	9308      	strgt	r3, [sp, #32]
 80089c2:	3701      	adds	r7, #1
 80089c4:	9019      	str	r0, [sp, #100]	@ 0x64
 80089c6:	e7bf      	b.n	8008948 <_strtod_l+0x148>
 80089c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80089ce:	785a      	ldrb	r2, [r3, #1]
 80089d0:	b37f      	cbz	r7, 8008a32 <_strtod_l+0x232>
 80089d2:	4681      	mov	r9, r0
 80089d4:	463d      	mov	r5, r7
 80089d6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80089da:	2b09      	cmp	r3, #9
 80089dc:	d912      	bls.n	8008a04 <_strtod_l+0x204>
 80089de:	2301      	movs	r3, #1
 80089e0:	e7c4      	b.n	800896c <_strtod_l+0x16c>
 80089e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089e4:	1c5a      	adds	r2, r3, #1
 80089e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80089e8:	785a      	ldrb	r2, [r3, #1]
 80089ea:	3001      	adds	r0, #1
 80089ec:	2a30      	cmp	r2, #48	@ 0x30
 80089ee:	d0f8      	beq.n	80089e2 <_strtod_l+0x1e2>
 80089f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80089f4:	2b08      	cmp	r3, #8
 80089f6:	f200 84d3 	bhi.w	80093a0 <_strtod_l+0xba0>
 80089fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80089fe:	4681      	mov	r9, r0
 8008a00:	2000      	movs	r0, #0
 8008a02:	4605      	mov	r5, r0
 8008a04:	3a30      	subs	r2, #48	@ 0x30
 8008a06:	f100 0301 	add.w	r3, r0, #1
 8008a0a:	d02a      	beq.n	8008a62 <_strtod_l+0x262>
 8008a0c:	4499      	add	r9, r3
 8008a0e:	eb00 0c05 	add.w	ip, r0, r5
 8008a12:	462b      	mov	r3, r5
 8008a14:	210a      	movs	r1, #10
 8008a16:	4563      	cmp	r3, ip
 8008a18:	d10d      	bne.n	8008a36 <_strtod_l+0x236>
 8008a1a:	1c69      	adds	r1, r5, #1
 8008a1c:	4401      	add	r1, r0
 8008a1e:	4428      	add	r0, r5
 8008a20:	2808      	cmp	r0, #8
 8008a22:	dc16      	bgt.n	8008a52 <_strtod_l+0x252>
 8008a24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a26:	230a      	movs	r3, #10
 8008a28:	fb03 2300 	mla	r3, r3, r0, r2
 8008a2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a2e:	2300      	movs	r3, #0
 8008a30:	e018      	b.n	8008a64 <_strtod_l+0x264>
 8008a32:	4638      	mov	r0, r7
 8008a34:	e7da      	b.n	80089ec <_strtod_l+0x1ec>
 8008a36:	2b08      	cmp	r3, #8
 8008a38:	f103 0301 	add.w	r3, r3, #1
 8008a3c:	dc03      	bgt.n	8008a46 <_strtod_l+0x246>
 8008a3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008a40:	434e      	muls	r6, r1
 8008a42:	960a      	str	r6, [sp, #40]	@ 0x28
 8008a44:	e7e7      	b.n	8008a16 <_strtod_l+0x216>
 8008a46:	2b10      	cmp	r3, #16
 8008a48:	bfde      	ittt	le
 8008a4a:	9e08      	ldrle	r6, [sp, #32]
 8008a4c:	434e      	mulle	r6, r1
 8008a4e:	9608      	strle	r6, [sp, #32]
 8008a50:	e7e1      	b.n	8008a16 <_strtod_l+0x216>
 8008a52:	280f      	cmp	r0, #15
 8008a54:	dceb      	bgt.n	8008a2e <_strtod_l+0x22e>
 8008a56:	9808      	ldr	r0, [sp, #32]
 8008a58:	230a      	movs	r3, #10
 8008a5a:	fb03 2300 	mla	r3, r3, r0, r2
 8008a5e:	9308      	str	r3, [sp, #32]
 8008a60:	e7e5      	b.n	8008a2e <_strtod_l+0x22e>
 8008a62:	4629      	mov	r1, r5
 8008a64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a66:	1c50      	adds	r0, r2, #1
 8008a68:	9019      	str	r0, [sp, #100]	@ 0x64
 8008a6a:	7852      	ldrb	r2, [r2, #1]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	460d      	mov	r5, r1
 8008a70:	e7b1      	b.n	80089d6 <_strtod_l+0x1d6>
 8008a72:	f04f 0900 	mov.w	r9, #0
 8008a76:	2301      	movs	r3, #1
 8008a78:	e77d      	b.n	8008976 <_strtod_l+0x176>
 8008a7a:	f04f 0c00 	mov.w	ip, #0
 8008a7e:	1ca2      	adds	r2, r4, #2
 8008a80:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a82:	78a2      	ldrb	r2, [r4, #2]
 8008a84:	e785      	b.n	8008992 <_strtod_l+0x192>
 8008a86:	f04f 0c01 	mov.w	ip, #1
 8008a8a:	e7f8      	b.n	8008a7e <_strtod_l+0x27e>
 8008a8c:	0800ad10 	.word	0x0800ad10
 8008a90:	0800acf8 	.word	0x0800acf8
 8008a94:	7ff00000 	.word	0x7ff00000
 8008a98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a9a:	1c51      	adds	r1, r2, #1
 8008a9c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008a9e:	7852      	ldrb	r2, [r2, #1]
 8008aa0:	2a30      	cmp	r2, #48	@ 0x30
 8008aa2:	d0f9      	beq.n	8008a98 <_strtod_l+0x298>
 8008aa4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008aa8:	2908      	cmp	r1, #8
 8008aaa:	f63f af78 	bhi.w	800899e <_strtod_l+0x19e>
 8008aae:	3a30      	subs	r2, #48	@ 0x30
 8008ab0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ab2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ab4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008ab6:	f04f 080a 	mov.w	r8, #10
 8008aba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008abc:	1c56      	adds	r6, r2, #1
 8008abe:	9619      	str	r6, [sp, #100]	@ 0x64
 8008ac0:	7852      	ldrb	r2, [r2, #1]
 8008ac2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008ac6:	f1be 0f09 	cmp.w	lr, #9
 8008aca:	d939      	bls.n	8008b40 <_strtod_l+0x340>
 8008acc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008ace:	1a76      	subs	r6, r6, r1
 8008ad0:	2e08      	cmp	r6, #8
 8008ad2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008ad6:	dc03      	bgt.n	8008ae0 <_strtod_l+0x2e0>
 8008ad8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008ada:	4588      	cmp	r8, r1
 8008adc:	bfa8      	it	ge
 8008ade:	4688      	movge	r8, r1
 8008ae0:	f1bc 0f00 	cmp.w	ip, #0
 8008ae4:	d001      	beq.n	8008aea <_strtod_l+0x2ea>
 8008ae6:	f1c8 0800 	rsb	r8, r8, #0
 8008aea:	2d00      	cmp	r5, #0
 8008aec:	d14e      	bne.n	8008b8c <_strtod_l+0x38c>
 8008aee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008af0:	4308      	orrs	r0, r1
 8008af2:	f47f aebe 	bne.w	8008872 <_strtod_l+0x72>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f47f aed6 	bne.w	80088a8 <_strtod_l+0xa8>
 8008afc:	2a69      	cmp	r2, #105	@ 0x69
 8008afe:	d028      	beq.n	8008b52 <_strtod_l+0x352>
 8008b00:	dc25      	bgt.n	8008b4e <_strtod_l+0x34e>
 8008b02:	2a49      	cmp	r2, #73	@ 0x49
 8008b04:	d025      	beq.n	8008b52 <_strtod_l+0x352>
 8008b06:	2a4e      	cmp	r2, #78	@ 0x4e
 8008b08:	f47f aece 	bne.w	80088a8 <_strtod_l+0xa8>
 8008b0c:	499b      	ldr	r1, [pc, #620]	@ (8008d7c <_strtod_l+0x57c>)
 8008b0e:	a819      	add	r0, sp, #100	@ 0x64
 8008b10:	f001 f9ee 	bl	8009ef0 <__match>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	f43f aec7 	beq.w	80088a8 <_strtod_l+0xa8>
 8008b1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	2b28      	cmp	r3, #40	@ 0x28
 8008b20:	d12e      	bne.n	8008b80 <_strtod_l+0x380>
 8008b22:	4997      	ldr	r1, [pc, #604]	@ (8008d80 <_strtod_l+0x580>)
 8008b24:	aa1c      	add	r2, sp, #112	@ 0x70
 8008b26:	a819      	add	r0, sp, #100	@ 0x64
 8008b28:	f001 f9f6 	bl	8009f18 <__hexnan>
 8008b2c:	2805      	cmp	r0, #5
 8008b2e:	d127      	bne.n	8008b80 <_strtod_l+0x380>
 8008b30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008b32:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008b36:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008b3a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008b3e:	e698      	b.n	8008872 <_strtod_l+0x72>
 8008b40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008b42:	fb08 2101 	mla	r1, r8, r1, r2
 8008b46:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008b4a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b4c:	e7b5      	b.n	8008aba <_strtod_l+0x2ba>
 8008b4e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008b50:	e7da      	b.n	8008b08 <_strtod_l+0x308>
 8008b52:	498c      	ldr	r1, [pc, #560]	@ (8008d84 <_strtod_l+0x584>)
 8008b54:	a819      	add	r0, sp, #100	@ 0x64
 8008b56:	f001 f9cb 	bl	8009ef0 <__match>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	f43f aea4 	beq.w	80088a8 <_strtod_l+0xa8>
 8008b60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b62:	4989      	ldr	r1, [pc, #548]	@ (8008d88 <_strtod_l+0x588>)
 8008b64:	3b01      	subs	r3, #1
 8008b66:	a819      	add	r0, sp, #100	@ 0x64
 8008b68:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b6a:	f001 f9c1 	bl	8009ef0 <__match>
 8008b6e:	b910      	cbnz	r0, 8008b76 <_strtod_l+0x376>
 8008b70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b72:	3301      	adds	r3, #1
 8008b74:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b76:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008d98 <_strtod_l+0x598>
 8008b7a:	f04f 0a00 	mov.w	sl, #0
 8008b7e:	e678      	b.n	8008872 <_strtod_l+0x72>
 8008b80:	4882      	ldr	r0, [pc, #520]	@ (8008d8c <_strtod_l+0x58c>)
 8008b82:	f000 fef1 	bl	8009968 <nan>
 8008b86:	ec5b ab10 	vmov	sl, fp, d0
 8008b8a:	e672      	b.n	8008872 <_strtod_l+0x72>
 8008b8c:	eba8 0309 	sub.w	r3, r8, r9
 8008b90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b94:	2f00      	cmp	r7, #0
 8008b96:	bf08      	it	eq
 8008b98:	462f      	moveq	r7, r5
 8008b9a:	2d10      	cmp	r5, #16
 8008b9c:	462c      	mov	r4, r5
 8008b9e:	bfa8      	it	ge
 8008ba0:	2410      	movge	r4, #16
 8008ba2:	f7f7 fcc7 	bl	8000534 <__aeabi_ui2d>
 8008ba6:	2d09      	cmp	r5, #9
 8008ba8:	4682      	mov	sl, r0
 8008baa:	468b      	mov	fp, r1
 8008bac:	dc13      	bgt.n	8008bd6 <_strtod_l+0x3d6>
 8008bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f43f ae5e 	beq.w	8008872 <_strtod_l+0x72>
 8008bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bb8:	dd78      	ble.n	8008cac <_strtod_l+0x4ac>
 8008bba:	2b16      	cmp	r3, #22
 8008bbc:	dc5f      	bgt.n	8008c7e <_strtod_l+0x47e>
 8008bbe:	4974      	ldr	r1, [pc, #464]	@ (8008d90 <_strtod_l+0x590>)
 8008bc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bc8:	4652      	mov	r2, sl
 8008bca:	465b      	mov	r3, fp
 8008bcc:	f7f7 fd2c 	bl	8000628 <__aeabi_dmul>
 8008bd0:	4682      	mov	sl, r0
 8008bd2:	468b      	mov	fp, r1
 8008bd4:	e64d      	b.n	8008872 <_strtod_l+0x72>
 8008bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8008d90 <_strtod_l+0x590>)
 8008bd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008bdc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008be0:	f7f7 fd22 	bl	8000628 <__aeabi_dmul>
 8008be4:	4682      	mov	sl, r0
 8008be6:	9808      	ldr	r0, [sp, #32]
 8008be8:	468b      	mov	fp, r1
 8008bea:	f7f7 fca3 	bl	8000534 <__aeabi_ui2d>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	4650      	mov	r0, sl
 8008bf4:	4659      	mov	r1, fp
 8008bf6:	f7f7 fb61 	bl	80002bc <__adddf3>
 8008bfa:	2d0f      	cmp	r5, #15
 8008bfc:	4682      	mov	sl, r0
 8008bfe:	468b      	mov	fp, r1
 8008c00:	ddd5      	ble.n	8008bae <_strtod_l+0x3ae>
 8008c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c04:	1b2c      	subs	r4, r5, r4
 8008c06:	441c      	add	r4, r3
 8008c08:	2c00      	cmp	r4, #0
 8008c0a:	f340 8096 	ble.w	8008d3a <_strtod_l+0x53a>
 8008c0e:	f014 030f 	ands.w	r3, r4, #15
 8008c12:	d00a      	beq.n	8008c2a <_strtod_l+0x42a>
 8008c14:	495e      	ldr	r1, [pc, #376]	@ (8008d90 <_strtod_l+0x590>)
 8008c16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c1a:	4652      	mov	r2, sl
 8008c1c:	465b      	mov	r3, fp
 8008c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c22:	f7f7 fd01 	bl	8000628 <__aeabi_dmul>
 8008c26:	4682      	mov	sl, r0
 8008c28:	468b      	mov	fp, r1
 8008c2a:	f034 040f 	bics.w	r4, r4, #15
 8008c2e:	d073      	beq.n	8008d18 <_strtod_l+0x518>
 8008c30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008c34:	dd48      	ble.n	8008cc8 <_strtod_l+0x4c8>
 8008c36:	2400      	movs	r4, #0
 8008c38:	46a0      	mov	r8, r4
 8008c3a:	940a      	str	r4, [sp, #40]	@ 0x28
 8008c3c:	46a1      	mov	r9, r4
 8008c3e:	9a05      	ldr	r2, [sp, #20]
 8008c40:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008d98 <_strtod_l+0x598>
 8008c44:	2322      	movs	r3, #34	@ 0x22
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	f04f 0a00 	mov.w	sl, #0
 8008c4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f43f ae0f 	beq.w	8008872 <_strtod_l+0x72>
 8008c54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c56:	9805      	ldr	r0, [sp, #20]
 8008c58:	f7ff f942 	bl	8007ee0 <_Bfree>
 8008c5c:	9805      	ldr	r0, [sp, #20]
 8008c5e:	4649      	mov	r1, r9
 8008c60:	f7ff f93e 	bl	8007ee0 <_Bfree>
 8008c64:	9805      	ldr	r0, [sp, #20]
 8008c66:	4641      	mov	r1, r8
 8008c68:	f7ff f93a 	bl	8007ee0 <_Bfree>
 8008c6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c6e:	9805      	ldr	r0, [sp, #20]
 8008c70:	f7ff f936 	bl	8007ee0 <_Bfree>
 8008c74:	9805      	ldr	r0, [sp, #20]
 8008c76:	4621      	mov	r1, r4
 8008c78:	f7ff f932 	bl	8007ee0 <_Bfree>
 8008c7c:	e5f9      	b.n	8008872 <_strtod_l+0x72>
 8008c7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008c84:	4293      	cmp	r3, r2
 8008c86:	dbbc      	blt.n	8008c02 <_strtod_l+0x402>
 8008c88:	4c41      	ldr	r4, [pc, #260]	@ (8008d90 <_strtod_l+0x590>)
 8008c8a:	f1c5 050f 	rsb	r5, r5, #15
 8008c8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008c92:	4652      	mov	r2, sl
 8008c94:	465b      	mov	r3, fp
 8008c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c9a:	f7f7 fcc5 	bl	8000628 <__aeabi_dmul>
 8008c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca0:	1b5d      	subs	r5, r3, r5
 8008ca2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008ca6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008caa:	e78f      	b.n	8008bcc <_strtod_l+0x3cc>
 8008cac:	3316      	adds	r3, #22
 8008cae:	dba8      	blt.n	8008c02 <_strtod_l+0x402>
 8008cb0:	4b37      	ldr	r3, [pc, #220]	@ (8008d90 <_strtod_l+0x590>)
 8008cb2:	eba9 0808 	sub.w	r8, r9, r8
 8008cb6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008cba:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008cbe:	4650      	mov	r0, sl
 8008cc0:	4659      	mov	r1, fp
 8008cc2:	f7f7 fddb 	bl	800087c <__aeabi_ddiv>
 8008cc6:	e783      	b.n	8008bd0 <_strtod_l+0x3d0>
 8008cc8:	4b32      	ldr	r3, [pc, #200]	@ (8008d94 <_strtod_l+0x594>)
 8008cca:	9308      	str	r3, [sp, #32]
 8008ccc:	2300      	movs	r3, #0
 8008cce:	1124      	asrs	r4, r4, #4
 8008cd0:	4650      	mov	r0, sl
 8008cd2:	4659      	mov	r1, fp
 8008cd4:	461e      	mov	r6, r3
 8008cd6:	2c01      	cmp	r4, #1
 8008cd8:	dc21      	bgt.n	8008d1e <_strtod_l+0x51e>
 8008cda:	b10b      	cbz	r3, 8008ce0 <_strtod_l+0x4e0>
 8008cdc:	4682      	mov	sl, r0
 8008cde:	468b      	mov	fp, r1
 8008ce0:	492c      	ldr	r1, [pc, #176]	@ (8008d94 <_strtod_l+0x594>)
 8008ce2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008ce6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008cea:	4652      	mov	r2, sl
 8008cec:	465b      	mov	r3, fp
 8008cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cf2:	f7f7 fc99 	bl	8000628 <__aeabi_dmul>
 8008cf6:	4b28      	ldr	r3, [pc, #160]	@ (8008d98 <_strtod_l+0x598>)
 8008cf8:	460a      	mov	r2, r1
 8008cfa:	400b      	ands	r3, r1
 8008cfc:	4927      	ldr	r1, [pc, #156]	@ (8008d9c <_strtod_l+0x59c>)
 8008cfe:	428b      	cmp	r3, r1
 8008d00:	4682      	mov	sl, r0
 8008d02:	d898      	bhi.n	8008c36 <_strtod_l+0x436>
 8008d04:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008d08:	428b      	cmp	r3, r1
 8008d0a:	bf86      	itte	hi
 8008d0c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008da0 <_strtod_l+0x5a0>
 8008d10:	f04f 3aff 	movhi.w	sl, #4294967295
 8008d14:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008d18:	2300      	movs	r3, #0
 8008d1a:	9308      	str	r3, [sp, #32]
 8008d1c:	e07a      	b.n	8008e14 <_strtod_l+0x614>
 8008d1e:	07e2      	lsls	r2, r4, #31
 8008d20:	d505      	bpl.n	8008d2e <_strtod_l+0x52e>
 8008d22:	9b08      	ldr	r3, [sp, #32]
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	f7f7 fc7e 	bl	8000628 <__aeabi_dmul>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	9a08      	ldr	r2, [sp, #32]
 8008d30:	3208      	adds	r2, #8
 8008d32:	3601      	adds	r6, #1
 8008d34:	1064      	asrs	r4, r4, #1
 8008d36:	9208      	str	r2, [sp, #32]
 8008d38:	e7cd      	b.n	8008cd6 <_strtod_l+0x4d6>
 8008d3a:	d0ed      	beq.n	8008d18 <_strtod_l+0x518>
 8008d3c:	4264      	negs	r4, r4
 8008d3e:	f014 020f 	ands.w	r2, r4, #15
 8008d42:	d00a      	beq.n	8008d5a <_strtod_l+0x55a>
 8008d44:	4b12      	ldr	r3, [pc, #72]	@ (8008d90 <_strtod_l+0x590>)
 8008d46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d4a:	4650      	mov	r0, sl
 8008d4c:	4659      	mov	r1, fp
 8008d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d52:	f7f7 fd93 	bl	800087c <__aeabi_ddiv>
 8008d56:	4682      	mov	sl, r0
 8008d58:	468b      	mov	fp, r1
 8008d5a:	1124      	asrs	r4, r4, #4
 8008d5c:	d0dc      	beq.n	8008d18 <_strtod_l+0x518>
 8008d5e:	2c1f      	cmp	r4, #31
 8008d60:	dd20      	ble.n	8008da4 <_strtod_l+0x5a4>
 8008d62:	2400      	movs	r4, #0
 8008d64:	46a0      	mov	r8, r4
 8008d66:	940a      	str	r4, [sp, #40]	@ 0x28
 8008d68:	46a1      	mov	r9, r4
 8008d6a:	9a05      	ldr	r2, [sp, #20]
 8008d6c:	2322      	movs	r3, #34	@ 0x22
 8008d6e:	f04f 0a00 	mov.w	sl, #0
 8008d72:	f04f 0b00 	mov.w	fp, #0
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	e768      	b.n	8008c4c <_strtod_l+0x44c>
 8008d7a:	bf00      	nop
 8008d7c:	0800aae5 	.word	0x0800aae5
 8008d80:	0800acfc 	.word	0x0800acfc
 8008d84:	0800aadd 	.word	0x0800aadd
 8008d88:	0800ab14 	.word	0x0800ab14
 8008d8c:	0800aea5 	.word	0x0800aea5
 8008d90:	0800ac30 	.word	0x0800ac30
 8008d94:	0800ac08 	.word	0x0800ac08
 8008d98:	7ff00000 	.word	0x7ff00000
 8008d9c:	7ca00000 	.word	0x7ca00000
 8008da0:	7fefffff 	.word	0x7fefffff
 8008da4:	f014 0310 	ands.w	r3, r4, #16
 8008da8:	bf18      	it	ne
 8008daa:	236a      	movne	r3, #106	@ 0x6a
 8008dac:	4ea9      	ldr	r6, [pc, #676]	@ (8009054 <_strtod_l+0x854>)
 8008dae:	9308      	str	r3, [sp, #32]
 8008db0:	4650      	mov	r0, sl
 8008db2:	4659      	mov	r1, fp
 8008db4:	2300      	movs	r3, #0
 8008db6:	07e2      	lsls	r2, r4, #31
 8008db8:	d504      	bpl.n	8008dc4 <_strtod_l+0x5c4>
 8008dba:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008dbe:	f7f7 fc33 	bl	8000628 <__aeabi_dmul>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	1064      	asrs	r4, r4, #1
 8008dc6:	f106 0608 	add.w	r6, r6, #8
 8008dca:	d1f4      	bne.n	8008db6 <_strtod_l+0x5b6>
 8008dcc:	b10b      	cbz	r3, 8008dd2 <_strtod_l+0x5d2>
 8008dce:	4682      	mov	sl, r0
 8008dd0:	468b      	mov	fp, r1
 8008dd2:	9b08      	ldr	r3, [sp, #32]
 8008dd4:	b1b3      	cbz	r3, 8008e04 <_strtod_l+0x604>
 8008dd6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008dda:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	4659      	mov	r1, fp
 8008de2:	dd0f      	ble.n	8008e04 <_strtod_l+0x604>
 8008de4:	2b1f      	cmp	r3, #31
 8008de6:	dd55      	ble.n	8008e94 <_strtod_l+0x694>
 8008de8:	2b34      	cmp	r3, #52	@ 0x34
 8008dea:	bfde      	ittt	le
 8008dec:	f04f 33ff 	movle.w	r3, #4294967295
 8008df0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008df4:	4093      	lslle	r3, r2
 8008df6:	f04f 0a00 	mov.w	sl, #0
 8008dfa:	bfcc      	ite	gt
 8008dfc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008e00:	ea03 0b01 	andle.w	fp, r3, r1
 8008e04:	2200      	movs	r2, #0
 8008e06:	2300      	movs	r3, #0
 8008e08:	4650      	mov	r0, sl
 8008e0a:	4659      	mov	r1, fp
 8008e0c:	f7f7 fe74 	bl	8000af8 <__aeabi_dcmpeq>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d1a6      	bne.n	8008d62 <_strtod_l+0x562>
 8008e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008e1a:	9805      	ldr	r0, [sp, #20]
 8008e1c:	462b      	mov	r3, r5
 8008e1e:	463a      	mov	r2, r7
 8008e20:	f7ff f8c6 	bl	8007fb0 <__s2b>
 8008e24:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e26:	2800      	cmp	r0, #0
 8008e28:	f43f af05 	beq.w	8008c36 <_strtod_l+0x436>
 8008e2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e2e:	2a00      	cmp	r2, #0
 8008e30:	eba9 0308 	sub.w	r3, r9, r8
 8008e34:	bfa8      	it	ge
 8008e36:	2300      	movge	r3, #0
 8008e38:	9312      	str	r3, [sp, #72]	@ 0x48
 8008e3a:	2400      	movs	r4, #0
 8008e3c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008e40:	9316      	str	r3, [sp, #88]	@ 0x58
 8008e42:	46a0      	mov	r8, r4
 8008e44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e46:	9805      	ldr	r0, [sp, #20]
 8008e48:	6859      	ldr	r1, [r3, #4]
 8008e4a:	f7ff f809 	bl	8007e60 <_Balloc>
 8008e4e:	4681      	mov	r9, r0
 8008e50:	2800      	cmp	r0, #0
 8008e52:	f43f aef4 	beq.w	8008c3e <_strtod_l+0x43e>
 8008e56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e58:	691a      	ldr	r2, [r3, #16]
 8008e5a:	3202      	adds	r2, #2
 8008e5c:	f103 010c 	add.w	r1, r3, #12
 8008e60:	0092      	lsls	r2, r2, #2
 8008e62:	300c      	adds	r0, #12
 8008e64:	f000 fd72 	bl	800994c <memcpy>
 8008e68:	ec4b ab10 	vmov	d0, sl, fp
 8008e6c:	9805      	ldr	r0, [sp, #20]
 8008e6e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008e70:	a91b      	add	r1, sp, #108	@ 0x6c
 8008e72:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008e76:	f7ff fbd7 	bl	8008628 <__d2b>
 8008e7a:	901a      	str	r0, [sp, #104]	@ 0x68
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	f43f aede 	beq.w	8008c3e <_strtod_l+0x43e>
 8008e82:	9805      	ldr	r0, [sp, #20]
 8008e84:	2101      	movs	r1, #1
 8008e86:	f7ff f929 	bl	80080dc <__i2b>
 8008e8a:	4680      	mov	r8, r0
 8008e8c:	b948      	cbnz	r0, 8008ea2 <_strtod_l+0x6a2>
 8008e8e:	f04f 0800 	mov.w	r8, #0
 8008e92:	e6d4      	b.n	8008c3e <_strtod_l+0x43e>
 8008e94:	f04f 32ff 	mov.w	r2, #4294967295
 8008e98:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9c:	ea03 0a0a 	and.w	sl, r3, sl
 8008ea0:	e7b0      	b.n	8008e04 <_strtod_l+0x604>
 8008ea2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008ea4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008ea6:	2d00      	cmp	r5, #0
 8008ea8:	bfab      	itete	ge
 8008eaa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008eac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008eae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008eb0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008eb2:	bfac      	ite	ge
 8008eb4:	18ef      	addge	r7, r5, r3
 8008eb6:	1b5e      	sublt	r6, r3, r5
 8008eb8:	9b08      	ldr	r3, [sp, #32]
 8008eba:	1aed      	subs	r5, r5, r3
 8008ebc:	4415      	add	r5, r2
 8008ebe:	4b66      	ldr	r3, [pc, #408]	@ (8009058 <_strtod_l+0x858>)
 8008ec0:	3d01      	subs	r5, #1
 8008ec2:	429d      	cmp	r5, r3
 8008ec4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008ec8:	da50      	bge.n	8008f6c <_strtod_l+0x76c>
 8008eca:	1b5b      	subs	r3, r3, r5
 8008ecc:	2b1f      	cmp	r3, #31
 8008ece:	eba2 0203 	sub.w	r2, r2, r3
 8008ed2:	f04f 0101 	mov.w	r1, #1
 8008ed6:	dc3d      	bgt.n	8008f54 <_strtod_l+0x754>
 8008ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8008edc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ede:	2300      	movs	r3, #0
 8008ee0:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ee2:	18bd      	adds	r5, r7, r2
 8008ee4:	9b08      	ldr	r3, [sp, #32]
 8008ee6:	42af      	cmp	r7, r5
 8008ee8:	4416      	add	r6, r2
 8008eea:	441e      	add	r6, r3
 8008eec:	463b      	mov	r3, r7
 8008eee:	bfa8      	it	ge
 8008ef0:	462b      	movge	r3, r5
 8008ef2:	42b3      	cmp	r3, r6
 8008ef4:	bfa8      	it	ge
 8008ef6:	4633      	movge	r3, r6
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	bfc2      	ittt	gt
 8008efc:	1aed      	subgt	r5, r5, r3
 8008efe:	1af6      	subgt	r6, r6, r3
 8008f00:	1aff      	subgt	r7, r7, r3
 8008f02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	dd16      	ble.n	8008f36 <_strtod_l+0x736>
 8008f08:	4641      	mov	r1, r8
 8008f0a:	9805      	ldr	r0, [sp, #20]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	f7ff f9a5 	bl	800825c <__pow5mult>
 8008f12:	4680      	mov	r8, r0
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d0ba      	beq.n	8008e8e <_strtod_l+0x68e>
 8008f18:	4601      	mov	r1, r0
 8008f1a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f1c:	9805      	ldr	r0, [sp, #20]
 8008f1e:	f7ff f8f3 	bl	8008108 <__multiply>
 8008f22:	900e      	str	r0, [sp, #56]	@ 0x38
 8008f24:	2800      	cmp	r0, #0
 8008f26:	f43f ae8a 	beq.w	8008c3e <_strtod_l+0x43e>
 8008f2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f2c:	9805      	ldr	r0, [sp, #20]
 8008f2e:	f7fe ffd7 	bl	8007ee0 <_Bfree>
 8008f32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f34:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f36:	2d00      	cmp	r5, #0
 8008f38:	dc1d      	bgt.n	8008f76 <_strtod_l+0x776>
 8008f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	dd23      	ble.n	8008f88 <_strtod_l+0x788>
 8008f40:	4649      	mov	r1, r9
 8008f42:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008f44:	9805      	ldr	r0, [sp, #20]
 8008f46:	f7ff f989 	bl	800825c <__pow5mult>
 8008f4a:	4681      	mov	r9, r0
 8008f4c:	b9e0      	cbnz	r0, 8008f88 <_strtod_l+0x788>
 8008f4e:	f04f 0900 	mov.w	r9, #0
 8008f52:	e674      	b.n	8008c3e <_strtod_l+0x43e>
 8008f54:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008f58:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008f5c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008f60:	35e2      	adds	r5, #226	@ 0xe2
 8008f62:	fa01 f305 	lsl.w	r3, r1, r5
 8008f66:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f68:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008f6a:	e7ba      	b.n	8008ee2 <_strtod_l+0x6e2>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f70:	2301      	movs	r3, #1
 8008f72:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f74:	e7b5      	b.n	8008ee2 <_strtod_l+0x6e2>
 8008f76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f78:	9805      	ldr	r0, [sp, #20]
 8008f7a:	462a      	mov	r2, r5
 8008f7c:	f7ff f9c8 	bl	8008310 <__lshift>
 8008f80:	901a      	str	r0, [sp, #104]	@ 0x68
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d1d9      	bne.n	8008f3a <_strtod_l+0x73a>
 8008f86:	e65a      	b.n	8008c3e <_strtod_l+0x43e>
 8008f88:	2e00      	cmp	r6, #0
 8008f8a:	dd07      	ble.n	8008f9c <_strtod_l+0x79c>
 8008f8c:	4649      	mov	r1, r9
 8008f8e:	9805      	ldr	r0, [sp, #20]
 8008f90:	4632      	mov	r2, r6
 8008f92:	f7ff f9bd 	bl	8008310 <__lshift>
 8008f96:	4681      	mov	r9, r0
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d0d8      	beq.n	8008f4e <_strtod_l+0x74e>
 8008f9c:	2f00      	cmp	r7, #0
 8008f9e:	dd08      	ble.n	8008fb2 <_strtod_l+0x7b2>
 8008fa0:	4641      	mov	r1, r8
 8008fa2:	9805      	ldr	r0, [sp, #20]
 8008fa4:	463a      	mov	r2, r7
 8008fa6:	f7ff f9b3 	bl	8008310 <__lshift>
 8008faa:	4680      	mov	r8, r0
 8008fac:	2800      	cmp	r0, #0
 8008fae:	f43f ae46 	beq.w	8008c3e <_strtod_l+0x43e>
 8008fb2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fb4:	9805      	ldr	r0, [sp, #20]
 8008fb6:	464a      	mov	r2, r9
 8008fb8:	f7ff fa32 	bl	8008420 <__mdiff>
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	f43f ae3d 	beq.w	8008c3e <_strtod_l+0x43e>
 8008fc4:	68c3      	ldr	r3, [r0, #12]
 8008fc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fc8:	2300      	movs	r3, #0
 8008fca:	60c3      	str	r3, [r0, #12]
 8008fcc:	4641      	mov	r1, r8
 8008fce:	f7ff fa0b 	bl	80083e8 <__mcmp>
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	da46      	bge.n	8009064 <_strtod_l+0x864>
 8008fd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fd8:	ea53 030a 	orrs.w	r3, r3, sl
 8008fdc:	d16c      	bne.n	80090b8 <_strtod_l+0x8b8>
 8008fde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d168      	bne.n	80090b8 <_strtod_l+0x8b8>
 8008fe6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008fea:	0d1b      	lsrs	r3, r3, #20
 8008fec:	051b      	lsls	r3, r3, #20
 8008fee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008ff2:	d961      	bls.n	80090b8 <_strtod_l+0x8b8>
 8008ff4:	6963      	ldr	r3, [r4, #20]
 8008ff6:	b913      	cbnz	r3, 8008ffe <_strtod_l+0x7fe>
 8008ff8:	6923      	ldr	r3, [r4, #16]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	dd5c      	ble.n	80090b8 <_strtod_l+0x8b8>
 8008ffe:	4621      	mov	r1, r4
 8009000:	2201      	movs	r2, #1
 8009002:	9805      	ldr	r0, [sp, #20]
 8009004:	f7ff f984 	bl	8008310 <__lshift>
 8009008:	4641      	mov	r1, r8
 800900a:	4604      	mov	r4, r0
 800900c:	f7ff f9ec 	bl	80083e8 <__mcmp>
 8009010:	2800      	cmp	r0, #0
 8009012:	dd51      	ble.n	80090b8 <_strtod_l+0x8b8>
 8009014:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009018:	9a08      	ldr	r2, [sp, #32]
 800901a:	0d1b      	lsrs	r3, r3, #20
 800901c:	051b      	lsls	r3, r3, #20
 800901e:	2a00      	cmp	r2, #0
 8009020:	d06b      	beq.n	80090fa <_strtod_l+0x8fa>
 8009022:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009026:	d868      	bhi.n	80090fa <_strtod_l+0x8fa>
 8009028:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800902c:	f67f ae9d 	bls.w	8008d6a <_strtod_l+0x56a>
 8009030:	4b0a      	ldr	r3, [pc, #40]	@ (800905c <_strtod_l+0x85c>)
 8009032:	4650      	mov	r0, sl
 8009034:	4659      	mov	r1, fp
 8009036:	2200      	movs	r2, #0
 8009038:	f7f7 faf6 	bl	8000628 <__aeabi_dmul>
 800903c:	4b08      	ldr	r3, [pc, #32]	@ (8009060 <_strtod_l+0x860>)
 800903e:	400b      	ands	r3, r1
 8009040:	4682      	mov	sl, r0
 8009042:	468b      	mov	fp, r1
 8009044:	2b00      	cmp	r3, #0
 8009046:	f47f ae05 	bne.w	8008c54 <_strtod_l+0x454>
 800904a:	9a05      	ldr	r2, [sp, #20]
 800904c:	2322      	movs	r3, #34	@ 0x22
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	e600      	b.n	8008c54 <_strtod_l+0x454>
 8009052:	bf00      	nop
 8009054:	0800ad28 	.word	0x0800ad28
 8009058:	fffffc02 	.word	0xfffffc02
 800905c:	39500000 	.word	0x39500000
 8009060:	7ff00000 	.word	0x7ff00000
 8009064:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009068:	d165      	bne.n	8009136 <_strtod_l+0x936>
 800906a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800906c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009070:	b35a      	cbz	r2, 80090ca <_strtod_l+0x8ca>
 8009072:	4a9f      	ldr	r2, [pc, #636]	@ (80092f0 <_strtod_l+0xaf0>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d12b      	bne.n	80090d0 <_strtod_l+0x8d0>
 8009078:	9b08      	ldr	r3, [sp, #32]
 800907a:	4651      	mov	r1, sl
 800907c:	b303      	cbz	r3, 80090c0 <_strtod_l+0x8c0>
 800907e:	4b9d      	ldr	r3, [pc, #628]	@ (80092f4 <_strtod_l+0xaf4>)
 8009080:	465a      	mov	r2, fp
 8009082:	4013      	ands	r3, r2
 8009084:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009088:	f04f 32ff 	mov.w	r2, #4294967295
 800908c:	d81b      	bhi.n	80090c6 <_strtod_l+0x8c6>
 800908e:	0d1b      	lsrs	r3, r3, #20
 8009090:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009094:	fa02 f303 	lsl.w	r3, r2, r3
 8009098:	4299      	cmp	r1, r3
 800909a:	d119      	bne.n	80090d0 <_strtod_l+0x8d0>
 800909c:	4b96      	ldr	r3, [pc, #600]	@ (80092f8 <_strtod_l+0xaf8>)
 800909e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d102      	bne.n	80090aa <_strtod_l+0x8aa>
 80090a4:	3101      	adds	r1, #1
 80090a6:	f43f adca 	beq.w	8008c3e <_strtod_l+0x43e>
 80090aa:	4b92      	ldr	r3, [pc, #584]	@ (80092f4 <_strtod_l+0xaf4>)
 80090ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090ae:	401a      	ands	r2, r3
 80090b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80090b4:	f04f 0a00 	mov.w	sl, #0
 80090b8:	9b08      	ldr	r3, [sp, #32]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1b8      	bne.n	8009030 <_strtod_l+0x830>
 80090be:	e5c9      	b.n	8008c54 <_strtod_l+0x454>
 80090c0:	f04f 33ff 	mov.w	r3, #4294967295
 80090c4:	e7e8      	b.n	8009098 <_strtod_l+0x898>
 80090c6:	4613      	mov	r3, r2
 80090c8:	e7e6      	b.n	8009098 <_strtod_l+0x898>
 80090ca:	ea53 030a 	orrs.w	r3, r3, sl
 80090ce:	d0a1      	beq.n	8009014 <_strtod_l+0x814>
 80090d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80090d2:	b1db      	cbz	r3, 800910c <_strtod_l+0x90c>
 80090d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090d6:	4213      	tst	r3, r2
 80090d8:	d0ee      	beq.n	80090b8 <_strtod_l+0x8b8>
 80090da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090dc:	9a08      	ldr	r2, [sp, #32]
 80090de:	4650      	mov	r0, sl
 80090e0:	4659      	mov	r1, fp
 80090e2:	b1bb      	cbz	r3, 8009114 <_strtod_l+0x914>
 80090e4:	f7ff fb6e 	bl	80087c4 <sulp>
 80090e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090ec:	ec53 2b10 	vmov	r2, r3, d0
 80090f0:	f7f7 f8e4 	bl	80002bc <__adddf3>
 80090f4:	4682      	mov	sl, r0
 80090f6:	468b      	mov	fp, r1
 80090f8:	e7de      	b.n	80090b8 <_strtod_l+0x8b8>
 80090fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80090fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009102:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009106:	f04f 3aff 	mov.w	sl, #4294967295
 800910a:	e7d5      	b.n	80090b8 <_strtod_l+0x8b8>
 800910c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800910e:	ea13 0f0a 	tst.w	r3, sl
 8009112:	e7e1      	b.n	80090d8 <_strtod_l+0x8d8>
 8009114:	f7ff fb56 	bl	80087c4 <sulp>
 8009118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800911c:	ec53 2b10 	vmov	r2, r3, d0
 8009120:	f7f7 f8ca 	bl	80002b8 <__aeabi_dsub>
 8009124:	2200      	movs	r2, #0
 8009126:	2300      	movs	r3, #0
 8009128:	4682      	mov	sl, r0
 800912a:	468b      	mov	fp, r1
 800912c:	f7f7 fce4 	bl	8000af8 <__aeabi_dcmpeq>
 8009130:	2800      	cmp	r0, #0
 8009132:	d0c1      	beq.n	80090b8 <_strtod_l+0x8b8>
 8009134:	e619      	b.n	8008d6a <_strtod_l+0x56a>
 8009136:	4641      	mov	r1, r8
 8009138:	4620      	mov	r0, r4
 800913a:	f7ff facd 	bl	80086d8 <__ratio>
 800913e:	ec57 6b10 	vmov	r6, r7, d0
 8009142:	2200      	movs	r2, #0
 8009144:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009148:	4630      	mov	r0, r6
 800914a:	4639      	mov	r1, r7
 800914c:	f7f7 fce8 	bl	8000b20 <__aeabi_dcmple>
 8009150:	2800      	cmp	r0, #0
 8009152:	d06f      	beq.n	8009234 <_strtod_l+0xa34>
 8009154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009156:	2b00      	cmp	r3, #0
 8009158:	d17a      	bne.n	8009250 <_strtod_l+0xa50>
 800915a:	f1ba 0f00 	cmp.w	sl, #0
 800915e:	d158      	bne.n	8009212 <_strtod_l+0xa12>
 8009160:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009162:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009166:	2b00      	cmp	r3, #0
 8009168:	d15a      	bne.n	8009220 <_strtod_l+0xa20>
 800916a:	4b64      	ldr	r3, [pc, #400]	@ (80092fc <_strtod_l+0xafc>)
 800916c:	2200      	movs	r2, #0
 800916e:	4630      	mov	r0, r6
 8009170:	4639      	mov	r1, r7
 8009172:	f7f7 fccb 	bl	8000b0c <__aeabi_dcmplt>
 8009176:	2800      	cmp	r0, #0
 8009178:	d159      	bne.n	800922e <_strtod_l+0xa2e>
 800917a:	4630      	mov	r0, r6
 800917c:	4639      	mov	r1, r7
 800917e:	4b60      	ldr	r3, [pc, #384]	@ (8009300 <_strtod_l+0xb00>)
 8009180:	2200      	movs	r2, #0
 8009182:	f7f7 fa51 	bl	8000628 <__aeabi_dmul>
 8009186:	4606      	mov	r6, r0
 8009188:	460f      	mov	r7, r1
 800918a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800918e:	9606      	str	r6, [sp, #24]
 8009190:	9307      	str	r3, [sp, #28]
 8009192:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009196:	4d57      	ldr	r5, [pc, #348]	@ (80092f4 <_strtod_l+0xaf4>)
 8009198:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800919c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800919e:	401d      	ands	r5, r3
 80091a0:	4b58      	ldr	r3, [pc, #352]	@ (8009304 <_strtod_l+0xb04>)
 80091a2:	429d      	cmp	r5, r3
 80091a4:	f040 80b2 	bne.w	800930c <_strtod_l+0xb0c>
 80091a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80091ae:	ec4b ab10 	vmov	d0, sl, fp
 80091b2:	f7ff f9c9 	bl	8008548 <__ulp>
 80091b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091ba:	ec51 0b10 	vmov	r0, r1, d0
 80091be:	f7f7 fa33 	bl	8000628 <__aeabi_dmul>
 80091c2:	4652      	mov	r2, sl
 80091c4:	465b      	mov	r3, fp
 80091c6:	f7f7 f879 	bl	80002bc <__adddf3>
 80091ca:	460b      	mov	r3, r1
 80091cc:	4949      	ldr	r1, [pc, #292]	@ (80092f4 <_strtod_l+0xaf4>)
 80091ce:	4a4e      	ldr	r2, [pc, #312]	@ (8009308 <_strtod_l+0xb08>)
 80091d0:	4019      	ands	r1, r3
 80091d2:	4291      	cmp	r1, r2
 80091d4:	4682      	mov	sl, r0
 80091d6:	d942      	bls.n	800925e <_strtod_l+0xa5e>
 80091d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80091da:	4b47      	ldr	r3, [pc, #284]	@ (80092f8 <_strtod_l+0xaf8>)
 80091dc:	429a      	cmp	r2, r3
 80091de:	d103      	bne.n	80091e8 <_strtod_l+0x9e8>
 80091e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091e2:	3301      	adds	r3, #1
 80091e4:	f43f ad2b 	beq.w	8008c3e <_strtod_l+0x43e>
 80091e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80092f8 <_strtod_l+0xaf8>
 80091ec:	f04f 3aff 	mov.w	sl, #4294967295
 80091f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091f2:	9805      	ldr	r0, [sp, #20]
 80091f4:	f7fe fe74 	bl	8007ee0 <_Bfree>
 80091f8:	9805      	ldr	r0, [sp, #20]
 80091fa:	4649      	mov	r1, r9
 80091fc:	f7fe fe70 	bl	8007ee0 <_Bfree>
 8009200:	9805      	ldr	r0, [sp, #20]
 8009202:	4641      	mov	r1, r8
 8009204:	f7fe fe6c 	bl	8007ee0 <_Bfree>
 8009208:	9805      	ldr	r0, [sp, #20]
 800920a:	4621      	mov	r1, r4
 800920c:	f7fe fe68 	bl	8007ee0 <_Bfree>
 8009210:	e618      	b.n	8008e44 <_strtod_l+0x644>
 8009212:	f1ba 0f01 	cmp.w	sl, #1
 8009216:	d103      	bne.n	8009220 <_strtod_l+0xa20>
 8009218:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800921a:	2b00      	cmp	r3, #0
 800921c:	f43f ada5 	beq.w	8008d6a <_strtod_l+0x56a>
 8009220:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80092d0 <_strtod_l+0xad0>
 8009224:	4f35      	ldr	r7, [pc, #212]	@ (80092fc <_strtod_l+0xafc>)
 8009226:	ed8d 7b06 	vstr	d7, [sp, #24]
 800922a:	2600      	movs	r6, #0
 800922c:	e7b1      	b.n	8009192 <_strtod_l+0x992>
 800922e:	4f34      	ldr	r7, [pc, #208]	@ (8009300 <_strtod_l+0xb00>)
 8009230:	2600      	movs	r6, #0
 8009232:	e7aa      	b.n	800918a <_strtod_l+0x98a>
 8009234:	4b32      	ldr	r3, [pc, #200]	@ (8009300 <_strtod_l+0xb00>)
 8009236:	4630      	mov	r0, r6
 8009238:	4639      	mov	r1, r7
 800923a:	2200      	movs	r2, #0
 800923c:	f7f7 f9f4 	bl	8000628 <__aeabi_dmul>
 8009240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009242:	4606      	mov	r6, r0
 8009244:	460f      	mov	r7, r1
 8009246:	2b00      	cmp	r3, #0
 8009248:	d09f      	beq.n	800918a <_strtod_l+0x98a>
 800924a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800924e:	e7a0      	b.n	8009192 <_strtod_l+0x992>
 8009250:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80092d8 <_strtod_l+0xad8>
 8009254:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009258:	ec57 6b17 	vmov	r6, r7, d7
 800925c:	e799      	b.n	8009192 <_strtod_l+0x992>
 800925e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009262:	9b08      	ldr	r3, [sp, #32]
 8009264:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1c1      	bne.n	80091f0 <_strtod_l+0x9f0>
 800926c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009270:	0d1b      	lsrs	r3, r3, #20
 8009272:	051b      	lsls	r3, r3, #20
 8009274:	429d      	cmp	r5, r3
 8009276:	d1bb      	bne.n	80091f0 <_strtod_l+0x9f0>
 8009278:	4630      	mov	r0, r6
 800927a:	4639      	mov	r1, r7
 800927c:	f7f7 fe42 	bl	8000f04 <__aeabi_d2lz>
 8009280:	f7f7 f9a4 	bl	80005cc <__aeabi_l2d>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	4630      	mov	r0, r6
 800928a:	4639      	mov	r1, r7
 800928c:	f7f7 f814 	bl	80002b8 <__aeabi_dsub>
 8009290:	460b      	mov	r3, r1
 8009292:	4602      	mov	r2, r0
 8009294:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009298:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800929c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800929e:	ea46 060a 	orr.w	r6, r6, sl
 80092a2:	431e      	orrs	r6, r3
 80092a4:	d06f      	beq.n	8009386 <_strtod_l+0xb86>
 80092a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80092e0 <_strtod_l+0xae0>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	f7f7 fc2e 	bl	8000b0c <__aeabi_dcmplt>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	f47f accf 	bne.w	8008c54 <_strtod_l+0x454>
 80092b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80092e8 <_strtod_l+0xae8>)
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092c0:	f7f7 fc42 	bl	8000b48 <__aeabi_dcmpgt>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d093      	beq.n	80091f0 <_strtod_l+0x9f0>
 80092c8:	e4c4      	b.n	8008c54 <_strtod_l+0x454>
 80092ca:	bf00      	nop
 80092cc:	f3af 8000 	nop.w
 80092d0:	00000000 	.word	0x00000000
 80092d4:	bff00000 	.word	0xbff00000
 80092d8:	00000000 	.word	0x00000000
 80092dc:	3ff00000 	.word	0x3ff00000
 80092e0:	94a03595 	.word	0x94a03595
 80092e4:	3fdfffff 	.word	0x3fdfffff
 80092e8:	35afe535 	.word	0x35afe535
 80092ec:	3fe00000 	.word	0x3fe00000
 80092f0:	000fffff 	.word	0x000fffff
 80092f4:	7ff00000 	.word	0x7ff00000
 80092f8:	7fefffff 	.word	0x7fefffff
 80092fc:	3ff00000 	.word	0x3ff00000
 8009300:	3fe00000 	.word	0x3fe00000
 8009304:	7fe00000 	.word	0x7fe00000
 8009308:	7c9fffff 	.word	0x7c9fffff
 800930c:	9b08      	ldr	r3, [sp, #32]
 800930e:	b323      	cbz	r3, 800935a <_strtod_l+0xb5a>
 8009310:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009314:	d821      	bhi.n	800935a <_strtod_l+0xb5a>
 8009316:	a328      	add	r3, pc, #160	@ (adr r3, 80093b8 <_strtod_l+0xbb8>)
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	4630      	mov	r0, r6
 800931e:	4639      	mov	r1, r7
 8009320:	f7f7 fbfe 	bl	8000b20 <__aeabi_dcmple>
 8009324:	b1a0      	cbz	r0, 8009350 <_strtod_l+0xb50>
 8009326:	4639      	mov	r1, r7
 8009328:	4630      	mov	r0, r6
 800932a:	f7f7 fc55 	bl	8000bd8 <__aeabi_d2uiz>
 800932e:	2801      	cmp	r0, #1
 8009330:	bf38      	it	cc
 8009332:	2001      	movcc	r0, #1
 8009334:	f7f7 f8fe 	bl	8000534 <__aeabi_ui2d>
 8009338:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800933a:	4606      	mov	r6, r0
 800933c:	460f      	mov	r7, r1
 800933e:	b9fb      	cbnz	r3, 8009380 <_strtod_l+0xb80>
 8009340:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009344:	9014      	str	r0, [sp, #80]	@ 0x50
 8009346:	9315      	str	r3, [sp, #84]	@ 0x54
 8009348:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800934c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009350:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009352:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009356:	1b5b      	subs	r3, r3, r5
 8009358:	9311      	str	r3, [sp, #68]	@ 0x44
 800935a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800935e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009362:	f7ff f8f1 	bl	8008548 <__ulp>
 8009366:	4650      	mov	r0, sl
 8009368:	ec53 2b10 	vmov	r2, r3, d0
 800936c:	4659      	mov	r1, fp
 800936e:	f7f7 f95b 	bl	8000628 <__aeabi_dmul>
 8009372:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009376:	f7f6 ffa1 	bl	80002bc <__adddf3>
 800937a:	4682      	mov	sl, r0
 800937c:	468b      	mov	fp, r1
 800937e:	e770      	b.n	8009262 <_strtod_l+0xa62>
 8009380:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009384:	e7e0      	b.n	8009348 <_strtod_l+0xb48>
 8009386:	a30e      	add	r3, pc, #56	@ (adr r3, 80093c0 <_strtod_l+0xbc0>)
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	f7f7 fbbe 	bl	8000b0c <__aeabi_dcmplt>
 8009390:	e798      	b.n	80092c4 <_strtod_l+0xac4>
 8009392:	2300      	movs	r3, #0
 8009394:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009396:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009398:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	f7ff ba6d 	b.w	800887a <_strtod_l+0x7a>
 80093a0:	2a65      	cmp	r2, #101	@ 0x65
 80093a2:	f43f ab66 	beq.w	8008a72 <_strtod_l+0x272>
 80093a6:	2a45      	cmp	r2, #69	@ 0x45
 80093a8:	f43f ab63 	beq.w	8008a72 <_strtod_l+0x272>
 80093ac:	2301      	movs	r3, #1
 80093ae:	f7ff bb9e 	b.w	8008aee <_strtod_l+0x2ee>
 80093b2:	bf00      	nop
 80093b4:	f3af 8000 	nop.w
 80093b8:	ffc00000 	.word	0xffc00000
 80093bc:	41dfffff 	.word	0x41dfffff
 80093c0:	94a03595 	.word	0x94a03595
 80093c4:	3fcfffff 	.word	0x3fcfffff

080093c8 <_strtod_r>:
 80093c8:	4b01      	ldr	r3, [pc, #4]	@ (80093d0 <_strtod_r+0x8>)
 80093ca:	f7ff ba19 	b.w	8008800 <_strtod_l>
 80093ce:	bf00      	nop
 80093d0:	20000078 	.word	0x20000078

080093d4 <_strtol_l.constprop.0>:
 80093d4:	2b24      	cmp	r3, #36	@ 0x24
 80093d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093da:	4686      	mov	lr, r0
 80093dc:	4690      	mov	r8, r2
 80093de:	d801      	bhi.n	80093e4 <_strtol_l.constprop.0+0x10>
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d106      	bne.n	80093f2 <_strtol_l.constprop.0+0x1e>
 80093e4:	f7fd fdba 	bl	8006f5c <__errno>
 80093e8:	2316      	movs	r3, #22
 80093ea:	6003      	str	r3, [r0, #0]
 80093ec:	2000      	movs	r0, #0
 80093ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f2:	4834      	ldr	r0, [pc, #208]	@ (80094c4 <_strtol_l.constprop.0+0xf0>)
 80093f4:	460d      	mov	r5, r1
 80093f6:	462a      	mov	r2, r5
 80093f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093fc:	5d06      	ldrb	r6, [r0, r4]
 80093fe:	f016 0608 	ands.w	r6, r6, #8
 8009402:	d1f8      	bne.n	80093f6 <_strtol_l.constprop.0+0x22>
 8009404:	2c2d      	cmp	r4, #45	@ 0x2d
 8009406:	d12d      	bne.n	8009464 <_strtol_l.constprop.0+0x90>
 8009408:	782c      	ldrb	r4, [r5, #0]
 800940a:	2601      	movs	r6, #1
 800940c:	1c95      	adds	r5, r2, #2
 800940e:	f033 0210 	bics.w	r2, r3, #16
 8009412:	d109      	bne.n	8009428 <_strtol_l.constprop.0+0x54>
 8009414:	2c30      	cmp	r4, #48	@ 0x30
 8009416:	d12a      	bne.n	800946e <_strtol_l.constprop.0+0x9a>
 8009418:	782a      	ldrb	r2, [r5, #0]
 800941a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800941e:	2a58      	cmp	r2, #88	@ 0x58
 8009420:	d125      	bne.n	800946e <_strtol_l.constprop.0+0x9a>
 8009422:	786c      	ldrb	r4, [r5, #1]
 8009424:	2310      	movs	r3, #16
 8009426:	3502      	adds	r5, #2
 8009428:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800942c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009430:	2200      	movs	r2, #0
 8009432:	fbbc f9f3 	udiv	r9, ip, r3
 8009436:	4610      	mov	r0, r2
 8009438:	fb03 ca19 	mls	sl, r3, r9, ip
 800943c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009440:	2f09      	cmp	r7, #9
 8009442:	d81b      	bhi.n	800947c <_strtol_l.constprop.0+0xa8>
 8009444:	463c      	mov	r4, r7
 8009446:	42a3      	cmp	r3, r4
 8009448:	dd27      	ble.n	800949a <_strtol_l.constprop.0+0xc6>
 800944a:	1c57      	adds	r7, r2, #1
 800944c:	d007      	beq.n	800945e <_strtol_l.constprop.0+0x8a>
 800944e:	4581      	cmp	r9, r0
 8009450:	d320      	bcc.n	8009494 <_strtol_l.constprop.0+0xc0>
 8009452:	d101      	bne.n	8009458 <_strtol_l.constprop.0+0x84>
 8009454:	45a2      	cmp	sl, r4
 8009456:	db1d      	blt.n	8009494 <_strtol_l.constprop.0+0xc0>
 8009458:	fb00 4003 	mla	r0, r0, r3, r4
 800945c:	2201      	movs	r2, #1
 800945e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009462:	e7eb      	b.n	800943c <_strtol_l.constprop.0+0x68>
 8009464:	2c2b      	cmp	r4, #43	@ 0x2b
 8009466:	bf04      	itt	eq
 8009468:	782c      	ldrbeq	r4, [r5, #0]
 800946a:	1c95      	addeq	r5, r2, #2
 800946c:	e7cf      	b.n	800940e <_strtol_l.constprop.0+0x3a>
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1da      	bne.n	8009428 <_strtol_l.constprop.0+0x54>
 8009472:	2c30      	cmp	r4, #48	@ 0x30
 8009474:	bf0c      	ite	eq
 8009476:	2308      	moveq	r3, #8
 8009478:	230a      	movne	r3, #10
 800947a:	e7d5      	b.n	8009428 <_strtol_l.constprop.0+0x54>
 800947c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009480:	2f19      	cmp	r7, #25
 8009482:	d801      	bhi.n	8009488 <_strtol_l.constprop.0+0xb4>
 8009484:	3c37      	subs	r4, #55	@ 0x37
 8009486:	e7de      	b.n	8009446 <_strtol_l.constprop.0+0x72>
 8009488:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800948c:	2f19      	cmp	r7, #25
 800948e:	d804      	bhi.n	800949a <_strtol_l.constprop.0+0xc6>
 8009490:	3c57      	subs	r4, #87	@ 0x57
 8009492:	e7d8      	b.n	8009446 <_strtol_l.constprop.0+0x72>
 8009494:	f04f 32ff 	mov.w	r2, #4294967295
 8009498:	e7e1      	b.n	800945e <_strtol_l.constprop.0+0x8a>
 800949a:	1c53      	adds	r3, r2, #1
 800949c:	d108      	bne.n	80094b0 <_strtol_l.constprop.0+0xdc>
 800949e:	2322      	movs	r3, #34	@ 0x22
 80094a0:	f8ce 3000 	str.w	r3, [lr]
 80094a4:	4660      	mov	r0, ip
 80094a6:	f1b8 0f00 	cmp.w	r8, #0
 80094aa:	d0a0      	beq.n	80093ee <_strtol_l.constprop.0+0x1a>
 80094ac:	1e69      	subs	r1, r5, #1
 80094ae:	e006      	b.n	80094be <_strtol_l.constprop.0+0xea>
 80094b0:	b106      	cbz	r6, 80094b4 <_strtol_l.constprop.0+0xe0>
 80094b2:	4240      	negs	r0, r0
 80094b4:	f1b8 0f00 	cmp.w	r8, #0
 80094b8:	d099      	beq.n	80093ee <_strtol_l.constprop.0+0x1a>
 80094ba:	2a00      	cmp	r2, #0
 80094bc:	d1f6      	bne.n	80094ac <_strtol_l.constprop.0+0xd8>
 80094be:	f8c8 1000 	str.w	r1, [r8]
 80094c2:	e794      	b.n	80093ee <_strtol_l.constprop.0+0x1a>
 80094c4:	0800ad51 	.word	0x0800ad51

080094c8 <_strtol_r>:
 80094c8:	f7ff bf84 	b.w	80093d4 <_strtol_l.constprop.0>

080094cc <__ssputs_r>:
 80094cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d0:	688e      	ldr	r6, [r1, #8]
 80094d2:	461f      	mov	r7, r3
 80094d4:	42be      	cmp	r6, r7
 80094d6:	680b      	ldr	r3, [r1, #0]
 80094d8:	4682      	mov	sl, r0
 80094da:	460c      	mov	r4, r1
 80094dc:	4690      	mov	r8, r2
 80094de:	d82d      	bhi.n	800953c <__ssputs_r+0x70>
 80094e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80094e8:	d026      	beq.n	8009538 <__ssputs_r+0x6c>
 80094ea:	6965      	ldr	r5, [r4, #20]
 80094ec:	6909      	ldr	r1, [r1, #16]
 80094ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094f2:	eba3 0901 	sub.w	r9, r3, r1
 80094f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094fa:	1c7b      	adds	r3, r7, #1
 80094fc:	444b      	add	r3, r9
 80094fe:	106d      	asrs	r5, r5, #1
 8009500:	429d      	cmp	r5, r3
 8009502:	bf38      	it	cc
 8009504:	461d      	movcc	r5, r3
 8009506:	0553      	lsls	r3, r2, #21
 8009508:	d527      	bpl.n	800955a <__ssputs_r+0x8e>
 800950a:	4629      	mov	r1, r5
 800950c:	f7fe fc1c 	bl	8007d48 <_malloc_r>
 8009510:	4606      	mov	r6, r0
 8009512:	b360      	cbz	r0, 800956e <__ssputs_r+0xa2>
 8009514:	6921      	ldr	r1, [r4, #16]
 8009516:	464a      	mov	r2, r9
 8009518:	f000 fa18 	bl	800994c <memcpy>
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	6126      	str	r6, [r4, #16]
 800952a:	6165      	str	r5, [r4, #20]
 800952c:	444e      	add	r6, r9
 800952e:	eba5 0509 	sub.w	r5, r5, r9
 8009532:	6026      	str	r6, [r4, #0]
 8009534:	60a5      	str	r5, [r4, #8]
 8009536:	463e      	mov	r6, r7
 8009538:	42be      	cmp	r6, r7
 800953a:	d900      	bls.n	800953e <__ssputs_r+0x72>
 800953c:	463e      	mov	r6, r7
 800953e:	6820      	ldr	r0, [r4, #0]
 8009540:	4632      	mov	r2, r6
 8009542:	4641      	mov	r1, r8
 8009544:	f000 f9c6 	bl	80098d4 <memmove>
 8009548:	68a3      	ldr	r3, [r4, #8]
 800954a:	1b9b      	subs	r3, r3, r6
 800954c:	60a3      	str	r3, [r4, #8]
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	4433      	add	r3, r6
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	2000      	movs	r0, #0
 8009556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955a:	462a      	mov	r2, r5
 800955c:	f000 fd89 	bl	800a072 <_realloc_r>
 8009560:	4606      	mov	r6, r0
 8009562:	2800      	cmp	r0, #0
 8009564:	d1e0      	bne.n	8009528 <__ssputs_r+0x5c>
 8009566:	6921      	ldr	r1, [r4, #16]
 8009568:	4650      	mov	r0, sl
 800956a:	f7fe fb79 	bl	8007c60 <_free_r>
 800956e:	230c      	movs	r3, #12
 8009570:	f8ca 3000 	str.w	r3, [sl]
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800957a:	81a3      	strh	r3, [r4, #12]
 800957c:	f04f 30ff 	mov.w	r0, #4294967295
 8009580:	e7e9      	b.n	8009556 <__ssputs_r+0x8a>
	...

08009584 <_svfiprintf_r>:
 8009584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009588:	4698      	mov	r8, r3
 800958a:	898b      	ldrh	r3, [r1, #12]
 800958c:	061b      	lsls	r3, r3, #24
 800958e:	b09d      	sub	sp, #116	@ 0x74
 8009590:	4607      	mov	r7, r0
 8009592:	460d      	mov	r5, r1
 8009594:	4614      	mov	r4, r2
 8009596:	d510      	bpl.n	80095ba <_svfiprintf_r+0x36>
 8009598:	690b      	ldr	r3, [r1, #16]
 800959a:	b973      	cbnz	r3, 80095ba <_svfiprintf_r+0x36>
 800959c:	2140      	movs	r1, #64	@ 0x40
 800959e:	f7fe fbd3 	bl	8007d48 <_malloc_r>
 80095a2:	6028      	str	r0, [r5, #0]
 80095a4:	6128      	str	r0, [r5, #16]
 80095a6:	b930      	cbnz	r0, 80095b6 <_svfiprintf_r+0x32>
 80095a8:	230c      	movs	r3, #12
 80095aa:	603b      	str	r3, [r7, #0]
 80095ac:	f04f 30ff 	mov.w	r0, #4294967295
 80095b0:	b01d      	add	sp, #116	@ 0x74
 80095b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b6:	2340      	movs	r3, #64	@ 0x40
 80095b8:	616b      	str	r3, [r5, #20]
 80095ba:	2300      	movs	r3, #0
 80095bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80095be:	2320      	movs	r3, #32
 80095c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80095c8:	2330      	movs	r3, #48	@ 0x30
 80095ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009768 <_svfiprintf_r+0x1e4>
 80095ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095d2:	f04f 0901 	mov.w	r9, #1
 80095d6:	4623      	mov	r3, r4
 80095d8:	469a      	mov	sl, r3
 80095da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095de:	b10a      	cbz	r2, 80095e4 <_svfiprintf_r+0x60>
 80095e0:	2a25      	cmp	r2, #37	@ 0x25
 80095e2:	d1f9      	bne.n	80095d8 <_svfiprintf_r+0x54>
 80095e4:	ebba 0b04 	subs.w	fp, sl, r4
 80095e8:	d00b      	beq.n	8009602 <_svfiprintf_r+0x7e>
 80095ea:	465b      	mov	r3, fp
 80095ec:	4622      	mov	r2, r4
 80095ee:	4629      	mov	r1, r5
 80095f0:	4638      	mov	r0, r7
 80095f2:	f7ff ff6b 	bl	80094cc <__ssputs_r>
 80095f6:	3001      	adds	r0, #1
 80095f8:	f000 80a7 	beq.w	800974a <_svfiprintf_r+0x1c6>
 80095fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095fe:	445a      	add	r2, fp
 8009600:	9209      	str	r2, [sp, #36]	@ 0x24
 8009602:	f89a 3000 	ldrb.w	r3, [sl]
 8009606:	2b00      	cmp	r3, #0
 8009608:	f000 809f 	beq.w	800974a <_svfiprintf_r+0x1c6>
 800960c:	2300      	movs	r3, #0
 800960e:	f04f 32ff 	mov.w	r2, #4294967295
 8009612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009616:	f10a 0a01 	add.w	sl, sl, #1
 800961a:	9304      	str	r3, [sp, #16]
 800961c:	9307      	str	r3, [sp, #28]
 800961e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009622:	931a      	str	r3, [sp, #104]	@ 0x68
 8009624:	4654      	mov	r4, sl
 8009626:	2205      	movs	r2, #5
 8009628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962c:	484e      	ldr	r0, [pc, #312]	@ (8009768 <_svfiprintf_r+0x1e4>)
 800962e:	f7f6 fde7 	bl	8000200 <memchr>
 8009632:	9a04      	ldr	r2, [sp, #16]
 8009634:	b9d8      	cbnz	r0, 800966e <_svfiprintf_r+0xea>
 8009636:	06d0      	lsls	r0, r2, #27
 8009638:	bf44      	itt	mi
 800963a:	2320      	movmi	r3, #32
 800963c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009640:	0711      	lsls	r1, r2, #28
 8009642:	bf44      	itt	mi
 8009644:	232b      	movmi	r3, #43	@ 0x2b
 8009646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800964a:	f89a 3000 	ldrb.w	r3, [sl]
 800964e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009650:	d015      	beq.n	800967e <_svfiprintf_r+0xfa>
 8009652:	9a07      	ldr	r2, [sp, #28]
 8009654:	4654      	mov	r4, sl
 8009656:	2000      	movs	r0, #0
 8009658:	f04f 0c0a 	mov.w	ip, #10
 800965c:	4621      	mov	r1, r4
 800965e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009662:	3b30      	subs	r3, #48	@ 0x30
 8009664:	2b09      	cmp	r3, #9
 8009666:	d94b      	bls.n	8009700 <_svfiprintf_r+0x17c>
 8009668:	b1b0      	cbz	r0, 8009698 <_svfiprintf_r+0x114>
 800966a:	9207      	str	r2, [sp, #28]
 800966c:	e014      	b.n	8009698 <_svfiprintf_r+0x114>
 800966e:	eba0 0308 	sub.w	r3, r0, r8
 8009672:	fa09 f303 	lsl.w	r3, r9, r3
 8009676:	4313      	orrs	r3, r2
 8009678:	9304      	str	r3, [sp, #16]
 800967a:	46a2      	mov	sl, r4
 800967c:	e7d2      	b.n	8009624 <_svfiprintf_r+0xa0>
 800967e:	9b03      	ldr	r3, [sp, #12]
 8009680:	1d19      	adds	r1, r3, #4
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	9103      	str	r1, [sp, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	bfbb      	ittet	lt
 800968a:	425b      	neglt	r3, r3
 800968c:	f042 0202 	orrlt.w	r2, r2, #2
 8009690:	9307      	strge	r3, [sp, #28]
 8009692:	9307      	strlt	r3, [sp, #28]
 8009694:	bfb8      	it	lt
 8009696:	9204      	strlt	r2, [sp, #16]
 8009698:	7823      	ldrb	r3, [r4, #0]
 800969a:	2b2e      	cmp	r3, #46	@ 0x2e
 800969c:	d10a      	bne.n	80096b4 <_svfiprintf_r+0x130>
 800969e:	7863      	ldrb	r3, [r4, #1]
 80096a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80096a2:	d132      	bne.n	800970a <_svfiprintf_r+0x186>
 80096a4:	9b03      	ldr	r3, [sp, #12]
 80096a6:	1d1a      	adds	r2, r3, #4
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	9203      	str	r2, [sp, #12]
 80096ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096b0:	3402      	adds	r4, #2
 80096b2:	9305      	str	r3, [sp, #20]
 80096b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009778 <_svfiprintf_r+0x1f4>
 80096b8:	7821      	ldrb	r1, [r4, #0]
 80096ba:	2203      	movs	r2, #3
 80096bc:	4650      	mov	r0, sl
 80096be:	f7f6 fd9f 	bl	8000200 <memchr>
 80096c2:	b138      	cbz	r0, 80096d4 <_svfiprintf_r+0x150>
 80096c4:	9b04      	ldr	r3, [sp, #16]
 80096c6:	eba0 000a 	sub.w	r0, r0, sl
 80096ca:	2240      	movs	r2, #64	@ 0x40
 80096cc:	4082      	lsls	r2, r0
 80096ce:	4313      	orrs	r3, r2
 80096d0:	3401      	adds	r4, #1
 80096d2:	9304      	str	r3, [sp, #16]
 80096d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d8:	4824      	ldr	r0, [pc, #144]	@ (800976c <_svfiprintf_r+0x1e8>)
 80096da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096de:	2206      	movs	r2, #6
 80096e0:	f7f6 fd8e 	bl	8000200 <memchr>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d036      	beq.n	8009756 <_svfiprintf_r+0x1d2>
 80096e8:	4b21      	ldr	r3, [pc, #132]	@ (8009770 <_svfiprintf_r+0x1ec>)
 80096ea:	bb1b      	cbnz	r3, 8009734 <_svfiprintf_r+0x1b0>
 80096ec:	9b03      	ldr	r3, [sp, #12]
 80096ee:	3307      	adds	r3, #7
 80096f0:	f023 0307 	bic.w	r3, r3, #7
 80096f4:	3308      	adds	r3, #8
 80096f6:	9303      	str	r3, [sp, #12]
 80096f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096fa:	4433      	add	r3, r6
 80096fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80096fe:	e76a      	b.n	80095d6 <_svfiprintf_r+0x52>
 8009700:	fb0c 3202 	mla	r2, ip, r2, r3
 8009704:	460c      	mov	r4, r1
 8009706:	2001      	movs	r0, #1
 8009708:	e7a8      	b.n	800965c <_svfiprintf_r+0xd8>
 800970a:	2300      	movs	r3, #0
 800970c:	3401      	adds	r4, #1
 800970e:	9305      	str	r3, [sp, #20]
 8009710:	4619      	mov	r1, r3
 8009712:	f04f 0c0a 	mov.w	ip, #10
 8009716:	4620      	mov	r0, r4
 8009718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800971c:	3a30      	subs	r2, #48	@ 0x30
 800971e:	2a09      	cmp	r2, #9
 8009720:	d903      	bls.n	800972a <_svfiprintf_r+0x1a6>
 8009722:	2b00      	cmp	r3, #0
 8009724:	d0c6      	beq.n	80096b4 <_svfiprintf_r+0x130>
 8009726:	9105      	str	r1, [sp, #20]
 8009728:	e7c4      	b.n	80096b4 <_svfiprintf_r+0x130>
 800972a:	fb0c 2101 	mla	r1, ip, r1, r2
 800972e:	4604      	mov	r4, r0
 8009730:	2301      	movs	r3, #1
 8009732:	e7f0      	b.n	8009716 <_svfiprintf_r+0x192>
 8009734:	ab03      	add	r3, sp, #12
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	462a      	mov	r2, r5
 800973a:	4b0e      	ldr	r3, [pc, #56]	@ (8009774 <_svfiprintf_r+0x1f0>)
 800973c:	a904      	add	r1, sp, #16
 800973e:	4638      	mov	r0, r7
 8009740:	f7fc fcc8 	bl	80060d4 <_printf_float>
 8009744:	1c42      	adds	r2, r0, #1
 8009746:	4606      	mov	r6, r0
 8009748:	d1d6      	bne.n	80096f8 <_svfiprintf_r+0x174>
 800974a:	89ab      	ldrh	r3, [r5, #12]
 800974c:	065b      	lsls	r3, r3, #25
 800974e:	f53f af2d 	bmi.w	80095ac <_svfiprintf_r+0x28>
 8009752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009754:	e72c      	b.n	80095b0 <_svfiprintf_r+0x2c>
 8009756:	ab03      	add	r3, sp, #12
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	462a      	mov	r2, r5
 800975c:	4b05      	ldr	r3, [pc, #20]	@ (8009774 <_svfiprintf_r+0x1f0>)
 800975e:	a904      	add	r1, sp, #16
 8009760:	4638      	mov	r0, r7
 8009762:	f7fc ff4f 	bl	8006604 <_printf_i>
 8009766:	e7ed      	b.n	8009744 <_svfiprintf_r+0x1c0>
 8009768:	0800ae51 	.word	0x0800ae51
 800976c:	0800ae5b 	.word	0x0800ae5b
 8009770:	080060d5 	.word	0x080060d5
 8009774:	080094cd 	.word	0x080094cd
 8009778:	0800ae57 	.word	0x0800ae57

0800977c <__sflush_r>:
 800977c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009784:	0716      	lsls	r6, r2, #28
 8009786:	4605      	mov	r5, r0
 8009788:	460c      	mov	r4, r1
 800978a:	d454      	bmi.n	8009836 <__sflush_r+0xba>
 800978c:	684b      	ldr	r3, [r1, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	dc02      	bgt.n	8009798 <__sflush_r+0x1c>
 8009792:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009794:	2b00      	cmp	r3, #0
 8009796:	dd48      	ble.n	800982a <__sflush_r+0xae>
 8009798:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800979a:	2e00      	cmp	r6, #0
 800979c:	d045      	beq.n	800982a <__sflush_r+0xae>
 800979e:	2300      	movs	r3, #0
 80097a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80097a4:	682f      	ldr	r7, [r5, #0]
 80097a6:	6a21      	ldr	r1, [r4, #32]
 80097a8:	602b      	str	r3, [r5, #0]
 80097aa:	d030      	beq.n	800980e <__sflush_r+0x92>
 80097ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	0759      	lsls	r1, r3, #29
 80097b2:	d505      	bpl.n	80097c0 <__sflush_r+0x44>
 80097b4:	6863      	ldr	r3, [r4, #4]
 80097b6:	1ad2      	subs	r2, r2, r3
 80097b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097ba:	b10b      	cbz	r3, 80097c0 <__sflush_r+0x44>
 80097bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097be:	1ad2      	subs	r2, r2, r3
 80097c0:	2300      	movs	r3, #0
 80097c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097c4:	6a21      	ldr	r1, [r4, #32]
 80097c6:	4628      	mov	r0, r5
 80097c8:	47b0      	blx	r6
 80097ca:	1c43      	adds	r3, r0, #1
 80097cc:	89a3      	ldrh	r3, [r4, #12]
 80097ce:	d106      	bne.n	80097de <__sflush_r+0x62>
 80097d0:	6829      	ldr	r1, [r5, #0]
 80097d2:	291d      	cmp	r1, #29
 80097d4:	d82b      	bhi.n	800982e <__sflush_r+0xb2>
 80097d6:	4a2a      	ldr	r2, [pc, #168]	@ (8009880 <__sflush_r+0x104>)
 80097d8:	410a      	asrs	r2, r1
 80097da:	07d6      	lsls	r6, r2, #31
 80097dc:	d427      	bmi.n	800982e <__sflush_r+0xb2>
 80097de:	2200      	movs	r2, #0
 80097e0:	6062      	str	r2, [r4, #4]
 80097e2:	04d9      	lsls	r1, r3, #19
 80097e4:	6922      	ldr	r2, [r4, #16]
 80097e6:	6022      	str	r2, [r4, #0]
 80097e8:	d504      	bpl.n	80097f4 <__sflush_r+0x78>
 80097ea:	1c42      	adds	r2, r0, #1
 80097ec:	d101      	bne.n	80097f2 <__sflush_r+0x76>
 80097ee:	682b      	ldr	r3, [r5, #0]
 80097f0:	b903      	cbnz	r3, 80097f4 <__sflush_r+0x78>
 80097f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80097f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097f6:	602f      	str	r7, [r5, #0]
 80097f8:	b1b9      	cbz	r1, 800982a <__sflush_r+0xae>
 80097fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097fe:	4299      	cmp	r1, r3
 8009800:	d002      	beq.n	8009808 <__sflush_r+0x8c>
 8009802:	4628      	mov	r0, r5
 8009804:	f7fe fa2c 	bl	8007c60 <_free_r>
 8009808:	2300      	movs	r3, #0
 800980a:	6363      	str	r3, [r4, #52]	@ 0x34
 800980c:	e00d      	b.n	800982a <__sflush_r+0xae>
 800980e:	2301      	movs	r3, #1
 8009810:	4628      	mov	r0, r5
 8009812:	47b0      	blx	r6
 8009814:	4602      	mov	r2, r0
 8009816:	1c50      	adds	r0, r2, #1
 8009818:	d1c9      	bne.n	80097ae <__sflush_r+0x32>
 800981a:	682b      	ldr	r3, [r5, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d0c6      	beq.n	80097ae <__sflush_r+0x32>
 8009820:	2b1d      	cmp	r3, #29
 8009822:	d001      	beq.n	8009828 <__sflush_r+0xac>
 8009824:	2b16      	cmp	r3, #22
 8009826:	d11e      	bne.n	8009866 <__sflush_r+0xea>
 8009828:	602f      	str	r7, [r5, #0]
 800982a:	2000      	movs	r0, #0
 800982c:	e022      	b.n	8009874 <__sflush_r+0xf8>
 800982e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009832:	b21b      	sxth	r3, r3
 8009834:	e01b      	b.n	800986e <__sflush_r+0xf2>
 8009836:	690f      	ldr	r7, [r1, #16]
 8009838:	2f00      	cmp	r7, #0
 800983a:	d0f6      	beq.n	800982a <__sflush_r+0xae>
 800983c:	0793      	lsls	r3, r2, #30
 800983e:	680e      	ldr	r6, [r1, #0]
 8009840:	bf08      	it	eq
 8009842:	694b      	ldreq	r3, [r1, #20]
 8009844:	600f      	str	r7, [r1, #0]
 8009846:	bf18      	it	ne
 8009848:	2300      	movne	r3, #0
 800984a:	eba6 0807 	sub.w	r8, r6, r7
 800984e:	608b      	str	r3, [r1, #8]
 8009850:	f1b8 0f00 	cmp.w	r8, #0
 8009854:	dde9      	ble.n	800982a <__sflush_r+0xae>
 8009856:	6a21      	ldr	r1, [r4, #32]
 8009858:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800985a:	4643      	mov	r3, r8
 800985c:	463a      	mov	r2, r7
 800985e:	4628      	mov	r0, r5
 8009860:	47b0      	blx	r6
 8009862:	2800      	cmp	r0, #0
 8009864:	dc08      	bgt.n	8009878 <__sflush_r+0xfc>
 8009866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800986a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800986e:	81a3      	strh	r3, [r4, #12]
 8009870:	f04f 30ff 	mov.w	r0, #4294967295
 8009874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009878:	4407      	add	r7, r0
 800987a:	eba8 0800 	sub.w	r8, r8, r0
 800987e:	e7e7      	b.n	8009850 <__sflush_r+0xd4>
 8009880:	dfbffffe 	.word	0xdfbffffe

08009884 <_fflush_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	690b      	ldr	r3, [r1, #16]
 8009888:	4605      	mov	r5, r0
 800988a:	460c      	mov	r4, r1
 800988c:	b913      	cbnz	r3, 8009894 <_fflush_r+0x10>
 800988e:	2500      	movs	r5, #0
 8009890:	4628      	mov	r0, r5
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	b118      	cbz	r0, 800989e <_fflush_r+0x1a>
 8009896:	6a03      	ldr	r3, [r0, #32]
 8009898:	b90b      	cbnz	r3, 800989e <_fflush_r+0x1a>
 800989a:	f7fd fa73 	bl	8006d84 <__sinit>
 800989e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d0f3      	beq.n	800988e <_fflush_r+0xa>
 80098a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098a8:	07d0      	lsls	r0, r2, #31
 80098aa:	d404      	bmi.n	80098b6 <_fflush_r+0x32>
 80098ac:	0599      	lsls	r1, r3, #22
 80098ae:	d402      	bmi.n	80098b6 <_fflush_r+0x32>
 80098b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098b2:	f7fd fb7e 	bl	8006fb2 <__retarget_lock_acquire_recursive>
 80098b6:	4628      	mov	r0, r5
 80098b8:	4621      	mov	r1, r4
 80098ba:	f7ff ff5f 	bl	800977c <__sflush_r>
 80098be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098c0:	07da      	lsls	r2, r3, #31
 80098c2:	4605      	mov	r5, r0
 80098c4:	d4e4      	bmi.n	8009890 <_fflush_r+0xc>
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	059b      	lsls	r3, r3, #22
 80098ca:	d4e1      	bmi.n	8009890 <_fflush_r+0xc>
 80098cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098ce:	f7fd fb71 	bl	8006fb4 <__retarget_lock_release_recursive>
 80098d2:	e7dd      	b.n	8009890 <_fflush_r+0xc>

080098d4 <memmove>:
 80098d4:	4288      	cmp	r0, r1
 80098d6:	b510      	push	{r4, lr}
 80098d8:	eb01 0402 	add.w	r4, r1, r2
 80098dc:	d902      	bls.n	80098e4 <memmove+0x10>
 80098de:	4284      	cmp	r4, r0
 80098e0:	4623      	mov	r3, r4
 80098e2:	d807      	bhi.n	80098f4 <memmove+0x20>
 80098e4:	1e43      	subs	r3, r0, #1
 80098e6:	42a1      	cmp	r1, r4
 80098e8:	d008      	beq.n	80098fc <memmove+0x28>
 80098ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098f2:	e7f8      	b.n	80098e6 <memmove+0x12>
 80098f4:	4402      	add	r2, r0
 80098f6:	4601      	mov	r1, r0
 80098f8:	428a      	cmp	r2, r1
 80098fa:	d100      	bne.n	80098fe <memmove+0x2a>
 80098fc:	bd10      	pop	{r4, pc}
 80098fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009906:	e7f7      	b.n	80098f8 <memmove+0x24>

08009908 <strncmp>:
 8009908:	b510      	push	{r4, lr}
 800990a:	b16a      	cbz	r2, 8009928 <strncmp+0x20>
 800990c:	3901      	subs	r1, #1
 800990e:	1884      	adds	r4, r0, r2
 8009910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009914:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009918:	429a      	cmp	r2, r3
 800991a:	d103      	bne.n	8009924 <strncmp+0x1c>
 800991c:	42a0      	cmp	r0, r4
 800991e:	d001      	beq.n	8009924 <strncmp+0x1c>
 8009920:	2a00      	cmp	r2, #0
 8009922:	d1f5      	bne.n	8009910 <strncmp+0x8>
 8009924:	1ad0      	subs	r0, r2, r3
 8009926:	bd10      	pop	{r4, pc}
 8009928:	4610      	mov	r0, r2
 800992a:	e7fc      	b.n	8009926 <strncmp+0x1e>

0800992c <_sbrk_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	4d06      	ldr	r5, [pc, #24]	@ (8009948 <_sbrk_r+0x1c>)
 8009930:	2300      	movs	r3, #0
 8009932:	4604      	mov	r4, r0
 8009934:	4608      	mov	r0, r1
 8009936:	602b      	str	r3, [r5, #0]
 8009938:	f7f8 fce0 	bl	80022fc <_sbrk>
 800993c:	1c43      	adds	r3, r0, #1
 800993e:	d102      	bne.n	8009946 <_sbrk_r+0x1a>
 8009940:	682b      	ldr	r3, [r5, #0]
 8009942:	b103      	cbz	r3, 8009946 <_sbrk_r+0x1a>
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	bd38      	pop	{r3, r4, r5, pc}
 8009948:	200007e8 	.word	0x200007e8

0800994c <memcpy>:
 800994c:	440a      	add	r2, r1
 800994e:	4291      	cmp	r1, r2
 8009950:	f100 33ff 	add.w	r3, r0, #4294967295
 8009954:	d100      	bne.n	8009958 <memcpy+0xc>
 8009956:	4770      	bx	lr
 8009958:	b510      	push	{r4, lr}
 800995a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800995e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009962:	4291      	cmp	r1, r2
 8009964:	d1f9      	bne.n	800995a <memcpy+0xe>
 8009966:	bd10      	pop	{r4, pc}

08009968 <nan>:
 8009968:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009970 <nan+0x8>
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	00000000 	.word	0x00000000
 8009974:	7ff80000 	.word	0x7ff80000

08009978 <__assert_func>:
 8009978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800997a:	4614      	mov	r4, r2
 800997c:	461a      	mov	r2, r3
 800997e:	4b09      	ldr	r3, [pc, #36]	@ (80099a4 <__assert_func+0x2c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4605      	mov	r5, r0
 8009984:	68d8      	ldr	r0, [r3, #12]
 8009986:	b954      	cbnz	r4, 800999e <__assert_func+0x26>
 8009988:	4b07      	ldr	r3, [pc, #28]	@ (80099a8 <__assert_func+0x30>)
 800998a:	461c      	mov	r4, r3
 800998c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009990:	9100      	str	r1, [sp, #0]
 8009992:	462b      	mov	r3, r5
 8009994:	4905      	ldr	r1, [pc, #20]	@ (80099ac <__assert_func+0x34>)
 8009996:	f000 fba7 	bl	800a0e8 <fiprintf>
 800999a:	f000 fbb7 	bl	800a10c <abort>
 800999e:	4b04      	ldr	r3, [pc, #16]	@ (80099b0 <__assert_func+0x38>)
 80099a0:	e7f4      	b.n	800998c <__assert_func+0x14>
 80099a2:	bf00      	nop
 80099a4:	20000028 	.word	0x20000028
 80099a8:	0800aea5 	.word	0x0800aea5
 80099ac:	0800ae77 	.word	0x0800ae77
 80099b0:	0800ae6a 	.word	0x0800ae6a

080099b4 <_calloc_r>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	fba1 5402 	umull	r5, r4, r1, r2
 80099ba:	b93c      	cbnz	r4, 80099cc <_calloc_r+0x18>
 80099bc:	4629      	mov	r1, r5
 80099be:	f7fe f9c3 	bl	8007d48 <_malloc_r>
 80099c2:	4606      	mov	r6, r0
 80099c4:	b928      	cbnz	r0, 80099d2 <_calloc_r+0x1e>
 80099c6:	2600      	movs	r6, #0
 80099c8:	4630      	mov	r0, r6
 80099ca:	bd70      	pop	{r4, r5, r6, pc}
 80099cc:	220c      	movs	r2, #12
 80099ce:	6002      	str	r2, [r0, #0]
 80099d0:	e7f9      	b.n	80099c6 <_calloc_r+0x12>
 80099d2:	462a      	mov	r2, r5
 80099d4:	4621      	mov	r1, r4
 80099d6:	f7fd fa6e 	bl	8006eb6 <memset>
 80099da:	e7f5      	b.n	80099c8 <_calloc_r+0x14>

080099dc <rshift>:
 80099dc:	6903      	ldr	r3, [r0, #16]
 80099de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80099e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80099ea:	f100 0414 	add.w	r4, r0, #20
 80099ee:	dd45      	ble.n	8009a7c <rshift+0xa0>
 80099f0:	f011 011f 	ands.w	r1, r1, #31
 80099f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80099f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80099fc:	d10c      	bne.n	8009a18 <rshift+0x3c>
 80099fe:	f100 0710 	add.w	r7, r0, #16
 8009a02:	4629      	mov	r1, r5
 8009a04:	42b1      	cmp	r1, r6
 8009a06:	d334      	bcc.n	8009a72 <rshift+0x96>
 8009a08:	1a9b      	subs	r3, r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	1eea      	subs	r2, r5, #3
 8009a0e:	4296      	cmp	r6, r2
 8009a10:	bf38      	it	cc
 8009a12:	2300      	movcc	r3, #0
 8009a14:	4423      	add	r3, r4
 8009a16:	e015      	b.n	8009a44 <rshift+0x68>
 8009a18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a1c:	f1c1 0820 	rsb	r8, r1, #32
 8009a20:	40cf      	lsrs	r7, r1
 8009a22:	f105 0e04 	add.w	lr, r5, #4
 8009a26:	46a1      	mov	r9, r4
 8009a28:	4576      	cmp	r6, lr
 8009a2a:	46f4      	mov	ip, lr
 8009a2c:	d815      	bhi.n	8009a5a <rshift+0x7e>
 8009a2e:	1a9a      	subs	r2, r3, r2
 8009a30:	0092      	lsls	r2, r2, #2
 8009a32:	3a04      	subs	r2, #4
 8009a34:	3501      	adds	r5, #1
 8009a36:	42ae      	cmp	r6, r5
 8009a38:	bf38      	it	cc
 8009a3a:	2200      	movcc	r2, #0
 8009a3c:	18a3      	adds	r3, r4, r2
 8009a3e:	50a7      	str	r7, [r4, r2]
 8009a40:	b107      	cbz	r7, 8009a44 <rshift+0x68>
 8009a42:	3304      	adds	r3, #4
 8009a44:	1b1a      	subs	r2, r3, r4
 8009a46:	42a3      	cmp	r3, r4
 8009a48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a4c:	bf08      	it	eq
 8009a4e:	2300      	moveq	r3, #0
 8009a50:	6102      	str	r2, [r0, #16]
 8009a52:	bf08      	it	eq
 8009a54:	6143      	streq	r3, [r0, #20]
 8009a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a5a:	f8dc c000 	ldr.w	ip, [ip]
 8009a5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a62:	ea4c 0707 	orr.w	r7, ip, r7
 8009a66:	f849 7b04 	str.w	r7, [r9], #4
 8009a6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a6e:	40cf      	lsrs	r7, r1
 8009a70:	e7da      	b.n	8009a28 <rshift+0x4c>
 8009a72:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a76:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a7a:	e7c3      	b.n	8009a04 <rshift+0x28>
 8009a7c:	4623      	mov	r3, r4
 8009a7e:	e7e1      	b.n	8009a44 <rshift+0x68>

08009a80 <__hexdig_fun>:
 8009a80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009a84:	2b09      	cmp	r3, #9
 8009a86:	d802      	bhi.n	8009a8e <__hexdig_fun+0xe>
 8009a88:	3820      	subs	r0, #32
 8009a8a:	b2c0      	uxtb	r0, r0
 8009a8c:	4770      	bx	lr
 8009a8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009a92:	2b05      	cmp	r3, #5
 8009a94:	d801      	bhi.n	8009a9a <__hexdig_fun+0x1a>
 8009a96:	3847      	subs	r0, #71	@ 0x47
 8009a98:	e7f7      	b.n	8009a8a <__hexdig_fun+0xa>
 8009a9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009a9e:	2b05      	cmp	r3, #5
 8009aa0:	d801      	bhi.n	8009aa6 <__hexdig_fun+0x26>
 8009aa2:	3827      	subs	r0, #39	@ 0x27
 8009aa4:	e7f1      	b.n	8009a8a <__hexdig_fun+0xa>
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	4770      	bx	lr
	...

08009aac <__gethex>:
 8009aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab0:	b085      	sub	sp, #20
 8009ab2:	468a      	mov	sl, r1
 8009ab4:	9302      	str	r3, [sp, #8]
 8009ab6:	680b      	ldr	r3, [r1, #0]
 8009ab8:	9001      	str	r0, [sp, #4]
 8009aba:	4690      	mov	r8, r2
 8009abc:	1c9c      	adds	r4, r3, #2
 8009abe:	46a1      	mov	r9, r4
 8009ac0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009ac4:	2830      	cmp	r0, #48	@ 0x30
 8009ac6:	d0fa      	beq.n	8009abe <__gethex+0x12>
 8009ac8:	eba9 0303 	sub.w	r3, r9, r3
 8009acc:	f1a3 0b02 	sub.w	fp, r3, #2
 8009ad0:	f7ff ffd6 	bl	8009a80 <__hexdig_fun>
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d168      	bne.n	8009bac <__gethex+0x100>
 8009ada:	49a0      	ldr	r1, [pc, #640]	@ (8009d5c <__gethex+0x2b0>)
 8009adc:	2201      	movs	r2, #1
 8009ade:	4648      	mov	r0, r9
 8009ae0:	f7ff ff12 	bl	8009908 <strncmp>
 8009ae4:	4607      	mov	r7, r0
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d167      	bne.n	8009bba <__gethex+0x10e>
 8009aea:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009aee:	4626      	mov	r6, r4
 8009af0:	f7ff ffc6 	bl	8009a80 <__hexdig_fun>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d062      	beq.n	8009bbe <__gethex+0x112>
 8009af8:	4623      	mov	r3, r4
 8009afa:	7818      	ldrb	r0, [r3, #0]
 8009afc:	2830      	cmp	r0, #48	@ 0x30
 8009afe:	4699      	mov	r9, r3
 8009b00:	f103 0301 	add.w	r3, r3, #1
 8009b04:	d0f9      	beq.n	8009afa <__gethex+0x4e>
 8009b06:	f7ff ffbb 	bl	8009a80 <__hexdig_fun>
 8009b0a:	fab0 f580 	clz	r5, r0
 8009b0e:	096d      	lsrs	r5, r5, #5
 8009b10:	f04f 0b01 	mov.w	fp, #1
 8009b14:	464a      	mov	r2, r9
 8009b16:	4616      	mov	r6, r2
 8009b18:	3201      	adds	r2, #1
 8009b1a:	7830      	ldrb	r0, [r6, #0]
 8009b1c:	f7ff ffb0 	bl	8009a80 <__hexdig_fun>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d1f8      	bne.n	8009b16 <__gethex+0x6a>
 8009b24:	498d      	ldr	r1, [pc, #564]	@ (8009d5c <__gethex+0x2b0>)
 8009b26:	2201      	movs	r2, #1
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f7ff feed 	bl	8009908 <strncmp>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d13f      	bne.n	8009bb2 <__gethex+0x106>
 8009b32:	b944      	cbnz	r4, 8009b46 <__gethex+0x9a>
 8009b34:	1c74      	adds	r4, r6, #1
 8009b36:	4622      	mov	r2, r4
 8009b38:	4616      	mov	r6, r2
 8009b3a:	3201      	adds	r2, #1
 8009b3c:	7830      	ldrb	r0, [r6, #0]
 8009b3e:	f7ff ff9f 	bl	8009a80 <__hexdig_fun>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d1f8      	bne.n	8009b38 <__gethex+0x8c>
 8009b46:	1ba4      	subs	r4, r4, r6
 8009b48:	00a7      	lsls	r7, r4, #2
 8009b4a:	7833      	ldrb	r3, [r6, #0]
 8009b4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009b50:	2b50      	cmp	r3, #80	@ 0x50
 8009b52:	d13e      	bne.n	8009bd2 <__gethex+0x126>
 8009b54:	7873      	ldrb	r3, [r6, #1]
 8009b56:	2b2b      	cmp	r3, #43	@ 0x2b
 8009b58:	d033      	beq.n	8009bc2 <__gethex+0x116>
 8009b5a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009b5c:	d034      	beq.n	8009bc8 <__gethex+0x11c>
 8009b5e:	1c71      	adds	r1, r6, #1
 8009b60:	2400      	movs	r4, #0
 8009b62:	7808      	ldrb	r0, [r1, #0]
 8009b64:	f7ff ff8c 	bl	8009a80 <__hexdig_fun>
 8009b68:	1e43      	subs	r3, r0, #1
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b18      	cmp	r3, #24
 8009b6e:	d830      	bhi.n	8009bd2 <__gethex+0x126>
 8009b70:	f1a0 0210 	sub.w	r2, r0, #16
 8009b74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b78:	f7ff ff82 	bl	8009a80 <__hexdig_fun>
 8009b7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009b80:	fa5f fc8c 	uxtb.w	ip, ip
 8009b84:	f1bc 0f18 	cmp.w	ip, #24
 8009b88:	f04f 030a 	mov.w	r3, #10
 8009b8c:	d91e      	bls.n	8009bcc <__gethex+0x120>
 8009b8e:	b104      	cbz	r4, 8009b92 <__gethex+0xe6>
 8009b90:	4252      	negs	r2, r2
 8009b92:	4417      	add	r7, r2
 8009b94:	f8ca 1000 	str.w	r1, [sl]
 8009b98:	b1ed      	cbz	r5, 8009bd6 <__gethex+0x12a>
 8009b9a:	f1bb 0f00 	cmp.w	fp, #0
 8009b9e:	bf0c      	ite	eq
 8009ba0:	2506      	moveq	r5, #6
 8009ba2:	2500      	movne	r5, #0
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	b005      	add	sp, #20
 8009ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bac:	2500      	movs	r5, #0
 8009bae:	462c      	mov	r4, r5
 8009bb0:	e7b0      	b.n	8009b14 <__gethex+0x68>
 8009bb2:	2c00      	cmp	r4, #0
 8009bb4:	d1c7      	bne.n	8009b46 <__gethex+0x9a>
 8009bb6:	4627      	mov	r7, r4
 8009bb8:	e7c7      	b.n	8009b4a <__gethex+0x9e>
 8009bba:	464e      	mov	r6, r9
 8009bbc:	462f      	mov	r7, r5
 8009bbe:	2501      	movs	r5, #1
 8009bc0:	e7c3      	b.n	8009b4a <__gethex+0x9e>
 8009bc2:	2400      	movs	r4, #0
 8009bc4:	1cb1      	adds	r1, r6, #2
 8009bc6:	e7cc      	b.n	8009b62 <__gethex+0xb6>
 8009bc8:	2401      	movs	r4, #1
 8009bca:	e7fb      	b.n	8009bc4 <__gethex+0x118>
 8009bcc:	fb03 0002 	mla	r0, r3, r2, r0
 8009bd0:	e7ce      	b.n	8009b70 <__gethex+0xc4>
 8009bd2:	4631      	mov	r1, r6
 8009bd4:	e7de      	b.n	8009b94 <__gethex+0xe8>
 8009bd6:	eba6 0309 	sub.w	r3, r6, r9
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	4629      	mov	r1, r5
 8009bde:	2b07      	cmp	r3, #7
 8009be0:	dc0a      	bgt.n	8009bf8 <__gethex+0x14c>
 8009be2:	9801      	ldr	r0, [sp, #4]
 8009be4:	f7fe f93c 	bl	8007e60 <_Balloc>
 8009be8:	4604      	mov	r4, r0
 8009bea:	b940      	cbnz	r0, 8009bfe <__gethex+0x152>
 8009bec:	4b5c      	ldr	r3, [pc, #368]	@ (8009d60 <__gethex+0x2b4>)
 8009bee:	4602      	mov	r2, r0
 8009bf0:	21e4      	movs	r1, #228	@ 0xe4
 8009bf2:	485c      	ldr	r0, [pc, #368]	@ (8009d64 <__gethex+0x2b8>)
 8009bf4:	f7ff fec0 	bl	8009978 <__assert_func>
 8009bf8:	3101      	adds	r1, #1
 8009bfa:	105b      	asrs	r3, r3, #1
 8009bfc:	e7ef      	b.n	8009bde <__gethex+0x132>
 8009bfe:	f100 0a14 	add.w	sl, r0, #20
 8009c02:	2300      	movs	r3, #0
 8009c04:	4655      	mov	r5, sl
 8009c06:	469b      	mov	fp, r3
 8009c08:	45b1      	cmp	r9, r6
 8009c0a:	d337      	bcc.n	8009c7c <__gethex+0x1d0>
 8009c0c:	f845 bb04 	str.w	fp, [r5], #4
 8009c10:	eba5 050a 	sub.w	r5, r5, sl
 8009c14:	10ad      	asrs	r5, r5, #2
 8009c16:	6125      	str	r5, [r4, #16]
 8009c18:	4658      	mov	r0, fp
 8009c1a:	f7fe fa13 	bl	8008044 <__hi0bits>
 8009c1e:	016d      	lsls	r5, r5, #5
 8009c20:	f8d8 6000 	ldr.w	r6, [r8]
 8009c24:	1a2d      	subs	r5, r5, r0
 8009c26:	42b5      	cmp	r5, r6
 8009c28:	dd54      	ble.n	8009cd4 <__gethex+0x228>
 8009c2a:	1bad      	subs	r5, r5, r6
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f7fe fda7 	bl	8008782 <__any_on>
 8009c34:	4681      	mov	r9, r0
 8009c36:	b178      	cbz	r0, 8009c58 <__gethex+0x1ac>
 8009c38:	1e6b      	subs	r3, r5, #1
 8009c3a:	1159      	asrs	r1, r3, #5
 8009c3c:	f003 021f 	and.w	r2, r3, #31
 8009c40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009c44:	f04f 0901 	mov.w	r9, #1
 8009c48:	fa09 f202 	lsl.w	r2, r9, r2
 8009c4c:	420a      	tst	r2, r1
 8009c4e:	d003      	beq.n	8009c58 <__gethex+0x1ac>
 8009c50:	454b      	cmp	r3, r9
 8009c52:	dc36      	bgt.n	8009cc2 <__gethex+0x216>
 8009c54:	f04f 0902 	mov.w	r9, #2
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f7ff febe 	bl	80099dc <rshift>
 8009c60:	442f      	add	r7, r5
 8009c62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c66:	42bb      	cmp	r3, r7
 8009c68:	da42      	bge.n	8009cf0 <__gethex+0x244>
 8009c6a:	9801      	ldr	r0, [sp, #4]
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	f7fe f937 	bl	8007ee0 <_Bfree>
 8009c72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c74:	2300      	movs	r3, #0
 8009c76:	6013      	str	r3, [r2, #0]
 8009c78:	25a3      	movs	r5, #163	@ 0xa3
 8009c7a:	e793      	b.n	8009ba4 <__gethex+0xf8>
 8009c7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009c80:	2a2e      	cmp	r2, #46	@ 0x2e
 8009c82:	d012      	beq.n	8009caa <__gethex+0x1fe>
 8009c84:	2b20      	cmp	r3, #32
 8009c86:	d104      	bne.n	8009c92 <__gethex+0x1e6>
 8009c88:	f845 bb04 	str.w	fp, [r5], #4
 8009c8c:	f04f 0b00 	mov.w	fp, #0
 8009c90:	465b      	mov	r3, fp
 8009c92:	7830      	ldrb	r0, [r6, #0]
 8009c94:	9303      	str	r3, [sp, #12]
 8009c96:	f7ff fef3 	bl	8009a80 <__hexdig_fun>
 8009c9a:	9b03      	ldr	r3, [sp, #12]
 8009c9c:	f000 000f 	and.w	r0, r0, #15
 8009ca0:	4098      	lsls	r0, r3
 8009ca2:	ea4b 0b00 	orr.w	fp, fp, r0
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	e7ae      	b.n	8009c08 <__gethex+0x15c>
 8009caa:	45b1      	cmp	r9, r6
 8009cac:	d8ea      	bhi.n	8009c84 <__gethex+0x1d8>
 8009cae:	492b      	ldr	r1, [pc, #172]	@ (8009d5c <__gethex+0x2b0>)
 8009cb0:	9303      	str	r3, [sp, #12]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f7ff fe27 	bl	8009908 <strncmp>
 8009cba:	9b03      	ldr	r3, [sp, #12]
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d1e1      	bne.n	8009c84 <__gethex+0x1d8>
 8009cc0:	e7a2      	b.n	8009c08 <__gethex+0x15c>
 8009cc2:	1ea9      	subs	r1, r5, #2
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f7fe fd5c 	bl	8008782 <__any_on>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d0c2      	beq.n	8009c54 <__gethex+0x1a8>
 8009cce:	f04f 0903 	mov.w	r9, #3
 8009cd2:	e7c1      	b.n	8009c58 <__gethex+0x1ac>
 8009cd4:	da09      	bge.n	8009cea <__gethex+0x23e>
 8009cd6:	1b75      	subs	r5, r6, r5
 8009cd8:	4621      	mov	r1, r4
 8009cda:	9801      	ldr	r0, [sp, #4]
 8009cdc:	462a      	mov	r2, r5
 8009cde:	f7fe fb17 	bl	8008310 <__lshift>
 8009ce2:	1b7f      	subs	r7, r7, r5
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	f100 0a14 	add.w	sl, r0, #20
 8009cea:	f04f 0900 	mov.w	r9, #0
 8009cee:	e7b8      	b.n	8009c62 <__gethex+0x1b6>
 8009cf0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009cf4:	42bd      	cmp	r5, r7
 8009cf6:	dd6f      	ble.n	8009dd8 <__gethex+0x32c>
 8009cf8:	1bed      	subs	r5, r5, r7
 8009cfa:	42ae      	cmp	r6, r5
 8009cfc:	dc34      	bgt.n	8009d68 <__gethex+0x2bc>
 8009cfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	d022      	beq.n	8009d4c <__gethex+0x2a0>
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d024      	beq.n	8009d54 <__gethex+0x2a8>
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d115      	bne.n	8009d3a <__gethex+0x28e>
 8009d0e:	42ae      	cmp	r6, r5
 8009d10:	d113      	bne.n	8009d3a <__gethex+0x28e>
 8009d12:	2e01      	cmp	r6, #1
 8009d14:	d10b      	bne.n	8009d2e <__gethex+0x282>
 8009d16:	9a02      	ldr	r2, [sp, #8]
 8009d18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d1c:	6013      	str	r3, [r2, #0]
 8009d1e:	2301      	movs	r3, #1
 8009d20:	6123      	str	r3, [r4, #16]
 8009d22:	f8ca 3000 	str.w	r3, [sl]
 8009d26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d28:	2562      	movs	r5, #98	@ 0x62
 8009d2a:	601c      	str	r4, [r3, #0]
 8009d2c:	e73a      	b.n	8009ba4 <__gethex+0xf8>
 8009d2e:	1e71      	subs	r1, r6, #1
 8009d30:	4620      	mov	r0, r4
 8009d32:	f7fe fd26 	bl	8008782 <__any_on>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d1ed      	bne.n	8009d16 <__gethex+0x26a>
 8009d3a:	9801      	ldr	r0, [sp, #4]
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	f7fe f8cf 	bl	8007ee0 <_Bfree>
 8009d42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d44:	2300      	movs	r3, #0
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	2550      	movs	r5, #80	@ 0x50
 8009d4a:	e72b      	b.n	8009ba4 <__gethex+0xf8>
 8009d4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1f3      	bne.n	8009d3a <__gethex+0x28e>
 8009d52:	e7e0      	b.n	8009d16 <__gethex+0x26a>
 8009d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1dd      	bne.n	8009d16 <__gethex+0x26a>
 8009d5a:	e7ee      	b.n	8009d3a <__gethex+0x28e>
 8009d5c:	0800acf8 	.word	0x0800acf8
 8009d60:	0800ab8d 	.word	0x0800ab8d
 8009d64:	0800aea6 	.word	0x0800aea6
 8009d68:	1e6f      	subs	r7, r5, #1
 8009d6a:	f1b9 0f00 	cmp.w	r9, #0
 8009d6e:	d130      	bne.n	8009dd2 <__gethex+0x326>
 8009d70:	b127      	cbz	r7, 8009d7c <__gethex+0x2d0>
 8009d72:	4639      	mov	r1, r7
 8009d74:	4620      	mov	r0, r4
 8009d76:	f7fe fd04 	bl	8008782 <__any_on>
 8009d7a:	4681      	mov	r9, r0
 8009d7c:	117a      	asrs	r2, r7, #5
 8009d7e:	2301      	movs	r3, #1
 8009d80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009d84:	f007 071f 	and.w	r7, r7, #31
 8009d88:	40bb      	lsls	r3, r7
 8009d8a:	4213      	tst	r3, r2
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	4620      	mov	r0, r4
 8009d90:	bf18      	it	ne
 8009d92:	f049 0902 	orrne.w	r9, r9, #2
 8009d96:	f7ff fe21 	bl	80099dc <rshift>
 8009d9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009d9e:	1b76      	subs	r6, r6, r5
 8009da0:	2502      	movs	r5, #2
 8009da2:	f1b9 0f00 	cmp.w	r9, #0
 8009da6:	d047      	beq.n	8009e38 <__gethex+0x38c>
 8009da8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d015      	beq.n	8009ddc <__gethex+0x330>
 8009db0:	2b03      	cmp	r3, #3
 8009db2:	d017      	beq.n	8009de4 <__gethex+0x338>
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d109      	bne.n	8009dcc <__gethex+0x320>
 8009db8:	f019 0f02 	tst.w	r9, #2
 8009dbc:	d006      	beq.n	8009dcc <__gethex+0x320>
 8009dbe:	f8da 3000 	ldr.w	r3, [sl]
 8009dc2:	ea49 0903 	orr.w	r9, r9, r3
 8009dc6:	f019 0f01 	tst.w	r9, #1
 8009dca:	d10e      	bne.n	8009dea <__gethex+0x33e>
 8009dcc:	f045 0510 	orr.w	r5, r5, #16
 8009dd0:	e032      	b.n	8009e38 <__gethex+0x38c>
 8009dd2:	f04f 0901 	mov.w	r9, #1
 8009dd6:	e7d1      	b.n	8009d7c <__gethex+0x2d0>
 8009dd8:	2501      	movs	r5, #1
 8009dda:	e7e2      	b.n	8009da2 <__gethex+0x2f6>
 8009ddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dde:	f1c3 0301 	rsb	r3, r3, #1
 8009de2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009de4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0f0      	beq.n	8009dcc <__gethex+0x320>
 8009dea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009dee:	f104 0314 	add.w	r3, r4, #20
 8009df2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009df6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009dfa:	f04f 0c00 	mov.w	ip, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e04:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e08:	d01b      	beq.n	8009e42 <__gethex+0x396>
 8009e0a:	3201      	adds	r2, #1
 8009e0c:	6002      	str	r2, [r0, #0]
 8009e0e:	2d02      	cmp	r5, #2
 8009e10:	f104 0314 	add.w	r3, r4, #20
 8009e14:	d13c      	bne.n	8009e90 <__gethex+0x3e4>
 8009e16:	f8d8 2000 	ldr.w	r2, [r8]
 8009e1a:	3a01      	subs	r2, #1
 8009e1c:	42b2      	cmp	r2, r6
 8009e1e:	d109      	bne.n	8009e34 <__gethex+0x388>
 8009e20:	1171      	asrs	r1, r6, #5
 8009e22:	2201      	movs	r2, #1
 8009e24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e28:	f006 061f 	and.w	r6, r6, #31
 8009e2c:	fa02 f606 	lsl.w	r6, r2, r6
 8009e30:	421e      	tst	r6, r3
 8009e32:	d13a      	bne.n	8009eaa <__gethex+0x3fe>
 8009e34:	f045 0520 	orr.w	r5, r5, #32
 8009e38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e3a:	601c      	str	r4, [r3, #0]
 8009e3c:	9b02      	ldr	r3, [sp, #8]
 8009e3e:	601f      	str	r7, [r3, #0]
 8009e40:	e6b0      	b.n	8009ba4 <__gethex+0xf8>
 8009e42:	4299      	cmp	r1, r3
 8009e44:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e48:	d8d9      	bhi.n	8009dfe <__gethex+0x352>
 8009e4a:	68a3      	ldr	r3, [r4, #8]
 8009e4c:	459b      	cmp	fp, r3
 8009e4e:	db17      	blt.n	8009e80 <__gethex+0x3d4>
 8009e50:	6861      	ldr	r1, [r4, #4]
 8009e52:	9801      	ldr	r0, [sp, #4]
 8009e54:	3101      	adds	r1, #1
 8009e56:	f7fe f803 	bl	8007e60 <_Balloc>
 8009e5a:	4681      	mov	r9, r0
 8009e5c:	b918      	cbnz	r0, 8009e66 <__gethex+0x3ba>
 8009e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ec8 <__gethex+0x41c>)
 8009e60:	4602      	mov	r2, r0
 8009e62:	2184      	movs	r1, #132	@ 0x84
 8009e64:	e6c5      	b.n	8009bf2 <__gethex+0x146>
 8009e66:	6922      	ldr	r2, [r4, #16]
 8009e68:	3202      	adds	r2, #2
 8009e6a:	f104 010c 	add.w	r1, r4, #12
 8009e6e:	0092      	lsls	r2, r2, #2
 8009e70:	300c      	adds	r0, #12
 8009e72:	f7ff fd6b 	bl	800994c <memcpy>
 8009e76:	4621      	mov	r1, r4
 8009e78:	9801      	ldr	r0, [sp, #4]
 8009e7a:	f7fe f831 	bl	8007ee0 <_Bfree>
 8009e7e:	464c      	mov	r4, r9
 8009e80:	6923      	ldr	r3, [r4, #16]
 8009e82:	1c5a      	adds	r2, r3, #1
 8009e84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e88:	6122      	str	r2, [r4, #16]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	615a      	str	r2, [r3, #20]
 8009e8e:	e7be      	b.n	8009e0e <__gethex+0x362>
 8009e90:	6922      	ldr	r2, [r4, #16]
 8009e92:	455a      	cmp	r2, fp
 8009e94:	dd0b      	ble.n	8009eae <__gethex+0x402>
 8009e96:	2101      	movs	r1, #1
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f7ff fd9f 	bl	80099dc <rshift>
 8009e9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ea2:	3701      	adds	r7, #1
 8009ea4:	42bb      	cmp	r3, r7
 8009ea6:	f6ff aee0 	blt.w	8009c6a <__gethex+0x1be>
 8009eaa:	2501      	movs	r5, #1
 8009eac:	e7c2      	b.n	8009e34 <__gethex+0x388>
 8009eae:	f016 061f 	ands.w	r6, r6, #31
 8009eb2:	d0fa      	beq.n	8009eaa <__gethex+0x3fe>
 8009eb4:	4453      	add	r3, sl
 8009eb6:	f1c6 0620 	rsb	r6, r6, #32
 8009eba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009ebe:	f7fe f8c1 	bl	8008044 <__hi0bits>
 8009ec2:	42b0      	cmp	r0, r6
 8009ec4:	dbe7      	blt.n	8009e96 <__gethex+0x3ea>
 8009ec6:	e7f0      	b.n	8009eaa <__gethex+0x3fe>
 8009ec8:	0800ab8d 	.word	0x0800ab8d

08009ecc <L_shift>:
 8009ecc:	f1c2 0208 	rsb	r2, r2, #8
 8009ed0:	0092      	lsls	r2, r2, #2
 8009ed2:	b570      	push	{r4, r5, r6, lr}
 8009ed4:	f1c2 0620 	rsb	r6, r2, #32
 8009ed8:	6843      	ldr	r3, [r0, #4]
 8009eda:	6804      	ldr	r4, [r0, #0]
 8009edc:	fa03 f506 	lsl.w	r5, r3, r6
 8009ee0:	432c      	orrs	r4, r5
 8009ee2:	40d3      	lsrs	r3, r2
 8009ee4:	6004      	str	r4, [r0, #0]
 8009ee6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009eea:	4288      	cmp	r0, r1
 8009eec:	d3f4      	bcc.n	8009ed8 <L_shift+0xc>
 8009eee:	bd70      	pop	{r4, r5, r6, pc}

08009ef0 <__match>:
 8009ef0:	b530      	push	{r4, r5, lr}
 8009ef2:	6803      	ldr	r3, [r0, #0]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009efa:	b914      	cbnz	r4, 8009f02 <__match+0x12>
 8009efc:	6003      	str	r3, [r0, #0]
 8009efe:	2001      	movs	r0, #1
 8009f00:	bd30      	pop	{r4, r5, pc}
 8009f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009f0a:	2d19      	cmp	r5, #25
 8009f0c:	bf98      	it	ls
 8009f0e:	3220      	addls	r2, #32
 8009f10:	42a2      	cmp	r2, r4
 8009f12:	d0f0      	beq.n	8009ef6 <__match+0x6>
 8009f14:	2000      	movs	r0, #0
 8009f16:	e7f3      	b.n	8009f00 <__match+0x10>

08009f18 <__hexnan>:
 8009f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1c:	680b      	ldr	r3, [r1, #0]
 8009f1e:	6801      	ldr	r1, [r0, #0]
 8009f20:	115e      	asrs	r6, r3, #5
 8009f22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f26:	f013 031f 	ands.w	r3, r3, #31
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	bf18      	it	ne
 8009f2e:	3604      	addne	r6, #4
 8009f30:	2500      	movs	r5, #0
 8009f32:	1f37      	subs	r7, r6, #4
 8009f34:	4682      	mov	sl, r0
 8009f36:	4690      	mov	r8, r2
 8009f38:	9301      	str	r3, [sp, #4]
 8009f3a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f3e:	46b9      	mov	r9, r7
 8009f40:	463c      	mov	r4, r7
 8009f42:	9502      	str	r5, [sp, #8]
 8009f44:	46ab      	mov	fp, r5
 8009f46:	784a      	ldrb	r2, [r1, #1]
 8009f48:	1c4b      	adds	r3, r1, #1
 8009f4a:	9303      	str	r3, [sp, #12]
 8009f4c:	b342      	cbz	r2, 8009fa0 <__hexnan+0x88>
 8009f4e:	4610      	mov	r0, r2
 8009f50:	9105      	str	r1, [sp, #20]
 8009f52:	9204      	str	r2, [sp, #16]
 8009f54:	f7ff fd94 	bl	8009a80 <__hexdig_fun>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d151      	bne.n	800a000 <__hexnan+0xe8>
 8009f5c:	9a04      	ldr	r2, [sp, #16]
 8009f5e:	9905      	ldr	r1, [sp, #20]
 8009f60:	2a20      	cmp	r2, #32
 8009f62:	d818      	bhi.n	8009f96 <__hexnan+0x7e>
 8009f64:	9b02      	ldr	r3, [sp, #8]
 8009f66:	459b      	cmp	fp, r3
 8009f68:	dd13      	ble.n	8009f92 <__hexnan+0x7a>
 8009f6a:	454c      	cmp	r4, r9
 8009f6c:	d206      	bcs.n	8009f7c <__hexnan+0x64>
 8009f6e:	2d07      	cmp	r5, #7
 8009f70:	dc04      	bgt.n	8009f7c <__hexnan+0x64>
 8009f72:	462a      	mov	r2, r5
 8009f74:	4649      	mov	r1, r9
 8009f76:	4620      	mov	r0, r4
 8009f78:	f7ff ffa8 	bl	8009ecc <L_shift>
 8009f7c:	4544      	cmp	r4, r8
 8009f7e:	d952      	bls.n	800a026 <__hexnan+0x10e>
 8009f80:	2300      	movs	r3, #0
 8009f82:	f1a4 0904 	sub.w	r9, r4, #4
 8009f86:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f8a:	f8cd b008 	str.w	fp, [sp, #8]
 8009f8e:	464c      	mov	r4, r9
 8009f90:	461d      	mov	r5, r3
 8009f92:	9903      	ldr	r1, [sp, #12]
 8009f94:	e7d7      	b.n	8009f46 <__hexnan+0x2e>
 8009f96:	2a29      	cmp	r2, #41	@ 0x29
 8009f98:	d157      	bne.n	800a04a <__hexnan+0x132>
 8009f9a:	3102      	adds	r1, #2
 8009f9c:	f8ca 1000 	str.w	r1, [sl]
 8009fa0:	f1bb 0f00 	cmp.w	fp, #0
 8009fa4:	d051      	beq.n	800a04a <__hexnan+0x132>
 8009fa6:	454c      	cmp	r4, r9
 8009fa8:	d206      	bcs.n	8009fb8 <__hexnan+0xa0>
 8009faa:	2d07      	cmp	r5, #7
 8009fac:	dc04      	bgt.n	8009fb8 <__hexnan+0xa0>
 8009fae:	462a      	mov	r2, r5
 8009fb0:	4649      	mov	r1, r9
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f7ff ff8a 	bl	8009ecc <L_shift>
 8009fb8:	4544      	cmp	r4, r8
 8009fba:	d936      	bls.n	800a02a <__hexnan+0x112>
 8009fbc:	f1a8 0204 	sub.w	r2, r8, #4
 8009fc0:	4623      	mov	r3, r4
 8009fc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009fc6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009fca:	429f      	cmp	r7, r3
 8009fcc:	d2f9      	bcs.n	8009fc2 <__hexnan+0xaa>
 8009fce:	1b3b      	subs	r3, r7, r4
 8009fd0:	f023 0303 	bic.w	r3, r3, #3
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	3401      	adds	r4, #1
 8009fd8:	3e03      	subs	r6, #3
 8009fda:	42b4      	cmp	r4, r6
 8009fdc:	bf88      	it	hi
 8009fde:	2304      	movhi	r3, #4
 8009fe0:	4443      	add	r3, r8
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f843 2b04 	str.w	r2, [r3], #4
 8009fe8:	429f      	cmp	r7, r3
 8009fea:	d2fb      	bcs.n	8009fe4 <__hexnan+0xcc>
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	b91b      	cbnz	r3, 8009ff8 <__hexnan+0xe0>
 8009ff0:	4547      	cmp	r7, r8
 8009ff2:	d128      	bne.n	800a046 <__hexnan+0x12e>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	603b      	str	r3, [r7, #0]
 8009ff8:	2005      	movs	r0, #5
 8009ffa:	b007      	add	sp, #28
 8009ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a000:	3501      	adds	r5, #1
 800a002:	2d08      	cmp	r5, #8
 800a004:	f10b 0b01 	add.w	fp, fp, #1
 800a008:	dd06      	ble.n	800a018 <__hexnan+0x100>
 800a00a:	4544      	cmp	r4, r8
 800a00c:	d9c1      	bls.n	8009f92 <__hexnan+0x7a>
 800a00e:	2300      	movs	r3, #0
 800a010:	f844 3c04 	str.w	r3, [r4, #-4]
 800a014:	2501      	movs	r5, #1
 800a016:	3c04      	subs	r4, #4
 800a018:	6822      	ldr	r2, [r4, #0]
 800a01a:	f000 000f 	and.w	r0, r0, #15
 800a01e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a022:	6020      	str	r0, [r4, #0]
 800a024:	e7b5      	b.n	8009f92 <__hexnan+0x7a>
 800a026:	2508      	movs	r5, #8
 800a028:	e7b3      	b.n	8009f92 <__hexnan+0x7a>
 800a02a:	9b01      	ldr	r3, [sp, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d0dd      	beq.n	8009fec <__hexnan+0xd4>
 800a030:	f1c3 0320 	rsb	r3, r3, #32
 800a034:	f04f 32ff 	mov.w	r2, #4294967295
 800a038:	40da      	lsrs	r2, r3
 800a03a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a03e:	4013      	ands	r3, r2
 800a040:	f846 3c04 	str.w	r3, [r6, #-4]
 800a044:	e7d2      	b.n	8009fec <__hexnan+0xd4>
 800a046:	3f04      	subs	r7, #4
 800a048:	e7d0      	b.n	8009fec <__hexnan+0xd4>
 800a04a:	2004      	movs	r0, #4
 800a04c:	e7d5      	b.n	8009ffa <__hexnan+0xe2>

0800a04e <__ascii_mbtowc>:
 800a04e:	b082      	sub	sp, #8
 800a050:	b901      	cbnz	r1, 800a054 <__ascii_mbtowc+0x6>
 800a052:	a901      	add	r1, sp, #4
 800a054:	b142      	cbz	r2, 800a068 <__ascii_mbtowc+0x1a>
 800a056:	b14b      	cbz	r3, 800a06c <__ascii_mbtowc+0x1e>
 800a058:	7813      	ldrb	r3, [r2, #0]
 800a05a:	600b      	str	r3, [r1, #0]
 800a05c:	7812      	ldrb	r2, [r2, #0]
 800a05e:	1e10      	subs	r0, r2, #0
 800a060:	bf18      	it	ne
 800a062:	2001      	movne	r0, #1
 800a064:	b002      	add	sp, #8
 800a066:	4770      	bx	lr
 800a068:	4610      	mov	r0, r2
 800a06a:	e7fb      	b.n	800a064 <__ascii_mbtowc+0x16>
 800a06c:	f06f 0001 	mvn.w	r0, #1
 800a070:	e7f8      	b.n	800a064 <__ascii_mbtowc+0x16>

0800a072 <_realloc_r>:
 800a072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a076:	4680      	mov	r8, r0
 800a078:	4615      	mov	r5, r2
 800a07a:	460c      	mov	r4, r1
 800a07c:	b921      	cbnz	r1, 800a088 <_realloc_r+0x16>
 800a07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a082:	4611      	mov	r1, r2
 800a084:	f7fd be60 	b.w	8007d48 <_malloc_r>
 800a088:	b92a      	cbnz	r2, 800a096 <_realloc_r+0x24>
 800a08a:	f7fd fde9 	bl	8007c60 <_free_r>
 800a08e:	2400      	movs	r4, #0
 800a090:	4620      	mov	r0, r4
 800a092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a096:	f000 f840 	bl	800a11a <_malloc_usable_size_r>
 800a09a:	4285      	cmp	r5, r0
 800a09c:	4606      	mov	r6, r0
 800a09e:	d802      	bhi.n	800a0a6 <_realloc_r+0x34>
 800a0a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a0a4:	d8f4      	bhi.n	800a090 <_realloc_r+0x1e>
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	4640      	mov	r0, r8
 800a0aa:	f7fd fe4d 	bl	8007d48 <_malloc_r>
 800a0ae:	4607      	mov	r7, r0
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d0ec      	beq.n	800a08e <_realloc_r+0x1c>
 800a0b4:	42b5      	cmp	r5, r6
 800a0b6:	462a      	mov	r2, r5
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	bf28      	it	cs
 800a0bc:	4632      	movcs	r2, r6
 800a0be:	f7ff fc45 	bl	800994c <memcpy>
 800a0c2:	4621      	mov	r1, r4
 800a0c4:	4640      	mov	r0, r8
 800a0c6:	f7fd fdcb 	bl	8007c60 <_free_r>
 800a0ca:	463c      	mov	r4, r7
 800a0cc:	e7e0      	b.n	800a090 <_realloc_r+0x1e>

0800a0ce <__ascii_wctomb>:
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	b141      	cbz	r1, 800a0e6 <__ascii_wctomb+0x18>
 800a0d4:	2aff      	cmp	r2, #255	@ 0xff
 800a0d6:	d904      	bls.n	800a0e2 <__ascii_wctomb+0x14>
 800a0d8:	228a      	movs	r2, #138	@ 0x8a
 800a0da:	601a      	str	r2, [r3, #0]
 800a0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e0:	4770      	bx	lr
 800a0e2:	700a      	strb	r2, [r1, #0]
 800a0e4:	2001      	movs	r0, #1
 800a0e6:	4770      	bx	lr

0800a0e8 <fiprintf>:
 800a0e8:	b40e      	push	{r1, r2, r3}
 800a0ea:	b503      	push	{r0, r1, lr}
 800a0ec:	4601      	mov	r1, r0
 800a0ee:	ab03      	add	r3, sp, #12
 800a0f0:	4805      	ldr	r0, [pc, #20]	@ (800a108 <fiprintf+0x20>)
 800a0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0f6:	6800      	ldr	r0, [r0, #0]
 800a0f8:	9301      	str	r3, [sp, #4]
 800a0fa:	f000 f83f 	bl	800a17c <_vfiprintf_r>
 800a0fe:	b002      	add	sp, #8
 800a100:	f85d eb04 	ldr.w	lr, [sp], #4
 800a104:	b003      	add	sp, #12
 800a106:	4770      	bx	lr
 800a108:	20000028 	.word	0x20000028

0800a10c <abort>:
 800a10c:	b508      	push	{r3, lr}
 800a10e:	2006      	movs	r0, #6
 800a110:	f000 fa08 	bl	800a524 <raise>
 800a114:	2001      	movs	r0, #1
 800a116:	f7f8 f879 	bl	800220c <_exit>

0800a11a <_malloc_usable_size_r>:
 800a11a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a11e:	1f18      	subs	r0, r3, #4
 800a120:	2b00      	cmp	r3, #0
 800a122:	bfbc      	itt	lt
 800a124:	580b      	ldrlt	r3, [r1, r0]
 800a126:	18c0      	addlt	r0, r0, r3
 800a128:	4770      	bx	lr

0800a12a <__sfputc_r>:
 800a12a:	6893      	ldr	r3, [r2, #8]
 800a12c:	3b01      	subs	r3, #1
 800a12e:	2b00      	cmp	r3, #0
 800a130:	b410      	push	{r4}
 800a132:	6093      	str	r3, [r2, #8]
 800a134:	da08      	bge.n	800a148 <__sfputc_r+0x1e>
 800a136:	6994      	ldr	r4, [r2, #24]
 800a138:	42a3      	cmp	r3, r4
 800a13a:	db01      	blt.n	800a140 <__sfputc_r+0x16>
 800a13c:	290a      	cmp	r1, #10
 800a13e:	d103      	bne.n	800a148 <__sfputc_r+0x1e>
 800a140:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a144:	f000 b932 	b.w	800a3ac <__swbuf_r>
 800a148:	6813      	ldr	r3, [r2, #0]
 800a14a:	1c58      	adds	r0, r3, #1
 800a14c:	6010      	str	r0, [r2, #0]
 800a14e:	7019      	strb	r1, [r3, #0]
 800a150:	4608      	mov	r0, r1
 800a152:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <__sfputs_r>:
 800a158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15a:	4606      	mov	r6, r0
 800a15c:	460f      	mov	r7, r1
 800a15e:	4614      	mov	r4, r2
 800a160:	18d5      	adds	r5, r2, r3
 800a162:	42ac      	cmp	r4, r5
 800a164:	d101      	bne.n	800a16a <__sfputs_r+0x12>
 800a166:	2000      	movs	r0, #0
 800a168:	e007      	b.n	800a17a <__sfputs_r+0x22>
 800a16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a16e:	463a      	mov	r2, r7
 800a170:	4630      	mov	r0, r6
 800a172:	f7ff ffda 	bl	800a12a <__sfputc_r>
 800a176:	1c43      	adds	r3, r0, #1
 800a178:	d1f3      	bne.n	800a162 <__sfputs_r+0xa>
 800a17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a17c <_vfiprintf_r>:
 800a17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a180:	460d      	mov	r5, r1
 800a182:	b09d      	sub	sp, #116	@ 0x74
 800a184:	4614      	mov	r4, r2
 800a186:	4698      	mov	r8, r3
 800a188:	4606      	mov	r6, r0
 800a18a:	b118      	cbz	r0, 800a194 <_vfiprintf_r+0x18>
 800a18c:	6a03      	ldr	r3, [r0, #32]
 800a18e:	b90b      	cbnz	r3, 800a194 <_vfiprintf_r+0x18>
 800a190:	f7fc fdf8 	bl	8006d84 <__sinit>
 800a194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a196:	07d9      	lsls	r1, r3, #31
 800a198:	d405      	bmi.n	800a1a6 <_vfiprintf_r+0x2a>
 800a19a:	89ab      	ldrh	r3, [r5, #12]
 800a19c:	059a      	lsls	r2, r3, #22
 800a19e:	d402      	bmi.n	800a1a6 <_vfiprintf_r+0x2a>
 800a1a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1a2:	f7fc ff06 	bl	8006fb2 <__retarget_lock_acquire_recursive>
 800a1a6:	89ab      	ldrh	r3, [r5, #12]
 800a1a8:	071b      	lsls	r3, r3, #28
 800a1aa:	d501      	bpl.n	800a1b0 <_vfiprintf_r+0x34>
 800a1ac:	692b      	ldr	r3, [r5, #16]
 800a1ae:	b99b      	cbnz	r3, 800a1d8 <_vfiprintf_r+0x5c>
 800a1b0:	4629      	mov	r1, r5
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f000 f938 	bl	800a428 <__swsetup_r>
 800a1b8:	b170      	cbz	r0, 800a1d8 <_vfiprintf_r+0x5c>
 800a1ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1bc:	07dc      	lsls	r4, r3, #31
 800a1be:	d504      	bpl.n	800a1ca <_vfiprintf_r+0x4e>
 800a1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c4:	b01d      	add	sp, #116	@ 0x74
 800a1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ca:	89ab      	ldrh	r3, [r5, #12]
 800a1cc:	0598      	lsls	r0, r3, #22
 800a1ce:	d4f7      	bmi.n	800a1c0 <_vfiprintf_r+0x44>
 800a1d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1d2:	f7fc feef 	bl	8006fb4 <__retarget_lock_release_recursive>
 800a1d6:	e7f3      	b.n	800a1c0 <_vfiprintf_r+0x44>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1dc:	2320      	movs	r3, #32
 800a1de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1e6:	2330      	movs	r3, #48	@ 0x30
 800a1e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a398 <_vfiprintf_r+0x21c>
 800a1ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1f0:	f04f 0901 	mov.w	r9, #1
 800a1f4:	4623      	mov	r3, r4
 800a1f6:	469a      	mov	sl, r3
 800a1f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1fc:	b10a      	cbz	r2, 800a202 <_vfiprintf_r+0x86>
 800a1fe:	2a25      	cmp	r2, #37	@ 0x25
 800a200:	d1f9      	bne.n	800a1f6 <_vfiprintf_r+0x7a>
 800a202:	ebba 0b04 	subs.w	fp, sl, r4
 800a206:	d00b      	beq.n	800a220 <_vfiprintf_r+0xa4>
 800a208:	465b      	mov	r3, fp
 800a20a:	4622      	mov	r2, r4
 800a20c:	4629      	mov	r1, r5
 800a20e:	4630      	mov	r0, r6
 800a210:	f7ff ffa2 	bl	800a158 <__sfputs_r>
 800a214:	3001      	adds	r0, #1
 800a216:	f000 80a7 	beq.w	800a368 <_vfiprintf_r+0x1ec>
 800a21a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a21c:	445a      	add	r2, fp
 800a21e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a220:	f89a 3000 	ldrb.w	r3, [sl]
 800a224:	2b00      	cmp	r3, #0
 800a226:	f000 809f 	beq.w	800a368 <_vfiprintf_r+0x1ec>
 800a22a:	2300      	movs	r3, #0
 800a22c:	f04f 32ff 	mov.w	r2, #4294967295
 800a230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a234:	f10a 0a01 	add.w	sl, sl, #1
 800a238:	9304      	str	r3, [sp, #16]
 800a23a:	9307      	str	r3, [sp, #28]
 800a23c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a240:	931a      	str	r3, [sp, #104]	@ 0x68
 800a242:	4654      	mov	r4, sl
 800a244:	2205      	movs	r2, #5
 800a246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a24a:	4853      	ldr	r0, [pc, #332]	@ (800a398 <_vfiprintf_r+0x21c>)
 800a24c:	f7f5 ffd8 	bl	8000200 <memchr>
 800a250:	9a04      	ldr	r2, [sp, #16]
 800a252:	b9d8      	cbnz	r0, 800a28c <_vfiprintf_r+0x110>
 800a254:	06d1      	lsls	r1, r2, #27
 800a256:	bf44      	itt	mi
 800a258:	2320      	movmi	r3, #32
 800a25a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a25e:	0713      	lsls	r3, r2, #28
 800a260:	bf44      	itt	mi
 800a262:	232b      	movmi	r3, #43	@ 0x2b
 800a264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a268:	f89a 3000 	ldrb.w	r3, [sl]
 800a26c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a26e:	d015      	beq.n	800a29c <_vfiprintf_r+0x120>
 800a270:	9a07      	ldr	r2, [sp, #28]
 800a272:	4654      	mov	r4, sl
 800a274:	2000      	movs	r0, #0
 800a276:	f04f 0c0a 	mov.w	ip, #10
 800a27a:	4621      	mov	r1, r4
 800a27c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a280:	3b30      	subs	r3, #48	@ 0x30
 800a282:	2b09      	cmp	r3, #9
 800a284:	d94b      	bls.n	800a31e <_vfiprintf_r+0x1a2>
 800a286:	b1b0      	cbz	r0, 800a2b6 <_vfiprintf_r+0x13a>
 800a288:	9207      	str	r2, [sp, #28]
 800a28a:	e014      	b.n	800a2b6 <_vfiprintf_r+0x13a>
 800a28c:	eba0 0308 	sub.w	r3, r0, r8
 800a290:	fa09 f303 	lsl.w	r3, r9, r3
 800a294:	4313      	orrs	r3, r2
 800a296:	9304      	str	r3, [sp, #16]
 800a298:	46a2      	mov	sl, r4
 800a29a:	e7d2      	b.n	800a242 <_vfiprintf_r+0xc6>
 800a29c:	9b03      	ldr	r3, [sp, #12]
 800a29e:	1d19      	adds	r1, r3, #4
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	9103      	str	r1, [sp, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	bfbb      	ittet	lt
 800a2a8:	425b      	neglt	r3, r3
 800a2aa:	f042 0202 	orrlt.w	r2, r2, #2
 800a2ae:	9307      	strge	r3, [sp, #28]
 800a2b0:	9307      	strlt	r3, [sp, #28]
 800a2b2:	bfb8      	it	lt
 800a2b4:	9204      	strlt	r2, [sp, #16]
 800a2b6:	7823      	ldrb	r3, [r4, #0]
 800a2b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2ba:	d10a      	bne.n	800a2d2 <_vfiprintf_r+0x156>
 800a2bc:	7863      	ldrb	r3, [r4, #1]
 800a2be:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2c0:	d132      	bne.n	800a328 <_vfiprintf_r+0x1ac>
 800a2c2:	9b03      	ldr	r3, [sp, #12]
 800a2c4:	1d1a      	adds	r2, r3, #4
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	9203      	str	r2, [sp, #12]
 800a2ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2ce:	3402      	adds	r4, #2
 800a2d0:	9305      	str	r3, [sp, #20]
 800a2d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a3a8 <_vfiprintf_r+0x22c>
 800a2d6:	7821      	ldrb	r1, [r4, #0]
 800a2d8:	2203      	movs	r2, #3
 800a2da:	4650      	mov	r0, sl
 800a2dc:	f7f5 ff90 	bl	8000200 <memchr>
 800a2e0:	b138      	cbz	r0, 800a2f2 <_vfiprintf_r+0x176>
 800a2e2:	9b04      	ldr	r3, [sp, #16]
 800a2e4:	eba0 000a 	sub.w	r0, r0, sl
 800a2e8:	2240      	movs	r2, #64	@ 0x40
 800a2ea:	4082      	lsls	r2, r0
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	3401      	adds	r4, #1
 800a2f0:	9304      	str	r3, [sp, #16]
 800a2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f6:	4829      	ldr	r0, [pc, #164]	@ (800a39c <_vfiprintf_r+0x220>)
 800a2f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2fc:	2206      	movs	r2, #6
 800a2fe:	f7f5 ff7f 	bl	8000200 <memchr>
 800a302:	2800      	cmp	r0, #0
 800a304:	d03f      	beq.n	800a386 <_vfiprintf_r+0x20a>
 800a306:	4b26      	ldr	r3, [pc, #152]	@ (800a3a0 <_vfiprintf_r+0x224>)
 800a308:	bb1b      	cbnz	r3, 800a352 <_vfiprintf_r+0x1d6>
 800a30a:	9b03      	ldr	r3, [sp, #12]
 800a30c:	3307      	adds	r3, #7
 800a30e:	f023 0307 	bic.w	r3, r3, #7
 800a312:	3308      	adds	r3, #8
 800a314:	9303      	str	r3, [sp, #12]
 800a316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a318:	443b      	add	r3, r7
 800a31a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a31c:	e76a      	b.n	800a1f4 <_vfiprintf_r+0x78>
 800a31e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a322:	460c      	mov	r4, r1
 800a324:	2001      	movs	r0, #1
 800a326:	e7a8      	b.n	800a27a <_vfiprintf_r+0xfe>
 800a328:	2300      	movs	r3, #0
 800a32a:	3401      	adds	r4, #1
 800a32c:	9305      	str	r3, [sp, #20]
 800a32e:	4619      	mov	r1, r3
 800a330:	f04f 0c0a 	mov.w	ip, #10
 800a334:	4620      	mov	r0, r4
 800a336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a33a:	3a30      	subs	r2, #48	@ 0x30
 800a33c:	2a09      	cmp	r2, #9
 800a33e:	d903      	bls.n	800a348 <_vfiprintf_r+0x1cc>
 800a340:	2b00      	cmp	r3, #0
 800a342:	d0c6      	beq.n	800a2d2 <_vfiprintf_r+0x156>
 800a344:	9105      	str	r1, [sp, #20]
 800a346:	e7c4      	b.n	800a2d2 <_vfiprintf_r+0x156>
 800a348:	fb0c 2101 	mla	r1, ip, r1, r2
 800a34c:	4604      	mov	r4, r0
 800a34e:	2301      	movs	r3, #1
 800a350:	e7f0      	b.n	800a334 <_vfiprintf_r+0x1b8>
 800a352:	ab03      	add	r3, sp, #12
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	462a      	mov	r2, r5
 800a358:	4b12      	ldr	r3, [pc, #72]	@ (800a3a4 <_vfiprintf_r+0x228>)
 800a35a:	a904      	add	r1, sp, #16
 800a35c:	4630      	mov	r0, r6
 800a35e:	f7fb feb9 	bl	80060d4 <_printf_float>
 800a362:	4607      	mov	r7, r0
 800a364:	1c78      	adds	r0, r7, #1
 800a366:	d1d6      	bne.n	800a316 <_vfiprintf_r+0x19a>
 800a368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a36a:	07d9      	lsls	r1, r3, #31
 800a36c:	d405      	bmi.n	800a37a <_vfiprintf_r+0x1fe>
 800a36e:	89ab      	ldrh	r3, [r5, #12]
 800a370:	059a      	lsls	r2, r3, #22
 800a372:	d402      	bmi.n	800a37a <_vfiprintf_r+0x1fe>
 800a374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a376:	f7fc fe1d 	bl	8006fb4 <__retarget_lock_release_recursive>
 800a37a:	89ab      	ldrh	r3, [r5, #12]
 800a37c:	065b      	lsls	r3, r3, #25
 800a37e:	f53f af1f 	bmi.w	800a1c0 <_vfiprintf_r+0x44>
 800a382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a384:	e71e      	b.n	800a1c4 <_vfiprintf_r+0x48>
 800a386:	ab03      	add	r3, sp, #12
 800a388:	9300      	str	r3, [sp, #0]
 800a38a:	462a      	mov	r2, r5
 800a38c:	4b05      	ldr	r3, [pc, #20]	@ (800a3a4 <_vfiprintf_r+0x228>)
 800a38e:	a904      	add	r1, sp, #16
 800a390:	4630      	mov	r0, r6
 800a392:	f7fc f937 	bl	8006604 <_printf_i>
 800a396:	e7e4      	b.n	800a362 <_vfiprintf_r+0x1e6>
 800a398:	0800ae51 	.word	0x0800ae51
 800a39c:	0800ae5b 	.word	0x0800ae5b
 800a3a0:	080060d5 	.word	0x080060d5
 800a3a4:	0800a159 	.word	0x0800a159
 800a3a8:	0800ae57 	.word	0x0800ae57

0800a3ac <__swbuf_r>:
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ae:	460e      	mov	r6, r1
 800a3b0:	4614      	mov	r4, r2
 800a3b2:	4605      	mov	r5, r0
 800a3b4:	b118      	cbz	r0, 800a3be <__swbuf_r+0x12>
 800a3b6:	6a03      	ldr	r3, [r0, #32]
 800a3b8:	b90b      	cbnz	r3, 800a3be <__swbuf_r+0x12>
 800a3ba:	f7fc fce3 	bl	8006d84 <__sinit>
 800a3be:	69a3      	ldr	r3, [r4, #24]
 800a3c0:	60a3      	str	r3, [r4, #8]
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	071a      	lsls	r2, r3, #28
 800a3c6:	d501      	bpl.n	800a3cc <__swbuf_r+0x20>
 800a3c8:	6923      	ldr	r3, [r4, #16]
 800a3ca:	b943      	cbnz	r3, 800a3de <__swbuf_r+0x32>
 800a3cc:	4621      	mov	r1, r4
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	f000 f82a 	bl	800a428 <__swsetup_r>
 800a3d4:	b118      	cbz	r0, 800a3de <__swbuf_r+0x32>
 800a3d6:	f04f 37ff 	mov.w	r7, #4294967295
 800a3da:	4638      	mov	r0, r7
 800a3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3de:	6823      	ldr	r3, [r4, #0]
 800a3e0:	6922      	ldr	r2, [r4, #16]
 800a3e2:	1a98      	subs	r0, r3, r2
 800a3e4:	6963      	ldr	r3, [r4, #20]
 800a3e6:	b2f6      	uxtb	r6, r6
 800a3e8:	4283      	cmp	r3, r0
 800a3ea:	4637      	mov	r7, r6
 800a3ec:	dc05      	bgt.n	800a3fa <__swbuf_r+0x4e>
 800a3ee:	4621      	mov	r1, r4
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	f7ff fa47 	bl	8009884 <_fflush_r>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d1ed      	bne.n	800a3d6 <__swbuf_r+0x2a>
 800a3fa:	68a3      	ldr	r3, [r4, #8]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	60a3      	str	r3, [r4, #8]
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	1c5a      	adds	r2, r3, #1
 800a404:	6022      	str	r2, [r4, #0]
 800a406:	701e      	strb	r6, [r3, #0]
 800a408:	6962      	ldr	r2, [r4, #20]
 800a40a:	1c43      	adds	r3, r0, #1
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d004      	beq.n	800a41a <__swbuf_r+0x6e>
 800a410:	89a3      	ldrh	r3, [r4, #12]
 800a412:	07db      	lsls	r3, r3, #31
 800a414:	d5e1      	bpl.n	800a3da <__swbuf_r+0x2e>
 800a416:	2e0a      	cmp	r6, #10
 800a418:	d1df      	bne.n	800a3da <__swbuf_r+0x2e>
 800a41a:	4621      	mov	r1, r4
 800a41c:	4628      	mov	r0, r5
 800a41e:	f7ff fa31 	bl	8009884 <_fflush_r>
 800a422:	2800      	cmp	r0, #0
 800a424:	d0d9      	beq.n	800a3da <__swbuf_r+0x2e>
 800a426:	e7d6      	b.n	800a3d6 <__swbuf_r+0x2a>

0800a428 <__swsetup_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4b29      	ldr	r3, [pc, #164]	@ (800a4d0 <__swsetup_r+0xa8>)
 800a42c:	4605      	mov	r5, r0
 800a42e:	6818      	ldr	r0, [r3, #0]
 800a430:	460c      	mov	r4, r1
 800a432:	b118      	cbz	r0, 800a43c <__swsetup_r+0x14>
 800a434:	6a03      	ldr	r3, [r0, #32]
 800a436:	b90b      	cbnz	r3, 800a43c <__swsetup_r+0x14>
 800a438:	f7fc fca4 	bl	8006d84 <__sinit>
 800a43c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a440:	0719      	lsls	r1, r3, #28
 800a442:	d422      	bmi.n	800a48a <__swsetup_r+0x62>
 800a444:	06da      	lsls	r2, r3, #27
 800a446:	d407      	bmi.n	800a458 <__swsetup_r+0x30>
 800a448:	2209      	movs	r2, #9
 800a44a:	602a      	str	r2, [r5, #0]
 800a44c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a450:	81a3      	strh	r3, [r4, #12]
 800a452:	f04f 30ff 	mov.w	r0, #4294967295
 800a456:	e033      	b.n	800a4c0 <__swsetup_r+0x98>
 800a458:	0758      	lsls	r0, r3, #29
 800a45a:	d512      	bpl.n	800a482 <__swsetup_r+0x5a>
 800a45c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a45e:	b141      	cbz	r1, 800a472 <__swsetup_r+0x4a>
 800a460:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a464:	4299      	cmp	r1, r3
 800a466:	d002      	beq.n	800a46e <__swsetup_r+0x46>
 800a468:	4628      	mov	r0, r5
 800a46a:	f7fd fbf9 	bl	8007c60 <_free_r>
 800a46e:	2300      	movs	r3, #0
 800a470:	6363      	str	r3, [r4, #52]	@ 0x34
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a478:	81a3      	strh	r3, [r4, #12]
 800a47a:	2300      	movs	r3, #0
 800a47c:	6063      	str	r3, [r4, #4]
 800a47e:	6923      	ldr	r3, [r4, #16]
 800a480:	6023      	str	r3, [r4, #0]
 800a482:	89a3      	ldrh	r3, [r4, #12]
 800a484:	f043 0308 	orr.w	r3, r3, #8
 800a488:	81a3      	strh	r3, [r4, #12]
 800a48a:	6923      	ldr	r3, [r4, #16]
 800a48c:	b94b      	cbnz	r3, 800a4a2 <__swsetup_r+0x7a>
 800a48e:	89a3      	ldrh	r3, [r4, #12]
 800a490:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a498:	d003      	beq.n	800a4a2 <__swsetup_r+0x7a>
 800a49a:	4621      	mov	r1, r4
 800a49c:	4628      	mov	r0, r5
 800a49e:	f000 f883 	bl	800a5a8 <__smakebuf_r>
 800a4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a6:	f013 0201 	ands.w	r2, r3, #1
 800a4aa:	d00a      	beq.n	800a4c2 <__swsetup_r+0x9a>
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	60a2      	str	r2, [r4, #8]
 800a4b0:	6962      	ldr	r2, [r4, #20]
 800a4b2:	4252      	negs	r2, r2
 800a4b4:	61a2      	str	r2, [r4, #24]
 800a4b6:	6922      	ldr	r2, [r4, #16]
 800a4b8:	b942      	cbnz	r2, 800a4cc <__swsetup_r+0xa4>
 800a4ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a4be:	d1c5      	bne.n	800a44c <__swsetup_r+0x24>
 800a4c0:	bd38      	pop	{r3, r4, r5, pc}
 800a4c2:	0799      	lsls	r1, r3, #30
 800a4c4:	bf58      	it	pl
 800a4c6:	6962      	ldrpl	r2, [r4, #20]
 800a4c8:	60a2      	str	r2, [r4, #8]
 800a4ca:	e7f4      	b.n	800a4b6 <__swsetup_r+0x8e>
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	e7f7      	b.n	800a4c0 <__swsetup_r+0x98>
 800a4d0:	20000028 	.word	0x20000028

0800a4d4 <_raise_r>:
 800a4d4:	291f      	cmp	r1, #31
 800a4d6:	b538      	push	{r3, r4, r5, lr}
 800a4d8:	4605      	mov	r5, r0
 800a4da:	460c      	mov	r4, r1
 800a4dc:	d904      	bls.n	800a4e8 <_raise_r+0x14>
 800a4de:	2316      	movs	r3, #22
 800a4e0:	6003      	str	r3, [r0, #0]
 800a4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e6:	bd38      	pop	{r3, r4, r5, pc}
 800a4e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a4ea:	b112      	cbz	r2, 800a4f2 <_raise_r+0x1e>
 800a4ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4f0:	b94b      	cbnz	r3, 800a506 <_raise_r+0x32>
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f000 f830 	bl	800a558 <_getpid_r>
 800a4f8:	4622      	mov	r2, r4
 800a4fa:	4601      	mov	r1, r0
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a502:	f000 b817 	b.w	800a534 <_kill_r>
 800a506:	2b01      	cmp	r3, #1
 800a508:	d00a      	beq.n	800a520 <_raise_r+0x4c>
 800a50a:	1c59      	adds	r1, r3, #1
 800a50c:	d103      	bne.n	800a516 <_raise_r+0x42>
 800a50e:	2316      	movs	r3, #22
 800a510:	6003      	str	r3, [r0, #0]
 800a512:	2001      	movs	r0, #1
 800a514:	e7e7      	b.n	800a4e6 <_raise_r+0x12>
 800a516:	2100      	movs	r1, #0
 800a518:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a51c:	4620      	mov	r0, r4
 800a51e:	4798      	blx	r3
 800a520:	2000      	movs	r0, #0
 800a522:	e7e0      	b.n	800a4e6 <_raise_r+0x12>

0800a524 <raise>:
 800a524:	4b02      	ldr	r3, [pc, #8]	@ (800a530 <raise+0xc>)
 800a526:	4601      	mov	r1, r0
 800a528:	6818      	ldr	r0, [r3, #0]
 800a52a:	f7ff bfd3 	b.w	800a4d4 <_raise_r>
 800a52e:	bf00      	nop
 800a530:	20000028 	.word	0x20000028

0800a534 <_kill_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4d07      	ldr	r5, [pc, #28]	@ (800a554 <_kill_r+0x20>)
 800a538:	2300      	movs	r3, #0
 800a53a:	4604      	mov	r4, r0
 800a53c:	4608      	mov	r0, r1
 800a53e:	4611      	mov	r1, r2
 800a540:	602b      	str	r3, [r5, #0]
 800a542:	f7f7 fe53 	bl	80021ec <_kill>
 800a546:	1c43      	adds	r3, r0, #1
 800a548:	d102      	bne.n	800a550 <_kill_r+0x1c>
 800a54a:	682b      	ldr	r3, [r5, #0]
 800a54c:	b103      	cbz	r3, 800a550 <_kill_r+0x1c>
 800a54e:	6023      	str	r3, [r4, #0]
 800a550:	bd38      	pop	{r3, r4, r5, pc}
 800a552:	bf00      	nop
 800a554:	200007e8 	.word	0x200007e8

0800a558 <_getpid_r>:
 800a558:	f7f7 be40 	b.w	80021dc <_getpid>

0800a55c <__swhatbuf_r>:
 800a55c:	b570      	push	{r4, r5, r6, lr}
 800a55e:	460c      	mov	r4, r1
 800a560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a564:	2900      	cmp	r1, #0
 800a566:	b096      	sub	sp, #88	@ 0x58
 800a568:	4615      	mov	r5, r2
 800a56a:	461e      	mov	r6, r3
 800a56c:	da0d      	bge.n	800a58a <__swhatbuf_r+0x2e>
 800a56e:	89a3      	ldrh	r3, [r4, #12]
 800a570:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a574:	f04f 0100 	mov.w	r1, #0
 800a578:	bf14      	ite	ne
 800a57a:	2340      	movne	r3, #64	@ 0x40
 800a57c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a580:	2000      	movs	r0, #0
 800a582:	6031      	str	r1, [r6, #0]
 800a584:	602b      	str	r3, [r5, #0]
 800a586:	b016      	add	sp, #88	@ 0x58
 800a588:	bd70      	pop	{r4, r5, r6, pc}
 800a58a:	466a      	mov	r2, sp
 800a58c:	f000 f848 	bl	800a620 <_fstat_r>
 800a590:	2800      	cmp	r0, #0
 800a592:	dbec      	blt.n	800a56e <__swhatbuf_r+0x12>
 800a594:	9901      	ldr	r1, [sp, #4]
 800a596:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a59a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a59e:	4259      	negs	r1, r3
 800a5a0:	4159      	adcs	r1, r3
 800a5a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5a6:	e7eb      	b.n	800a580 <__swhatbuf_r+0x24>

0800a5a8 <__smakebuf_r>:
 800a5a8:	898b      	ldrh	r3, [r1, #12]
 800a5aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5ac:	079d      	lsls	r5, r3, #30
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	d507      	bpl.n	800a5c4 <__smakebuf_r+0x1c>
 800a5b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	6123      	str	r3, [r4, #16]
 800a5bc:	2301      	movs	r3, #1
 800a5be:	6163      	str	r3, [r4, #20]
 800a5c0:	b003      	add	sp, #12
 800a5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5c4:	ab01      	add	r3, sp, #4
 800a5c6:	466a      	mov	r2, sp
 800a5c8:	f7ff ffc8 	bl	800a55c <__swhatbuf_r>
 800a5cc:	9f00      	ldr	r7, [sp, #0]
 800a5ce:	4605      	mov	r5, r0
 800a5d0:	4639      	mov	r1, r7
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f7fd fbb8 	bl	8007d48 <_malloc_r>
 800a5d8:	b948      	cbnz	r0, 800a5ee <__smakebuf_r+0x46>
 800a5da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5de:	059a      	lsls	r2, r3, #22
 800a5e0:	d4ee      	bmi.n	800a5c0 <__smakebuf_r+0x18>
 800a5e2:	f023 0303 	bic.w	r3, r3, #3
 800a5e6:	f043 0302 	orr.w	r3, r3, #2
 800a5ea:	81a3      	strh	r3, [r4, #12]
 800a5ec:	e7e2      	b.n	800a5b4 <__smakebuf_r+0xc>
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	6020      	str	r0, [r4, #0]
 800a5f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5f6:	81a3      	strh	r3, [r4, #12]
 800a5f8:	9b01      	ldr	r3, [sp, #4]
 800a5fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a5fe:	b15b      	cbz	r3, 800a618 <__smakebuf_r+0x70>
 800a600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a604:	4630      	mov	r0, r6
 800a606:	f000 f81d 	bl	800a644 <_isatty_r>
 800a60a:	b128      	cbz	r0, 800a618 <__smakebuf_r+0x70>
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	f023 0303 	bic.w	r3, r3, #3
 800a612:	f043 0301 	orr.w	r3, r3, #1
 800a616:	81a3      	strh	r3, [r4, #12]
 800a618:	89a3      	ldrh	r3, [r4, #12]
 800a61a:	431d      	orrs	r5, r3
 800a61c:	81a5      	strh	r5, [r4, #12]
 800a61e:	e7cf      	b.n	800a5c0 <__smakebuf_r+0x18>

0800a620 <_fstat_r>:
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	4d07      	ldr	r5, [pc, #28]	@ (800a640 <_fstat_r+0x20>)
 800a624:	2300      	movs	r3, #0
 800a626:	4604      	mov	r4, r0
 800a628:	4608      	mov	r0, r1
 800a62a:	4611      	mov	r1, r2
 800a62c:	602b      	str	r3, [r5, #0]
 800a62e:	f7f7 fe3d 	bl	80022ac <_fstat>
 800a632:	1c43      	adds	r3, r0, #1
 800a634:	d102      	bne.n	800a63c <_fstat_r+0x1c>
 800a636:	682b      	ldr	r3, [r5, #0]
 800a638:	b103      	cbz	r3, 800a63c <_fstat_r+0x1c>
 800a63a:	6023      	str	r3, [r4, #0]
 800a63c:	bd38      	pop	{r3, r4, r5, pc}
 800a63e:	bf00      	nop
 800a640:	200007e8 	.word	0x200007e8

0800a644 <_isatty_r>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4d06      	ldr	r5, [pc, #24]	@ (800a660 <_isatty_r+0x1c>)
 800a648:	2300      	movs	r3, #0
 800a64a:	4604      	mov	r4, r0
 800a64c:	4608      	mov	r0, r1
 800a64e:	602b      	str	r3, [r5, #0]
 800a650:	f7f7 fe3c 	bl	80022cc <_isatty>
 800a654:	1c43      	adds	r3, r0, #1
 800a656:	d102      	bne.n	800a65e <_isatty_r+0x1a>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	b103      	cbz	r3, 800a65e <_isatty_r+0x1a>
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	bd38      	pop	{r3, r4, r5, pc}
 800a660:	200007e8 	.word	0x200007e8
 800a664:	00000000 	.word	0x00000000

0800a668 <log>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	ed2d 8b02 	vpush	{d8}
 800a66e:	ec55 4b10 	vmov	r4, r5, d0
 800a672:	f000 f839 	bl	800a6e8 <__ieee754_log>
 800a676:	4622      	mov	r2, r4
 800a678:	462b      	mov	r3, r5
 800a67a:	4620      	mov	r0, r4
 800a67c:	4629      	mov	r1, r5
 800a67e:	eeb0 8a40 	vmov.f32	s16, s0
 800a682:	eef0 8a60 	vmov.f32	s17, s1
 800a686:	f7f6 fa69 	bl	8000b5c <__aeabi_dcmpun>
 800a68a:	b998      	cbnz	r0, 800a6b4 <log+0x4c>
 800a68c:	2200      	movs	r2, #0
 800a68e:	2300      	movs	r3, #0
 800a690:	4620      	mov	r0, r4
 800a692:	4629      	mov	r1, r5
 800a694:	f7f6 fa58 	bl	8000b48 <__aeabi_dcmpgt>
 800a698:	b960      	cbnz	r0, 800a6b4 <log+0x4c>
 800a69a:	2200      	movs	r2, #0
 800a69c:	2300      	movs	r3, #0
 800a69e:	4620      	mov	r0, r4
 800a6a0:	4629      	mov	r1, r5
 800a6a2:	f7f6 fa29 	bl	8000af8 <__aeabi_dcmpeq>
 800a6a6:	b160      	cbz	r0, 800a6c2 <log+0x5a>
 800a6a8:	f7fc fc58 	bl	8006f5c <__errno>
 800a6ac:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800a6d8 <log+0x70>
 800a6b0:	2322      	movs	r3, #34	@ 0x22
 800a6b2:	6003      	str	r3, [r0, #0]
 800a6b4:	eeb0 0a48 	vmov.f32	s0, s16
 800a6b8:	eef0 0a68 	vmov.f32	s1, s17
 800a6bc:	ecbd 8b02 	vpop	{d8}
 800a6c0:	bd38      	pop	{r3, r4, r5, pc}
 800a6c2:	f7fc fc4b 	bl	8006f5c <__errno>
 800a6c6:	ecbd 8b02 	vpop	{d8}
 800a6ca:	2321      	movs	r3, #33	@ 0x21
 800a6cc:	6003      	str	r3, [r0, #0]
 800a6ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6d2:	4803      	ldr	r0, [pc, #12]	@ (800a6e0 <log+0x78>)
 800a6d4:	f7ff b948 	b.w	8009968 <nan>
 800a6d8:	00000000 	.word	0x00000000
 800a6dc:	fff00000 	.word	0xfff00000
 800a6e0:	0800aea5 	.word	0x0800aea5
 800a6e4:	00000000 	.word	0x00000000

0800a6e8 <__ieee754_log>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	ec51 0b10 	vmov	r0, r1, d0
 800a6f0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800a6f4:	b087      	sub	sp, #28
 800a6f6:	460d      	mov	r5, r1
 800a6f8:	da26      	bge.n	800a748 <__ieee754_log+0x60>
 800a6fa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a6fe:	4303      	orrs	r3, r0
 800a700:	4602      	mov	r2, r0
 800a702:	d10a      	bne.n	800a71a <__ieee754_log+0x32>
 800a704:	49ce      	ldr	r1, [pc, #824]	@ (800aa40 <__ieee754_log+0x358>)
 800a706:	2200      	movs	r2, #0
 800a708:	2300      	movs	r3, #0
 800a70a:	2000      	movs	r0, #0
 800a70c:	f7f6 f8b6 	bl	800087c <__aeabi_ddiv>
 800a710:	ec41 0b10 	vmov	d0, r0, r1
 800a714:	b007      	add	sp, #28
 800a716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71a:	2900      	cmp	r1, #0
 800a71c:	da05      	bge.n	800a72a <__ieee754_log+0x42>
 800a71e:	460b      	mov	r3, r1
 800a720:	f7f5 fdca 	bl	80002b8 <__aeabi_dsub>
 800a724:	2200      	movs	r2, #0
 800a726:	2300      	movs	r3, #0
 800a728:	e7f0      	b.n	800a70c <__ieee754_log+0x24>
 800a72a:	4bc6      	ldr	r3, [pc, #792]	@ (800aa44 <__ieee754_log+0x35c>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	f7f5 ff7b 	bl	8000628 <__aeabi_dmul>
 800a732:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800a736:	460d      	mov	r5, r1
 800a738:	4ac3      	ldr	r2, [pc, #780]	@ (800aa48 <__ieee754_log+0x360>)
 800a73a:	4295      	cmp	r5, r2
 800a73c:	dd06      	ble.n	800a74c <__ieee754_log+0x64>
 800a73e:	4602      	mov	r2, r0
 800a740:	460b      	mov	r3, r1
 800a742:	f7f5 fdbb 	bl	80002bc <__adddf3>
 800a746:	e7e3      	b.n	800a710 <__ieee754_log+0x28>
 800a748:	2300      	movs	r3, #0
 800a74a:	e7f5      	b.n	800a738 <__ieee754_log+0x50>
 800a74c:	152c      	asrs	r4, r5, #20
 800a74e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800a752:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a756:	441c      	add	r4, r3
 800a758:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800a75c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800a760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a764:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800a768:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800a76c:	ea42 0105 	orr.w	r1, r2, r5
 800a770:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a774:	2200      	movs	r2, #0
 800a776:	4bb5      	ldr	r3, [pc, #724]	@ (800aa4c <__ieee754_log+0x364>)
 800a778:	f7f5 fd9e 	bl	80002b8 <__aeabi_dsub>
 800a77c:	1cab      	adds	r3, r5, #2
 800a77e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a782:	2b02      	cmp	r3, #2
 800a784:	4682      	mov	sl, r0
 800a786:	468b      	mov	fp, r1
 800a788:	f04f 0200 	mov.w	r2, #0
 800a78c:	dc53      	bgt.n	800a836 <__ieee754_log+0x14e>
 800a78e:	2300      	movs	r3, #0
 800a790:	f7f6 f9b2 	bl	8000af8 <__aeabi_dcmpeq>
 800a794:	b1d0      	cbz	r0, 800a7cc <__ieee754_log+0xe4>
 800a796:	2c00      	cmp	r4, #0
 800a798:	f000 8120 	beq.w	800a9dc <__ieee754_log+0x2f4>
 800a79c:	4620      	mov	r0, r4
 800a79e:	f7f5 fed9 	bl	8000554 <__aeabi_i2d>
 800a7a2:	a391      	add	r3, pc, #580	@ (adr r3, 800a9e8 <__ieee754_log+0x300>)
 800a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	460f      	mov	r7, r1
 800a7ac:	f7f5 ff3c 	bl	8000628 <__aeabi_dmul>
 800a7b0:	a38f      	add	r3, pc, #572	@ (adr r3, 800a9f0 <__ieee754_log+0x308>)
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	460d      	mov	r5, r1
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	4639      	mov	r1, r7
 800a7be:	f7f5 ff33 	bl	8000628 <__aeabi_dmul>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	e7ba      	b.n	800a742 <__ieee754_log+0x5a>
 800a7cc:	a38a      	add	r3, pc, #552	@ (adr r3, 800a9f8 <__ieee754_log+0x310>)
 800a7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d2:	4650      	mov	r0, sl
 800a7d4:	4659      	mov	r1, fp
 800a7d6:	f7f5 ff27 	bl	8000628 <__aeabi_dmul>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	460b      	mov	r3, r1
 800a7de:	2000      	movs	r0, #0
 800a7e0:	499b      	ldr	r1, [pc, #620]	@ (800aa50 <__ieee754_log+0x368>)
 800a7e2:	f7f5 fd69 	bl	80002b8 <__aeabi_dsub>
 800a7e6:	4652      	mov	r2, sl
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	460f      	mov	r7, r1
 800a7ec:	465b      	mov	r3, fp
 800a7ee:	4650      	mov	r0, sl
 800a7f0:	4659      	mov	r1, fp
 800a7f2:	f7f5 ff19 	bl	8000628 <__aeabi_dmul>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	f7f5 ff13 	bl	8000628 <__aeabi_dmul>
 800a802:	4606      	mov	r6, r0
 800a804:	460f      	mov	r7, r1
 800a806:	b914      	cbnz	r4, 800a80e <__ieee754_log+0x126>
 800a808:	4632      	mov	r2, r6
 800a80a:	463b      	mov	r3, r7
 800a80c:	e0a0      	b.n	800a950 <__ieee754_log+0x268>
 800a80e:	4620      	mov	r0, r4
 800a810:	f7f5 fea0 	bl	8000554 <__aeabi_i2d>
 800a814:	a374      	add	r3, pc, #464	@ (adr r3, 800a9e8 <__ieee754_log+0x300>)
 800a816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81a:	4680      	mov	r8, r0
 800a81c:	4689      	mov	r9, r1
 800a81e:	f7f5 ff03 	bl	8000628 <__aeabi_dmul>
 800a822:	a373      	add	r3, pc, #460	@ (adr r3, 800a9f0 <__ieee754_log+0x308>)
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	4604      	mov	r4, r0
 800a82a:	460d      	mov	r5, r1
 800a82c:	4640      	mov	r0, r8
 800a82e:	4649      	mov	r1, r9
 800a830:	f7f5 fefa 	bl	8000628 <__aeabi_dmul>
 800a834:	e0a5      	b.n	800a982 <__ieee754_log+0x29a>
 800a836:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a83a:	f7f5 fd3f 	bl	80002bc <__adddf3>
 800a83e:	4602      	mov	r2, r0
 800a840:	460b      	mov	r3, r1
 800a842:	4650      	mov	r0, sl
 800a844:	4659      	mov	r1, fp
 800a846:	f7f6 f819 	bl	800087c <__aeabi_ddiv>
 800a84a:	e9cd 0100 	strd	r0, r1, [sp]
 800a84e:	4620      	mov	r0, r4
 800a850:	f7f5 fe80 	bl	8000554 <__aeabi_i2d>
 800a854:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a85c:	4610      	mov	r0, r2
 800a85e:	4619      	mov	r1, r3
 800a860:	f7f5 fee2 	bl	8000628 <__aeabi_dmul>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a86c:	f7f5 fedc 	bl	8000628 <__aeabi_dmul>
 800a870:	a363      	add	r3, pc, #396	@ (adr r3, 800aa00 <__ieee754_log+0x318>)
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	4680      	mov	r8, r0
 800a878:	4689      	mov	r9, r1
 800a87a:	f7f5 fed5 	bl	8000628 <__aeabi_dmul>
 800a87e:	a362      	add	r3, pc, #392	@ (adr r3, 800aa08 <__ieee754_log+0x320>)
 800a880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a884:	f7f5 fd1a 	bl	80002bc <__adddf3>
 800a888:	4642      	mov	r2, r8
 800a88a:	464b      	mov	r3, r9
 800a88c:	f7f5 fecc 	bl	8000628 <__aeabi_dmul>
 800a890:	a35f      	add	r3, pc, #380	@ (adr r3, 800aa10 <__ieee754_log+0x328>)
 800a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a896:	f7f5 fd11 	bl	80002bc <__adddf3>
 800a89a:	4642      	mov	r2, r8
 800a89c:	464b      	mov	r3, r9
 800a89e:	f7f5 fec3 	bl	8000628 <__aeabi_dmul>
 800a8a2:	a35d      	add	r3, pc, #372	@ (adr r3, 800aa18 <__ieee754_log+0x330>)
 800a8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a8:	f7f5 fd08 	bl	80002bc <__adddf3>
 800a8ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8b0:	f7f5 feba 	bl	8000628 <__aeabi_dmul>
 800a8b4:	a35a      	add	r3, pc, #360	@ (adr r3, 800aa20 <__ieee754_log+0x338>)
 800a8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8be:	4640      	mov	r0, r8
 800a8c0:	4649      	mov	r1, r9
 800a8c2:	f7f5 feb1 	bl	8000628 <__aeabi_dmul>
 800a8c6:	a358      	add	r3, pc, #352	@ (adr r3, 800aa28 <__ieee754_log+0x340>)
 800a8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8cc:	f7f5 fcf6 	bl	80002bc <__adddf3>
 800a8d0:	4642      	mov	r2, r8
 800a8d2:	464b      	mov	r3, r9
 800a8d4:	f7f5 fea8 	bl	8000628 <__aeabi_dmul>
 800a8d8:	a355      	add	r3, pc, #340	@ (adr r3, 800aa30 <__ieee754_log+0x348>)
 800a8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8de:	f7f5 fced 	bl	80002bc <__adddf3>
 800a8e2:	4642      	mov	r2, r8
 800a8e4:	464b      	mov	r3, r9
 800a8e6:	f7f5 fe9f 	bl	8000628 <__aeabi_dmul>
 800a8ea:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800a8f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8fa:	f7f5 fcdf 	bl	80002bc <__adddf3>
 800a8fe:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800a902:	3551      	adds	r5, #81	@ 0x51
 800a904:	4335      	orrs	r5, r6
 800a906:	2d00      	cmp	r5, #0
 800a908:	4680      	mov	r8, r0
 800a90a:	4689      	mov	r9, r1
 800a90c:	dd48      	ble.n	800a9a0 <__ieee754_log+0x2b8>
 800a90e:	4b50      	ldr	r3, [pc, #320]	@ (800aa50 <__ieee754_log+0x368>)
 800a910:	2200      	movs	r2, #0
 800a912:	4650      	mov	r0, sl
 800a914:	4659      	mov	r1, fp
 800a916:	f7f5 fe87 	bl	8000628 <__aeabi_dmul>
 800a91a:	4652      	mov	r2, sl
 800a91c:	465b      	mov	r3, fp
 800a91e:	f7f5 fe83 	bl	8000628 <__aeabi_dmul>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	4606      	mov	r6, r0
 800a928:	460f      	mov	r7, r1
 800a92a:	4640      	mov	r0, r8
 800a92c:	4649      	mov	r1, r9
 800a92e:	f7f5 fcc5 	bl	80002bc <__adddf3>
 800a932:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a936:	f7f5 fe77 	bl	8000628 <__aeabi_dmul>
 800a93a:	4680      	mov	r8, r0
 800a93c:	4689      	mov	r9, r1
 800a93e:	b964      	cbnz	r4, 800a95a <__ieee754_log+0x272>
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	4630      	mov	r0, r6
 800a946:	4639      	mov	r1, r7
 800a948:	f7f5 fcb6 	bl	80002b8 <__aeabi_dsub>
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	4650      	mov	r0, sl
 800a952:	4659      	mov	r1, fp
 800a954:	f7f5 fcb0 	bl	80002b8 <__aeabi_dsub>
 800a958:	e6da      	b.n	800a710 <__ieee754_log+0x28>
 800a95a:	a323      	add	r3, pc, #140	@ (adr r3, 800a9e8 <__ieee754_log+0x300>)
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a964:	f7f5 fe60 	bl	8000628 <__aeabi_dmul>
 800a968:	a321      	add	r3, pc, #132	@ (adr r3, 800a9f0 <__ieee754_log+0x308>)
 800a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96e:	4604      	mov	r4, r0
 800a970:	460d      	mov	r5, r1
 800a972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a976:	f7f5 fe57 	bl	8000628 <__aeabi_dmul>
 800a97a:	4642      	mov	r2, r8
 800a97c:	464b      	mov	r3, r9
 800a97e:	f7f5 fc9d 	bl	80002bc <__adddf3>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4630      	mov	r0, r6
 800a988:	4639      	mov	r1, r7
 800a98a:	f7f5 fc95 	bl	80002b8 <__aeabi_dsub>
 800a98e:	4652      	mov	r2, sl
 800a990:	465b      	mov	r3, fp
 800a992:	f7f5 fc91 	bl	80002b8 <__aeabi_dsub>
 800a996:	4602      	mov	r2, r0
 800a998:	460b      	mov	r3, r1
 800a99a:	4620      	mov	r0, r4
 800a99c:	4629      	mov	r1, r5
 800a99e:	e7d9      	b.n	800a954 <__ieee754_log+0x26c>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	4650      	mov	r0, sl
 800a9a6:	4659      	mov	r1, fp
 800a9a8:	f7f5 fc86 	bl	80002b8 <__aeabi_dsub>
 800a9ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9b0:	f7f5 fe3a 	bl	8000628 <__aeabi_dmul>
 800a9b4:	4606      	mov	r6, r0
 800a9b6:	460f      	mov	r7, r1
 800a9b8:	2c00      	cmp	r4, #0
 800a9ba:	f43f af25 	beq.w	800a808 <__ieee754_log+0x120>
 800a9be:	a30a      	add	r3, pc, #40	@ (adr r3, 800a9e8 <__ieee754_log+0x300>)
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9c8:	f7f5 fe2e 	bl	8000628 <__aeabi_dmul>
 800a9cc:	a308      	add	r3, pc, #32	@ (adr r3, 800a9f0 <__ieee754_log+0x308>)
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9da:	e729      	b.n	800a830 <__ieee754_log+0x148>
 800a9dc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800aa38 <__ieee754_log+0x350>
 800a9e0:	e698      	b.n	800a714 <__ieee754_log+0x2c>
 800a9e2:	bf00      	nop
 800a9e4:	f3af 8000 	nop.w
 800a9e8:	fee00000 	.word	0xfee00000
 800a9ec:	3fe62e42 	.word	0x3fe62e42
 800a9f0:	35793c76 	.word	0x35793c76
 800a9f4:	3dea39ef 	.word	0x3dea39ef
 800a9f8:	55555555 	.word	0x55555555
 800a9fc:	3fd55555 	.word	0x3fd55555
 800aa00:	df3e5244 	.word	0xdf3e5244
 800aa04:	3fc2f112 	.word	0x3fc2f112
 800aa08:	96cb03de 	.word	0x96cb03de
 800aa0c:	3fc74664 	.word	0x3fc74664
 800aa10:	94229359 	.word	0x94229359
 800aa14:	3fd24924 	.word	0x3fd24924
 800aa18:	55555593 	.word	0x55555593
 800aa1c:	3fe55555 	.word	0x3fe55555
 800aa20:	d078c69f 	.word	0xd078c69f
 800aa24:	3fc39a09 	.word	0x3fc39a09
 800aa28:	1d8e78af 	.word	0x1d8e78af
 800aa2c:	3fcc71c5 	.word	0x3fcc71c5
 800aa30:	9997fa04 	.word	0x9997fa04
 800aa34:	3fd99999 	.word	0x3fd99999
	...
 800aa40:	c3500000 	.word	0xc3500000
 800aa44:	43500000 	.word	0x43500000
 800aa48:	7fefffff 	.word	0x7fefffff
 800aa4c:	3ff00000 	.word	0x3ff00000
 800aa50:	3fe00000 	.word	0x3fe00000

0800aa54 <_init>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	bf00      	nop
 800aa58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa5a:	bc08      	pop	{r3}
 800aa5c:	469e      	mov	lr, r3
 800aa5e:	4770      	bx	lr

0800aa60 <_fini>:
 800aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa62:	bf00      	nop
 800aa64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa66:	bc08      	pop	{r3}
 800aa68:	469e      	mov	lr, r3
 800aa6a:	4770      	bx	lr
